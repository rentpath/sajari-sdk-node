/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.sajari = (function() {

    /**
     * Namespace sajari.
     * @exports sajari
     * @namespace
     */
    var sajari = {};

    sajari.api = (function() {

        /**
         * Namespace api.
         * @memberof sajari
         * @namespace
         */
        var api = {};

        api.pipeline = (function() {

            /**
             * Namespace pipeline.
             * @memberof sajari.api
             * @namespace
             */
            var pipeline = {};

            pipeline.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof sajari.api.pipeline
                 * @namespace
                 */
                var v1 = {};

                v1.Pipeline = (function() {

                    /**
                     * Properties of a Pipeline.
                     * @memberof sajari.api.pipeline.v1
                     * @interface IPipeline
                     * @property {string|null} [name] Pipeline name
                     */

                    /**
                     * Constructs a new Pipeline.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a Pipeline.
                     * @implements IPipeline
                     * @constructor
                     * @param {sajari.api.pipeline.v1.IPipeline=} [properties] Properties to set
                     */
                    function Pipeline(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Pipeline name.
                     * @member {string} name
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @instance
                     */
                    Pipeline.prototype.name = "";

                    /**
                     * Creates a new Pipeline instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {sajari.api.pipeline.v1.IPipeline=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.Pipeline} Pipeline instance
                     */
                    Pipeline.create = function create(properties) {
                        return new Pipeline(properties);
                    };

                    /**
                     * Encodes the specified Pipeline message. Does not implicitly {@link sajari.api.pipeline.v1.Pipeline.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {sajari.api.pipeline.v1.IPipeline} message Pipeline message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pipeline.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && message.hasOwnProperty("name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        return writer;
                    };

                    /**
                     * Encodes the specified Pipeline message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.Pipeline.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {sajari.api.pipeline.v1.IPipeline} message Pipeline message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Pipeline.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Pipeline message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.Pipeline} Pipeline
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pipeline.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.Pipeline();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Pipeline message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.Pipeline} Pipeline
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Pipeline.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Pipeline message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Pipeline.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        return null;
                    };

                    /**
                     * Creates a Pipeline message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.Pipeline} Pipeline
                     */
                    Pipeline.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.Pipeline)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.Pipeline();
                        if (object.name != null)
                            message.name = String(object.name);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Pipeline message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @static
                     * @param {sajari.api.pipeline.v1.Pipeline} message Pipeline
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Pipeline.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.name = "";
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        return object;
                    };

                    /**
                     * Converts this Pipeline to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.Pipeline
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Pipeline.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Pipeline;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Creates new Query service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.Query
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Query} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Query.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.api.pipeline.v1.Query#search}.
                     * @memberof sajari.api.pipeline.v1.Query
                     * @typedef SearchCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.api.pipeline.v1.SearchResponse} [response] SearchResponse
                     */

                    /**
                     * Calls Search.
                     * @function search
                     * @memberof sajari.api.pipeline.v1.Query
                     * @instance
                     * @param {sajari.api.pipeline.v1.ISearchRequest} request SearchRequest message or plain object
                     * @param {sajari.api.pipeline.v1.Query.SearchCallback} callback Node-style callback called with the error, if any, and SearchResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Query.prototype.search = function search(request, callback) {
                        return this.rpcCall(search, $root.sajari.api.pipeline.v1.SearchRequest, $root.sajari.api.pipeline.v1.SearchResponse, request, callback);
                    };

                    /**
                     * Calls Search.
                     * @function search
                     * @memberof sajari.api.pipeline.v1.Query
                     * @instance
                     * @param {sajari.api.pipeline.v1.ISearchRequest} request SearchRequest message or plain object
                     * @returns {Promise<sajari.api.pipeline.v1.SearchResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.SearchRequest = (function() {

                    /**
                     * Properties of a SearchRequest.
                     * @memberof sajari.api.pipeline.v1
                     * @interface ISearchRequest
                     * @property {sajari.api.pipeline.v1.IPipeline|null} [pipeline] SearchRequest pipeline
                     * @property {Object.<string,string>|null} [values] SearchRequest values
                     * @property {sajari.api.pipeline.v1.SearchRequest.ITracking|null} [tracking] SearchRequest tracking
                     */

                    /**
                     * Constructs a new SearchRequest.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a SearchRequest.
                     * @implements ISearchRequest
                     * @constructor
                     * @param {sajari.api.pipeline.v1.ISearchRequest=} [properties] Properties to set
                     */
                    function SearchRequest(properties) {
                        this.values = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SearchRequest pipeline.
                     * @member {sajari.api.pipeline.v1.IPipeline|null|undefined} pipeline
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.pipeline = null;

                    /**
                     * SearchRequest values.
                     * @member {Object.<string,string>} values
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.values = $util.emptyObject;

                    /**
                     * SearchRequest tracking.
                     * @member {sajari.api.pipeline.v1.SearchRequest.ITracking|null|undefined} tracking
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.tracking = null;

                    /**
                     * Creates a new SearchRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchRequest=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.SearchRequest} SearchRequest instance
                     */
                    SearchRequest.create = function create(properties) {
                        return new SearchRequest(properties);
                    };

                    /**
                     * Encodes the specified SearchRequest message. Does not implicitly {@link sajari.api.pipeline.v1.SearchRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchRequest} message SearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pipeline != null && message.hasOwnProperty("pipeline"))
                            $root.sajari.api.pipeline.v1.Pipeline.encode(message.pipeline, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.values != null && message.hasOwnProperty("values"))
                            for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.values[keys[i]]).ldelim();
                        if (message.tracking != null && message.hasOwnProperty("tracking"))
                            $root.sajari.api.pipeline.v1.SearchRequest.Tracking.encode(message.tracking, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SearchRequest message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchRequest} message SearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SearchRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.SearchRequest} SearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pipeline = $root.sajari.api.pipeline.v1.Pipeline.decode(reader, reader.uint32());
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.values === $util.emptyObject)
                                    message.values = {};
                                key = reader.string();
                                reader.pos++;
                                message.values[key] = reader.string();
                                break;
                            case 3:
                                message.tracking = $root.sajari.api.pipeline.v1.SearchRequest.Tracking.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SearchRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.SearchRequest} SearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SearchRequest message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pipeline != null && message.hasOwnProperty("pipeline")) {
                            var error = $root.sajari.api.pipeline.v1.Pipeline.verify(message.pipeline);
                            if (error)
                                return "pipeline." + error;
                        }
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!$util.isObject(message.values))
                                return "values: object expected";
                            var key = Object.keys(message.values);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.values[key[i]]))
                                    return "values: string{k:string} expected";
                        }
                        if (message.tracking != null && message.hasOwnProperty("tracking")) {
                            var error = $root.sajari.api.pipeline.v1.SearchRequest.Tracking.verify(message.tracking);
                            if (error)
                                return "tracking." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a SearchRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.SearchRequest} SearchRequest
                     */
                    SearchRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.SearchRequest)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.SearchRequest();
                        if (object.pipeline != null) {
                            if (typeof object.pipeline !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.SearchRequest.pipeline: object expected");
                            message.pipeline = $root.sajari.api.pipeline.v1.Pipeline.fromObject(object.pipeline);
                        }
                        if (object.values) {
                            if (typeof object.values !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.SearchRequest.values: object expected");
                            message.values = {};
                            for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i)
                                message.values[keys[i]] = String(object.values[keys[i]]);
                        }
                        if (object.tracking != null) {
                            if (typeof object.tracking !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.SearchRequest.tracking: object expected");
                            message.tracking = $root.sajari.api.pipeline.v1.SearchRequest.Tracking.fromObject(object.tracking);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SearchRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.SearchRequest} message SearchRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.values = {};
                        if (options.defaults) {
                            object.pipeline = null;
                            object.tracking = null;
                        }
                        if (message.pipeline != null && message.hasOwnProperty("pipeline"))
                            object.pipeline = $root.sajari.api.pipeline.v1.Pipeline.toObject(message.pipeline, options);
                        var keys2;
                        if (message.values && (keys2 = Object.keys(message.values)).length) {
                            object.values = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.values[keys2[j]] = message.values[keys2[j]];
                        }
                        if (message.tracking != null && message.hasOwnProperty("tracking"))
                            object.tracking = $root.sajari.api.pipeline.v1.SearchRequest.Tracking.toObject(message.tracking, options);
                        return object;
                    };

                    /**
                     * Converts this SearchRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.SearchRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    SearchRequest.Tracking = (function() {

                        /**
                         * Properties of a Tracking.
                         * @memberof sajari.api.pipeline.v1.SearchRequest
                         * @interface ITracking
                         * @property {sajari.api.pipeline.v1.SearchRequest.Tracking.Type|null} [type] Tracking type
                         * @property {string|null} [queryId] Tracking queryId
                         * @property {number|null} [sequence] Tracking sequence
                         * @property {string|null} [field] Tracking field
                         * @property {Object.<string,string>|null} [data] Tracking data
                         */

                        /**
                         * Constructs a new Tracking.
                         * @memberof sajari.api.pipeline.v1.SearchRequest
                         * @classdesc Represents a Tracking.
                         * @implements ITracking
                         * @constructor
                         * @param {sajari.api.pipeline.v1.SearchRequest.ITracking=} [properties] Properties to set
                         */
                        function Tracking(properties) {
                            this.data = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Tracking type.
                         * @member {sajari.api.pipeline.v1.SearchRequest.Tracking.Type} type
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         */
                        Tracking.prototype.type = 0;

                        /**
                         * Tracking queryId.
                         * @member {string} queryId
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         */
                        Tracking.prototype.queryId = "";

                        /**
                         * Tracking sequence.
                         * @member {number} sequence
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         */
                        Tracking.prototype.sequence = 0;

                        /**
                         * Tracking field.
                         * @member {string} field
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         */
                        Tracking.prototype.field = "";

                        /**
                         * Tracking data.
                         * @member {Object.<string,string>} data
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         */
                        Tracking.prototype.data = $util.emptyObject;

                        /**
                         * Creates a new Tracking instance using the specified properties.
                         * @function create
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchRequest.ITracking=} [properties] Properties to set
                         * @returns {sajari.api.pipeline.v1.SearchRequest.Tracking} Tracking instance
                         */
                        Tracking.create = function create(properties) {
                            return new Tracking(properties);
                        };

                        /**
                         * Encodes the specified Tracking message. Does not implicitly {@link sajari.api.pipeline.v1.SearchRequest.Tracking.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchRequest.ITracking} message Tracking message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Tracking.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.queryId != null && message.hasOwnProperty("queryId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.queryId);
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.sequence);
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.field);
                            if (message.data != null && message.hasOwnProperty("data"))
                                for (var keys = Object.keys(message.data), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.data[keys[i]]).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Tracking message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchRequest.Tracking.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchRequest.ITracking} message Tracking message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Tracking.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Tracking message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.api.pipeline.v1.SearchRequest.Tracking} Tracking
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Tracking.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchRequest.Tracking(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.type = reader.int32();
                                    break;
                                case 2:
                                    message.queryId = reader.string();
                                    break;
                                case 3:
                                    message.sequence = reader.int32();
                                    break;
                                case 4:
                                    message.field = reader.string();
                                    break;
                                case 5:
                                    reader.skip().pos++;
                                    if (message.data === $util.emptyObject)
                                        message.data = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.data[key] = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Tracking message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.api.pipeline.v1.SearchRequest.Tracking} Tracking
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Tracking.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Tracking message.
                         * @function verify
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Tracking.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.queryId != null && message.hasOwnProperty("queryId"))
                                if (!$util.isString(message.queryId))
                                    return "queryId: string expected";
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (!$util.isInteger(message.sequence))
                                    return "sequence: integer expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!$util.isObject(message.data))
                                    return "data: object expected";
                                var key = Object.keys(message.data);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.data[key[i]]))
                                        return "data: string{k:string} expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a Tracking message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.api.pipeline.v1.SearchRequest.Tracking} Tracking
                         */
                        Tracking.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.api.pipeline.v1.SearchRequest.Tracking)
                                return object;
                            var message = new $root.sajari.api.pipeline.v1.SearchRequest.Tracking();
                            switch (object.type) {
                            case "NONE":
                            case 0:
                                message.type = 0;
                                break;
                            case "CLICK":
                            case 1:
                                message.type = 1;
                                break;
                            case "POS_NEG":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.queryId != null)
                                message.queryId = String(object.queryId);
                            if (object.sequence != null)
                                message.sequence = object.sequence | 0;
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.data) {
                                if (typeof object.data !== "object")
                                    throw TypeError(".sajari.api.pipeline.v1.SearchRequest.Tracking.data: object expected");
                                message.data = {};
                                for (var keys = Object.keys(object.data), i = 0; i < keys.length; ++i)
                                    message.data[keys[i]] = String(object.data[keys[i]]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Tracking message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchRequest.Tracking} message Tracking
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Tracking.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.data = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "NONE" : 0;
                                object.queryId = "";
                                object.sequence = 0;
                                object.field = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.sajari.api.pipeline.v1.SearchRequest.Tracking.Type[message.type] : message.type;
                            if (message.queryId != null && message.hasOwnProperty("queryId"))
                                object.queryId = message.queryId;
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                object.sequence = message.sequence;
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            var keys2;
                            if (message.data && (keys2 = Object.keys(message.data)).length) {
                                object.data = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.data[keys2[j]] = message.data[keys2[j]];
                            }
                            return object;
                        };

                        /**
                         * Converts this Tracking to JSON.
                         * @function toJSON
                         * @memberof sajari.api.pipeline.v1.SearchRequest.Tracking
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Tracking.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Type enum.
                         * @name sajari.api.pipeline.v1.SearchRequest.Tracking.Type
                         * @enum {string}
                         * @property {number} NONE=0 NONE value
                         * @property {number} CLICK=1 CLICK value
                         * @property {number} POS_NEG=2 POS_NEG value
                         */
                        Tracking.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "NONE"] = 0;
                            values[valuesById[1] = "CLICK"] = 1;
                            values[valuesById[2] = "POS_NEG"] = 2;
                            return values;
                        })();

                        return Tracking;
                    })();

                    return SearchRequest;
                })();

                v1.Token = (function() {

                    /**
                     * Properties of a Token.
                     * @memberof sajari.api.pipeline.v1
                     * @interface IToken
                     * @property {sajari.api.pipeline.v1.Token.IClick|null} [click] Token click
                     * @property {sajari.api.pipeline.v1.Token.IPosNeg|null} [posNeg] Token posNeg
                     */

                    /**
                     * Constructs a new Token.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a Token.
                     * @implements IToken
                     * @constructor
                     * @param {sajari.api.pipeline.v1.IToken=} [properties] Properties to set
                     */
                    function Token(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Token click.
                     * @member {sajari.api.pipeline.v1.Token.IClick|null|undefined} click
                     * @memberof sajari.api.pipeline.v1.Token
                     * @instance
                     */
                    Token.prototype.click = null;

                    /**
                     * Token posNeg.
                     * @member {sajari.api.pipeline.v1.Token.IPosNeg|null|undefined} posNeg
                     * @memberof sajari.api.pipeline.v1.Token
                     * @instance
                     */
                    Token.prototype.posNeg = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Token token.
                     * @member {"click"|"posNeg"|undefined} token
                     * @memberof sajari.api.pipeline.v1.Token
                     * @instance
                     */
                    Object.defineProperty(Token.prototype, "token", {
                        get: $util.oneOfGetter($oneOfFields = ["click", "posNeg"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new Token instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {sajari.api.pipeline.v1.IToken=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.Token} Token instance
                     */
                    Token.create = function create(properties) {
                        return new Token(properties);
                    };

                    /**
                     * Encodes the specified Token message. Does not implicitly {@link sajari.api.pipeline.v1.Token.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {sajari.api.pipeline.v1.IToken} message Token message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Token.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.click != null && message.hasOwnProperty("click"))
                            $root.sajari.api.pipeline.v1.Token.Click.encode(message.click, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.posNeg != null && message.hasOwnProperty("posNeg"))
                            $root.sajari.api.pipeline.v1.Token.PosNeg.encode(message.posNeg, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Token message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.Token.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {sajari.api.pipeline.v1.IToken} message Token message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Token.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Token message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.Token} Token
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Token.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.Token();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.click = $root.sajari.api.pipeline.v1.Token.Click.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.posNeg = $root.sajari.api.pipeline.v1.Token.PosNeg.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Token message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.Token} Token
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Token.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Token message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Token.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.click != null && message.hasOwnProperty("click")) {
                            properties.token = 1;
                            {
                                var error = $root.sajari.api.pipeline.v1.Token.Click.verify(message.click);
                                if (error)
                                    return "click." + error;
                            }
                        }
                        if (message.posNeg != null && message.hasOwnProperty("posNeg")) {
                            if (properties.token === 1)
                                return "token: multiple values";
                            properties.token = 1;
                            {
                                var error = $root.sajari.api.pipeline.v1.Token.PosNeg.verify(message.posNeg);
                                if (error)
                                    return "posNeg." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Token message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.Token} Token
                     */
                    Token.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.Token)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.Token();
                        if (object.click != null) {
                            if (typeof object.click !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.Token.click: object expected");
                            message.click = $root.sajari.api.pipeline.v1.Token.Click.fromObject(object.click);
                        }
                        if (object.posNeg != null) {
                            if (typeof object.posNeg !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.Token.posNeg: object expected");
                            message.posNeg = $root.sajari.api.pipeline.v1.Token.PosNeg.fromObject(object.posNeg);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Token message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.Token
                     * @static
                     * @param {sajari.api.pipeline.v1.Token} message Token
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Token.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.click != null && message.hasOwnProperty("click")) {
                            object.click = $root.sajari.api.pipeline.v1.Token.Click.toObject(message.click, options);
                            if (options.oneofs)
                                object.token = "click";
                        }
                        if (message.posNeg != null && message.hasOwnProperty("posNeg")) {
                            object.posNeg = $root.sajari.api.pipeline.v1.Token.PosNeg.toObject(message.posNeg, options);
                            if (options.oneofs)
                                object.token = "posNeg";
                        }
                        return object;
                    };

                    /**
                     * Converts this Token to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.Token
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Token.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Token.Click = (function() {

                        /**
                         * Properties of a Click.
                         * @memberof sajari.api.pipeline.v1.Token
                         * @interface IClick
                         * @property {string|null} [token] Click token
                         */

                        /**
                         * Constructs a new Click.
                         * @memberof sajari.api.pipeline.v1.Token
                         * @classdesc Represents a Click.
                         * @implements IClick
                         * @constructor
                         * @param {sajari.api.pipeline.v1.Token.IClick=} [properties] Properties to set
                         */
                        function Click(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Click token.
                         * @member {string} token
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @instance
                         */
                        Click.prototype.token = "";

                        /**
                         * Creates a new Click instance using the specified properties.
                         * @function create
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IClick=} [properties] Properties to set
                         * @returns {sajari.api.pipeline.v1.Token.Click} Click instance
                         */
                        Click.create = function create(properties) {
                            return new Click(properties);
                        };

                        /**
                         * Encodes the specified Click message. Does not implicitly {@link sajari.api.pipeline.v1.Token.Click.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IClick} message Click message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Click.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.token != null && message.hasOwnProperty("token"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.token);
                            return writer;
                        };

                        /**
                         * Encodes the specified Click message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.Token.Click.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IClick} message Click message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Click.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Click message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.api.pipeline.v1.Token.Click} Click
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Click.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.Token.Click();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.token = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Click message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.api.pipeline.v1.Token.Click} Click
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Click.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Click message.
                         * @function verify
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Click.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.token != null && message.hasOwnProperty("token"))
                                if (!$util.isString(message.token))
                                    return "token: string expected";
                            return null;
                        };

                        /**
                         * Creates a Click message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.api.pipeline.v1.Token.Click} Click
                         */
                        Click.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.api.pipeline.v1.Token.Click)
                                return object;
                            var message = new $root.sajari.api.pipeline.v1.Token.Click();
                            if (object.token != null)
                                message.token = String(object.token);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Click message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.Click} message Click
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Click.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.token = "";
                            if (message.token != null && message.hasOwnProperty("token"))
                                object.token = message.token;
                            return object;
                        };

                        /**
                         * Converts this Click to JSON.
                         * @function toJSON
                         * @memberof sajari.api.pipeline.v1.Token.Click
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Click.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Click;
                    })();

                    Token.PosNeg = (function() {

                        /**
                         * Properties of a PosNeg.
                         * @memberof sajari.api.pipeline.v1.Token
                         * @interface IPosNeg
                         * @property {string|null} [pos] PosNeg pos
                         * @property {string|null} [neg] PosNeg neg
                         */

                        /**
                         * Constructs a new PosNeg.
                         * @memberof sajari.api.pipeline.v1.Token
                         * @classdesc Represents a PosNeg.
                         * @implements IPosNeg
                         * @constructor
                         * @param {sajari.api.pipeline.v1.Token.IPosNeg=} [properties] Properties to set
                         */
                        function PosNeg(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PosNeg pos.
                         * @member {string} pos
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @instance
                         */
                        PosNeg.prototype.pos = "";

                        /**
                         * PosNeg neg.
                         * @member {string} neg
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @instance
                         */
                        PosNeg.prototype.neg = "";

                        /**
                         * Creates a new PosNeg instance using the specified properties.
                         * @function create
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IPosNeg=} [properties] Properties to set
                         * @returns {sajari.api.pipeline.v1.Token.PosNeg} PosNeg instance
                         */
                        PosNeg.create = function create(properties) {
                            return new PosNeg(properties);
                        };

                        /**
                         * Encodes the specified PosNeg message. Does not implicitly {@link sajari.api.pipeline.v1.Token.PosNeg.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IPosNeg} message PosNeg message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PosNeg.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pos);
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.neg);
                            return writer;
                        };

                        /**
                         * Encodes the specified PosNeg message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.Token.PosNeg.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.IPosNeg} message PosNeg message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PosNeg.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PosNeg message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.api.pipeline.v1.Token.PosNeg} PosNeg
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PosNeg.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.Token.PosNeg();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.pos = reader.string();
                                    break;
                                case 2:
                                    message.neg = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PosNeg message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.api.pipeline.v1.Token.PosNeg} PosNeg
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PosNeg.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PosNeg message.
                         * @function verify
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PosNeg.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                if (!$util.isString(message.pos))
                                    return "pos: string expected";
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                if (!$util.isString(message.neg))
                                    return "neg: string expected";
                            return null;
                        };

                        /**
                         * Creates a PosNeg message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.api.pipeline.v1.Token.PosNeg} PosNeg
                         */
                        PosNeg.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.api.pipeline.v1.Token.PosNeg)
                                return object;
                            var message = new $root.sajari.api.pipeline.v1.Token.PosNeg();
                            if (object.pos != null)
                                message.pos = String(object.pos);
                            if (object.neg != null)
                                message.neg = String(object.neg);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PosNeg message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @static
                         * @param {sajari.api.pipeline.v1.Token.PosNeg} message PosNeg
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PosNeg.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.pos = "";
                                object.neg = "";
                            }
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                object.pos = message.pos;
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                object.neg = message.neg;
                            return object;
                        };

                        /**
                         * Converts this PosNeg to JSON.
                         * @function toJSON
                         * @memberof sajari.api.pipeline.v1.Token.PosNeg
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PosNeg.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return PosNeg;
                    })();

                    return Token;
                })();

                v1.SearchResponse = (function() {

                    /**
                     * Properties of a SearchResponse.
                     * @memberof sajari.api.pipeline.v1
                     * @interface ISearchResponse
                     * @property {Object.<string,string>|null} [values] SearchResponse values
                     * @property {sajari.api.pipeline.v1.SearchResponse.ISearchResponse|null} [searchResponse] SearchResponse searchResponse
                     * @property {Array.<sajari.api.pipeline.v1.IToken>|null} [tokens] SearchResponse tokens
                     */

                    /**
                     * Constructs a new SearchResponse.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a SearchResponse.
                     * @implements ISearchResponse
                     * @constructor
                     * @param {sajari.api.pipeline.v1.ISearchResponse=} [properties] Properties to set
                     */
                    function SearchResponse(properties) {
                        this.values = {};
                        this.tokens = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SearchResponse values.
                     * @member {Object.<string,string>} values
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.values = $util.emptyObject;

                    /**
                     * SearchResponse searchResponse.
                     * @member {sajari.api.pipeline.v1.SearchResponse.ISearchResponse|null|undefined} searchResponse
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.searchResponse = null;

                    /**
                     * SearchResponse tokens.
                     * @member {Array.<sajari.api.pipeline.v1.IToken>} tokens
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.tokens = $util.emptyArray;

                    /**
                     * Creates a new SearchResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchResponse=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.SearchResponse} SearchResponse instance
                     */
                    SearchResponse.create = function create(properties) {
                        return new SearchResponse(properties);
                    };

                    /**
                     * Encodes the specified SearchResponse message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchResponse} message SearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.values != null && message.hasOwnProperty("values"))
                            for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.values[keys[i]]).ldelim();
                        if (message.searchResponse != null && message.hasOwnProperty("searchResponse"))
                            $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.encode(message.searchResponse, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.tokens != null && message.tokens.length)
                            for (var i = 0; i < message.tokens.length; ++i)
                                $root.sajari.api.pipeline.v1.Token.encode(message.tokens[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SearchResponse message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.ISearchResponse} message SearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SearchResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.SearchResponse} SearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                reader.skip().pos++;
                                if (message.values === $util.emptyObject)
                                    message.values = {};
                                key = reader.string();
                                reader.pos++;
                                message.values[key] = reader.string();
                                break;
                            case 2:
                                message.searchResponse = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                if (!(message.tokens && message.tokens.length))
                                    message.tokens = [];
                                message.tokens.push($root.sajari.api.pipeline.v1.Token.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SearchResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.SearchResponse} SearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SearchResponse message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!$util.isObject(message.values))
                                return "values: object expected";
                            var key = Object.keys(message.values);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.values[key[i]]))
                                    return "values: string{k:string} expected";
                        }
                        if (message.searchResponse != null && message.hasOwnProperty("searchResponse")) {
                            var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.verify(message.searchResponse);
                            if (error)
                                return "searchResponse." + error;
                        }
                        if (message.tokens != null && message.hasOwnProperty("tokens")) {
                            if (!Array.isArray(message.tokens))
                                return "tokens: array expected";
                            for (var i = 0; i < message.tokens.length; ++i) {
                                var error = $root.sajari.api.pipeline.v1.Token.verify(message.tokens[i]);
                                if (error)
                                    return "tokens." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SearchResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.SearchResponse} SearchResponse
                     */
                    SearchResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.SearchResponse();
                        if (object.values) {
                            if (typeof object.values !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.SearchResponse.values: object expected");
                            message.values = {};
                            for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i)
                                message.values[keys[i]] = String(object.values[keys[i]]);
                        }
                        if (object.searchResponse != null) {
                            if (typeof object.searchResponse !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.SearchResponse.searchResponse: object expected");
                            message.searchResponse = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.fromObject(object.searchResponse);
                        }
                        if (object.tokens) {
                            if (!Array.isArray(object.tokens))
                                throw TypeError(".sajari.api.pipeline.v1.SearchResponse.tokens: array expected");
                            message.tokens = [];
                            for (var i = 0; i < object.tokens.length; ++i) {
                                if (typeof object.tokens[i] !== "object")
                                    throw TypeError(".sajari.api.pipeline.v1.SearchResponse.tokens: object expected");
                                message.tokens[i] = $root.sajari.api.pipeline.v1.Token.fromObject(object.tokens[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SearchResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.SearchResponse} message SearchResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.tokens = [];
                        if (options.objects || options.defaults)
                            object.values = {};
                        if (options.defaults)
                            object.searchResponse = null;
                        var keys2;
                        if (message.values && (keys2 = Object.keys(message.values)).length) {
                            object.values = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.values[keys2[j]] = message.values[keys2[j]];
                        }
                        if (message.searchResponse != null && message.hasOwnProperty("searchResponse"))
                            object.searchResponse = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.toObject(message.searchResponse, options);
                        if (message.tokens && message.tokens.length) {
                            object.tokens = [];
                            for (var j = 0; j < message.tokens.length; ++j)
                                object.tokens[j] = $root.sajari.api.pipeline.v1.Token.toObject(message.tokens[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this SearchResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.SearchResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    SearchResponse.SearchResponse = (function() {

                        /**
                         * Properties of a SearchResponse.
                         * @memberof sajari.api.pipeline.v1.SearchResponse
                         * @interface ISearchResponse
                         * @property {number|Long|null} [reads] SearchResponse reads
                         * @property {number|Long|null} [totalResults] SearchResponse totalResults
                         * @property {string|null} [time] SearchResponse time
                         * @property {Object.<string,sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse>|null} [aggregates] SearchResponse aggregates
                         * @property {Array.<sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult>|null} [results] SearchResponse results
                         */

                        /**
                         * Constructs a new SearchResponse.
                         * @memberof sajari.api.pipeline.v1.SearchResponse
                         * @classdesc Represents a SearchResponse.
                         * @implements ISearchResponse
                         * @constructor
                         * @param {sajari.api.pipeline.v1.SearchResponse.ISearchResponse=} [properties] Properties to set
                         */
                        function SearchResponse(properties) {
                            this.aggregates = {};
                            this.results = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * SearchResponse reads.
                         * @member {number|Long} reads
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         */
                        SearchResponse.prototype.reads = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * SearchResponse totalResults.
                         * @member {number|Long} totalResults
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         */
                        SearchResponse.prototype.totalResults = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * SearchResponse time.
                         * @member {string} time
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         */
                        SearchResponse.prototype.time = "";

                        /**
                         * SearchResponse aggregates.
                         * @member {Object.<string,sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse>} aggregates
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         */
                        SearchResponse.prototype.aggregates = $util.emptyObject;

                        /**
                         * SearchResponse results.
                         * @member {Array.<sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult>} results
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         */
                        SearchResponse.prototype.results = $util.emptyArray;

                        /**
                         * Creates a new SearchResponse instance using the specified properties.
                         * @function create
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchResponse.ISearchResponse=} [properties] Properties to set
                         * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse} SearchResponse instance
                         */
                        SearchResponse.create = function create(properties) {
                            return new SearchResponse(properties);
                        };

                        /**
                         * Encodes the specified SearchResponse message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchResponse.ISearchResponse} message SearchResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.reads != null && message.hasOwnProperty("reads"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.reads);
                            if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.totalResults);
                            if (message.time != null && message.hasOwnProperty("time"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.time);
                            if (message.aggregates != null && message.hasOwnProperty("aggregates"))
                                for (var keys = Object.keys(message.aggregates), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.encode(message.aggregates[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            if (message.results != null && message.results.length)
                                for (var i = 0; i < message.results.length; ++i)
                                    $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.encode(message.results[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified SearchResponse message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchResponse.ISearchResponse} message SearchResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SearchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a SearchResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse} SearchResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.reads = reader.int64();
                                    break;
                                case 2:
                                    message.totalResults = reader.int64();
                                    break;
                                case 3:
                                    message.time = reader.string();
                                    break;
                                case 4:
                                    reader.skip().pos++;
                                    if (message.aggregates === $util.emptyObject)
                                        message.aggregates = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.aggregates[key] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    if (!(message.results && message.results.length))
                                        message.results = [];
                                    message.results.push($root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a SearchResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse} SearchResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SearchResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a SearchResponse message.
                         * @function verify
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SearchResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.reads != null && message.hasOwnProperty("reads"))
                                if (!$util.isInteger(message.reads) && !(message.reads && $util.isInteger(message.reads.low) && $util.isInteger(message.reads.high)))
                                    return "reads: integer|Long expected";
                            if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                                if (!$util.isInteger(message.totalResults) && !(message.totalResults && $util.isInteger(message.totalResults.low) && $util.isInteger(message.totalResults.high)))
                                    return "totalResults: integer|Long expected";
                            if (message.time != null && message.hasOwnProperty("time"))
                                if (!$util.isString(message.time))
                                    return "time: string expected";
                            if (message.aggregates != null && message.hasOwnProperty("aggregates")) {
                                if (!$util.isObject(message.aggregates))
                                    return "aggregates: object expected";
                                var key = Object.keys(message.aggregates);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.verify(message.aggregates[key[i]]);
                                    if (error)
                                        return "aggregates." + error;
                                }
                            }
                            if (message.results != null && message.hasOwnProperty("results")) {
                                if (!Array.isArray(message.results))
                                    return "results: array expected";
                                for (var i = 0; i < message.results.length; ++i) {
                                    var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.verify(message.results[i]);
                                    if (error)
                                        return "results." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a SearchResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse} SearchResponse
                         */
                        SearchResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse)
                                return object;
                            var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse();
                            if (object.reads != null)
                                if ($util.Long)
                                    (message.reads = $util.Long.fromValue(object.reads)).unsigned = false;
                                else if (typeof object.reads === "string")
                                    message.reads = parseInt(object.reads, 10);
                                else if (typeof object.reads === "number")
                                    message.reads = object.reads;
                                else if (typeof object.reads === "object")
                                    message.reads = new $util.LongBits(object.reads.low >>> 0, object.reads.high >>> 0).toNumber();
                            if (object.totalResults != null)
                                if ($util.Long)
                                    (message.totalResults = $util.Long.fromValue(object.totalResults)).unsigned = false;
                                else if (typeof object.totalResults === "string")
                                    message.totalResults = parseInt(object.totalResults, 10);
                                else if (typeof object.totalResults === "number")
                                    message.totalResults = object.totalResults;
                                else if (typeof object.totalResults === "object")
                                    message.totalResults = new $util.LongBits(object.totalResults.low >>> 0, object.totalResults.high >>> 0).toNumber();
                            if (object.time != null)
                                message.time = String(object.time);
                            if (object.aggregates) {
                                if (typeof object.aggregates !== "object")
                                    throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.aggregates: object expected");
                                message.aggregates = {};
                                for (var keys = Object.keys(object.aggregates), i = 0; i < keys.length; ++i) {
                                    if (typeof object.aggregates[keys[i]] !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.aggregates: object expected");
                                    message.aggregates[keys[i]] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.fromObject(object.aggregates[keys[i]]);
                                }
                            }
                            if (object.results) {
                                if (!Array.isArray(object.results))
                                    throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.results: array expected");
                                message.results = [];
                                for (var i = 0; i < object.results.length; ++i) {
                                    if (typeof object.results[i] !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.results: object expected");
                                    message.results[i] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.fromObject(object.results[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a SearchResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @static
                         * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse} message SearchResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SearchResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.results = [];
                            if (options.objects || options.defaults)
                                object.aggregates = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.reads = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.reads = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.totalResults = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.totalResults = options.longs === String ? "0" : 0;
                                object.time = "";
                            }
                            if (message.reads != null && message.hasOwnProperty("reads"))
                                if (typeof message.reads === "number")
                                    object.reads = options.longs === String ? String(message.reads) : message.reads;
                                else
                                    object.reads = options.longs === String ? $util.Long.prototype.toString.call(message.reads) : options.longs === Number ? new $util.LongBits(message.reads.low >>> 0, message.reads.high >>> 0).toNumber() : message.reads;
                            if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                                if (typeof message.totalResults === "number")
                                    object.totalResults = options.longs === String ? String(message.totalResults) : message.totalResults;
                                else
                                    object.totalResults = options.longs === String ? $util.Long.prototype.toString.call(message.totalResults) : options.longs === Number ? new $util.LongBits(message.totalResults.low >>> 0, message.totalResults.high >>> 0).toNumber() : message.totalResults;
                            if (message.time != null && message.hasOwnProperty("time"))
                                object.time = message.time;
                            var keys2;
                            if (message.aggregates && (keys2 = Object.keys(message.aggregates)).length) {
                                object.aggregates = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.aggregates[keys2[j]] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.toObject(message.aggregates[keys2[j]], options);
                            }
                            if (message.results && message.results.length) {
                                object.results = [];
                                for (var j = 0; j < message.results.length; ++j)
                                    object.results[j] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.toObject(message.results[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this SearchResponse to JSON.
                         * @function toJSON
                         * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SearchResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        SearchResponse.AggregateResponse = (function() {

                            /**
                             * Properties of an AggregateResponse.
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                             * @interface IAggregateResponse
                             * @property {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric|null} [metric] AggregateResponse metric
                             * @property {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount|null} [count] AggregateResponse count
                             * @property {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets|null} [buckets] AggregateResponse buckets
                             */

                            /**
                             * Constructs a new AggregateResponse.
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                             * @classdesc Represents an AggregateResponse.
                             * @implements IAggregateResponse
                             * @constructor
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse=} [properties] Properties to set
                             */
                            function AggregateResponse(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * AggregateResponse metric.
                             * @member {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric|null|undefined} metric
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @instance
                             */
                            AggregateResponse.prototype.metric = null;

                            /**
                             * AggregateResponse count.
                             * @member {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount|null|undefined} count
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @instance
                             */
                            AggregateResponse.prototype.count = null;

                            /**
                             * AggregateResponse buckets.
                             * @member {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets|null|undefined} buckets
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @instance
                             */
                            AggregateResponse.prototype.buckets = null;

                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;

                            /**
                             * AggregateResponse aggregateResponse.
                             * @member {"metric"|"count"|"buckets"|undefined} aggregateResponse
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @instance
                             */
                            Object.defineProperty(AggregateResponse.prototype, "aggregateResponse", {
                                get: $util.oneOfGetter($oneOfFields = ["metric", "count", "buckets"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });

                            /**
                             * Creates a new AggregateResponse instance using the specified properties.
                             * @function create
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse=} [properties] Properties to set
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse} AggregateResponse instance
                             */
                            AggregateResponse.create = function create(properties) {
                                return new AggregateResponse(properties);
                            };

                            /**
                             * Encodes the specified AggregateResponse message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse} message AggregateResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AggregateResponse.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.metric != null && message.hasOwnProperty("metric"))
                                    $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.encode(message.metric, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.count != null && message.hasOwnProperty("count"))
                                    $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.encode(message.count, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.buckets != null && message.hasOwnProperty("buckets"))
                                    $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.encode(message.buckets, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified AggregateResponse message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IAggregateResponse} message AggregateResponse message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AggregateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes an AggregateResponse message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse} AggregateResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AggregateResponse.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.metric = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.count = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.buckets = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes an AggregateResponse message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse} AggregateResponse
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AggregateResponse.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies an AggregateResponse message.
                             * @function verify
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AggregateResponse.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.metric != null && message.hasOwnProperty("metric")) {
                                    properties.aggregateResponse = 1;
                                    {
                                        var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.verify(message.metric);
                                        if (error)
                                            return "metric." + error;
                                    }
                                }
                                if (message.count != null && message.hasOwnProperty("count")) {
                                    if (properties.aggregateResponse === 1)
                                        return "aggregateResponse: multiple values";
                                    properties.aggregateResponse = 1;
                                    {
                                        var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.verify(message.count);
                                        if (error)
                                            return "count." + error;
                                    }
                                }
                                if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                    if (properties.aggregateResponse === 1)
                                        return "aggregateResponse: multiple values";
                                    properties.aggregateResponse = 1;
                                    {
                                        var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.verify(message.buckets);
                                        if (error)
                                            return "buckets." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates an AggregateResponse message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse} AggregateResponse
                             */
                            AggregateResponse.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse)
                                    return object;
                                var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse();
                                if (object.metric != null) {
                                    if (typeof object.metric !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.metric: object expected");
                                    message.metric = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.fromObject(object.metric);
                                }
                                if (object.count != null) {
                                    if (typeof object.count !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.count: object expected");
                                    message.count = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.fromObject(object.count);
                                }
                                if (object.buckets != null) {
                                    if (typeof object.buckets !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.buckets: object expected");
                                    message.buckets = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.fromObject(object.buckets);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from an AggregateResponse message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse} message AggregateResponse
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AggregateResponse.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.metric != null && message.hasOwnProperty("metric")) {
                                    object.metric = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.toObject(message.metric, options);
                                    if (options.oneofs)
                                        object.aggregateResponse = "metric";
                                }
                                if (message.count != null && message.hasOwnProperty("count")) {
                                    object.count = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.toObject(message.count, options);
                                    if (options.oneofs)
                                        object.aggregateResponse = "count";
                                }
                                if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                    object.buckets = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.toObject(message.buckets, options);
                                    if (options.oneofs)
                                        object.aggregateResponse = "buckets";
                                }
                                return object;
                            };

                            /**
                             * Converts this AggregateResponse to JSON.
                             * @function toJSON
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AggregateResponse.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            AggregateResponse.Metric = (function() {

                                /**
                                 * Properties of a Metric.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @interface IMetric
                                 * @property {number|null} [value] Metric value
                                 */

                                /**
                                 * Constructs a new Metric.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @classdesc Represents a Metric.
                                 * @implements IMetric
                                 * @constructor
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric=} [properties] Properties to set
                                 */
                                function Metric(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Metric value.
                                 * @member {number} value
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @instance
                                 */
                                Metric.prototype.value = 0;

                                /**
                                 * Creates a new Metric instance using the specified properties.
                                 * @function create
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric=} [properties] Properties to set
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric} Metric instance
                                 */
                                Metric.create = function create(properties) {
                                    return new Metric(properties);
                                };

                                /**
                                 * Encodes the specified Metric message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.verify|verify} messages.
                                 * @function encode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric} message Metric message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Metric.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.value != null && message.hasOwnProperty("value"))
                                        writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Metric message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IMetric} message Metric message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Metric.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Metric message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric} Metric
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Metric.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.value = reader.double();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Metric message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric} Metric
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Metric.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Metric message.
                                 * @function verify
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Metric.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.value != null && message.hasOwnProperty("value"))
                                        if (typeof message.value !== "number")
                                            return "value: number expected";
                                    return null;
                                };

                                /**
                                 * Creates a Metric message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric} Metric
                                 */
                                Metric.fromObject = function fromObject(object) {
                                    if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric)
                                        return object;
                                    var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric();
                                    if (object.value != null)
                                        message.value = Number(object.value);
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Metric message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric} message Metric
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Metric.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.defaults)
                                        object.value = 0;
                                    if (message.value != null && message.hasOwnProperty("value"))
                                        object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                                    return object;
                                };

                                /**
                                 * Converts this Metric to JSON.
                                 * @function toJSON
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Metric
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Metric.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Metric;
                            })();

                            AggregateResponse.Count = (function() {

                                /**
                                 * Properties of a Count.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @interface ICount
                                 * @property {Object.<string,number>|null} [counts] Count counts
                                 */

                                /**
                                 * Constructs a new Count.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @classdesc Represents a Count.
                                 * @implements ICount
                                 * @constructor
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount=} [properties] Properties to set
                                 */
                                function Count(properties) {
                                    this.counts = {};
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Count counts.
                                 * @member {Object.<string,number>} counts
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @instance
                                 */
                                Count.prototype.counts = $util.emptyObject;

                                /**
                                 * Creates a new Count instance using the specified properties.
                                 * @function create
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount=} [properties] Properties to set
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count} Count instance
                                 */
                                Count.create = function create(properties) {
                                    return new Count(properties);
                                };

                                /**
                                 * Encodes the specified Count message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.verify|verify} messages.
                                 * @function encode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount} message Count message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Count.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.counts != null && message.hasOwnProperty("counts"))
                                        for (var keys = Object.keys(message.counts), i = 0; i < keys.length; ++i)
                                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.counts[keys[i]]).ldelim();
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Count message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.ICount} message Count message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Count.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Count message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count} Count
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Count.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count(), key;
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            reader.skip().pos++;
                                            if (message.counts === $util.emptyObject)
                                                message.counts = {};
                                            key = reader.string();
                                            reader.pos++;
                                            message.counts[key] = reader.int32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Count message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count} Count
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Count.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Count message.
                                 * @function verify
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Count.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.counts != null && message.hasOwnProperty("counts")) {
                                        if (!$util.isObject(message.counts))
                                            return "counts: object expected";
                                        var key = Object.keys(message.counts);
                                        for (var i = 0; i < key.length; ++i)
                                            if (!$util.isInteger(message.counts[key[i]]))
                                                return "counts: integer{k:string} expected";
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a Count message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count} Count
                                 */
                                Count.fromObject = function fromObject(object) {
                                    if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count)
                                        return object;
                                    var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count();
                                    if (object.counts) {
                                        if (typeof object.counts !== "object")
                                            throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count.counts: object expected");
                                        message.counts = {};
                                        for (var keys = Object.keys(object.counts), i = 0; i < keys.length; ++i)
                                            message.counts[keys[i]] = object.counts[keys[i]] | 0;
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Count message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count} message Count
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Count.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.objects || options.defaults)
                                        object.counts = {};
                                    var keys2;
                                    if (message.counts && (keys2 = Object.keys(message.counts)).length) {
                                        object.counts = {};
                                        for (var j = 0; j < keys2.length; ++j)
                                            object.counts[keys2[j]] = message.counts[keys2[j]];
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this Count to JSON.
                                 * @function toJSON
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Count
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Count.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                return Count;
                            })();

                            AggregateResponse.Buckets = (function() {

                                /**
                                 * Properties of a Buckets.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @interface IBuckets
                                 * @property {Object.<string,sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket>|null} [buckets] Buckets buckets
                                 */

                                /**
                                 * Constructs a new Buckets.
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse
                                 * @classdesc Represents a Buckets.
                                 * @implements IBuckets
                                 * @constructor
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets=} [properties] Properties to set
                                 */
                                function Buckets(properties) {
                                    this.buckets = {};
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Buckets buckets.
                                 * @member {Object.<string,sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket>} buckets
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @instance
                                 */
                                Buckets.prototype.buckets = $util.emptyObject;

                                /**
                                 * Creates a new Buckets instance using the specified properties.
                                 * @function create
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets=} [properties] Properties to set
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets} Buckets instance
                                 */
                                Buckets.create = function create(properties) {
                                    return new Buckets(properties);
                                };

                                /**
                                 * Encodes the specified Buckets message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.verify|verify} messages.
                                 * @function encode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets} message Buckets message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Buckets.encode = function encode(message, writer) {
                                    if (!writer)
                                        writer = $Writer.create();
                                    if (message.buckets != null && message.hasOwnProperty("buckets"))
                                        for (var keys = Object.keys(message.buckets), i = 0; i < keys.length; ++i) {
                                            writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                            $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.encode(message.buckets[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                        }
                                    return writer;
                                };

                                /**
                                 * Encodes the specified Buckets message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.verify|verify} messages.
                                 * @function encodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.IBuckets} message Buckets message or plain object to encode
                                 * @param {$protobuf.Writer} [writer] Writer to encode to
                                 * @returns {$protobuf.Writer} Writer
                                 */
                                Buckets.encodeDelimited = function encodeDelimited(message, writer) {
                                    return this.encode(message, writer).ldelim();
                                };

                                /**
                                 * Decodes a Buckets message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets} Buckets
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Buckets.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets(), key;
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            reader.skip().pos++;
                                            if (message.buckets === $util.emptyObject)
                                                message.buckets = {};
                                            key = reader.string();
                                            reader.pos++;
                                            message.buckets[key] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Decodes a Buckets message from the specified reader or buffer, length delimited.
                                 * @function decodeDelimited
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets} Buckets
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Buckets.decodeDelimited = function decodeDelimited(reader) {
                                    if (!(reader instanceof $Reader))
                                        reader = new $Reader(reader);
                                    return this.decode(reader, reader.uint32());
                                };

                                /**
                                 * Verifies a Buckets message.
                                 * @function verify
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {Object.<string,*>} message Plain object to verify
                                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                 */
                                Buckets.verify = function verify(message) {
                                    if (typeof message !== "object" || message === null)
                                        return "object expected";
                                    if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                        if (!$util.isObject(message.buckets))
                                            return "buckets: object expected";
                                        var key = Object.keys(message.buckets);
                                        for (var i = 0; i < key.length; ++i) {
                                            var error = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.verify(message.buckets[key[i]]);
                                            if (error)
                                                return "buckets." + error;
                                        }
                                    }
                                    return null;
                                };

                                /**
                                 * Creates a Buckets message from a plain object. Also converts values to their respective internal types.
                                 * @function fromObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {Object.<string,*>} object Plain object
                                 * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets} Buckets
                                 */
                                Buckets.fromObject = function fromObject(object) {
                                    if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets)
                                        return object;
                                    var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets();
                                    if (object.buckets) {
                                        if (typeof object.buckets !== "object")
                                            throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.buckets: object expected");
                                        message.buckets = {};
                                        for (var keys = Object.keys(object.buckets), i = 0; i < keys.length; ++i) {
                                            if (typeof object.buckets[keys[i]] !== "object")
                                                throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.buckets: object expected");
                                            message.buckets[keys[i]] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.fromObject(object.buckets[keys[i]]);
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * Creates a plain object from a Buckets message. Also converts values to other types if specified.
                                 * @function toObject
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @static
                                 * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets} message Buckets
                                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                                 * @returns {Object.<string,*>} Plain object
                                 */
                                Buckets.toObject = function toObject(message, options) {
                                    if (!options)
                                        options = {};
                                    var object = {};
                                    if (options.objects || options.defaults)
                                        object.buckets = {};
                                    var keys2;
                                    if (message.buckets && (keys2 = Object.keys(message.buckets)).length) {
                                        object.buckets = {};
                                        for (var j = 0; j < keys2.length; ++j)
                                            object.buckets[keys2[j]] = $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.toObject(message.buckets[keys2[j]], options);
                                    }
                                    return object;
                                };

                                /**
                                 * Converts this Buckets to JSON.
                                 * @function toJSON
                                 * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                 * @instance
                                 * @returns {Object.<string,*>} JSON object
                                 */
                                Buckets.prototype.toJSON = function toJSON() {
                                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                };

                                Buckets.Bucket = (function() {

                                    /**
                                     * Properties of a Bucket.
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                     * @interface IBucket
                                     * @property {string|null} [name] Bucket name
                                     * @property {number|null} [count] Bucket count
                                     */

                                    /**
                                     * Constructs a new Bucket.
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets
                                     * @classdesc Represents a Bucket.
                                     * @implements IBucket
                                     * @constructor
                                     * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket=} [properties] Properties to set
                                     */
                                    function Bucket(properties) {
                                        if (properties)
                                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * Bucket name.
                                     * @member {string} name
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @instance
                                     */
                                    Bucket.prototype.name = "";

                                    /**
                                     * Bucket count.
                                     * @member {number} count
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @instance
                                     */
                                    Bucket.prototype.count = 0;

                                    /**
                                     * Creates a new Bucket instance using the specified properties.
                                     * @function create
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket=} [properties] Properties to set
                                     * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket} Bucket instance
                                     */
                                    Bucket.create = function create(properties) {
                                        return new Bucket(properties);
                                    };

                                    /**
                                     * Encodes the specified Bucket message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.verify|verify} messages.
                                     * @function encode
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket} message Bucket message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    Bucket.encode = function encode(message, writer) {
                                        if (!writer)
                                            writer = $Writer.create();
                                        if (message.name != null && message.hasOwnProperty("name"))
                                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                        if (message.count != null && message.hasOwnProperty("count"))
                                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                                        return writer;
                                    };

                                    /**
                                     * Encodes the specified Bucket message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket.verify|verify} messages.
                                     * @function encodeDelimited
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.IBucket} message Bucket message or plain object to encode
                                     * @param {$protobuf.Writer} [writer] Writer to encode to
                                     * @returns {$protobuf.Writer} Writer
                                     */
                                    Bucket.encodeDelimited = function encodeDelimited(message, writer) {
                                        return this.encode(message, writer).ldelim();
                                    };

                                    /**
                                     * Decodes a Bucket message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket} Bucket
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    Bucket.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket();
                                        while (reader.pos < end) {
                                            var tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1:
                                                message.name = reader.string();
                                                break;
                                            case 2:
                                                message.count = reader.int32();
                                                break;
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    /**
                                     * Decodes a Bucket message from the specified reader or buffer, length delimited.
                                     * @function decodeDelimited
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket} Bucket
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    Bucket.decodeDelimited = function decodeDelimited(reader) {
                                        if (!(reader instanceof $Reader))
                                            reader = new $Reader(reader);
                                        return this.decode(reader, reader.uint32());
                                    };

                                    /**
                                     * Verifies a Bucket message.
                                     * @function verify
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {Object.<string,*>} message Plain object to verify
                                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                                     */
                                    Bucket.verify = function verify(message) {
                                        if (typeof message !== "object" || message === null)
                                            return "object expected";
                                        if (message.name != null && message.hasOwnProperty("name"))
                                            if (!$util.isString(message.name))
                                                return "name: string expected";
                                        if (message.count != null && message.hasOwnProperty("count"))
                                            if (!$util.isInteger(message.count))
                                                return "count: integer expected";
                                        return null;
                                    };

                                    /**
                                     * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                                     * @function fromObject
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {Object.<string,*>} object Plain object
                                     * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket} Bucket
                                     */
                                    Bucket.fromObject = function fromObject(object) {
                                        if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket)
                                            return object;
                                        var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket();
                                        if (object.name != null)
                                            message.name = String(object.name);
                                        if (object.count != null)
                                            message.count = object.count | 0;
                                        return message;
                                    };

                                    /**
                                     * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                                     * @function toObject
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @static
                                     * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket} message Bucket
                                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                                     * @returns {Object.<string,*>} Plain object
                                     */
                                    Bucket.toObject = function toObject(message, options) {
                                        if (!options)
                                            options = {};
                                        var object = {};
                                        if (options.defaults) {
                                            object.name = "";
                                            object.count = 0;
                                        }
                                        if (message.name != null && message.hasOwnProperty("name"))
                                            object.name = message.name;
                                        if (message.count != null && message.hasOwnProperty("count"))
                                            object.count = message.count;
                                        return object;
                                    };

                                    /**
                                     * Converts this Bucket to JSON.
                                     * @function toJSON
                                     * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.AggregateResponse.Buckets.Bucket
                                     * @instance
                                     * @returns {Object.<string,*>} JSON object
                                     */
                                    Bucket.prototype.toJSON = function toJSON() {
                                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                                    };

                                    return Bucket;
                                })();

                                return Buckets;
                            })();

                            return AggregateResponse;
                        })();

                        SearchResponse.Result = (function() {

                            /**
                             * Properties of a Result.
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                             * @interface IResult
                             * @property {Object.<string,sajari.engine.IValue>|null} [values] Result values
                             * @property {number|null} [score] Result score
                             * @property {number|null} [indexScore] Result indexScore
                             */

                            /**
                             * Constructs a new Result.
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse
                             * @classdesc Represents a Result.
                             * @implements IResult
                             * @constructor
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult=} [properties] Properties to set
                             */
                            function Result(properties) {
                                this.values = {};
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Result values.
                             * @member {Object.<string,sajari.engine.IValue>} values
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @instance
                             */
                            Result.prototype.values = $util.emptyObject;

                            /**
                             * Result score.
                             * @member {number} score
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @instance
                             */
                            Result.prototype.score = 0;

                            /**
                             * Result indexScore.
                             * @member {number} indexScore
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @instance
                             */
                            Result.prototype.indexScore = 0;

                            /**
                             * Creates a new Result instance using the specified properties.
                             * @function create
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult=} [properties] Properties to set
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result} Result instance
                             */
                            Result.create = function create(properties) {
                                return new Result(properties);
                            };

                            /**
                             * Encodes the specified Result message. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult} message Result message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Result.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.values != null && message.hasOwnProperty("values"))
                                    for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i) {
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                        $root.sajari.engine.Value.encode(message.values[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                    }
                                if (message.score != null && message.hasOwnProperty("score"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.score);
                                if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.indexScore);
                                return writer;
                            };

                            /**
                             * Encodes the specified Result message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.IResult} message Result message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Result.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Result message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result} Result
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Result.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result(), key;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        reader.skip().pos++;
                                        if (message.values === $util.emptyObject)
                                            message.values = {};
                                        key = reader.string();
                                        reader.pos++;
                                        message.values[key] = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.score = reader.double();
                                        break;
                                    case 3:
                                        message.indexScore = reader.double();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Result message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result} Result
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Result.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Result message.
                             * @function verify
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Result.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.values != null && message.hasOwnProperty("values")) {
                                    if (!$util.isObject(message.values))
                                        return "values: object expected";
                                    var key = Object.keys(message.values);
                                    for (var i = 0; i < key.length; ++i) {
                                        var error = $root.sajari.engine.Value.verify(message.values[key[i]]);
                                        if (error)
                                            return "values." + error;
                                    }
                                }
                                if (message.score != null && message.hasOwnProperty("score"))
                                    if (typeof message.score !== "number")
                                        return "score: number expected";
                                if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                                    if (typeof message.indexScore !== "number")
                                        return "indexScore: number expected";
                                return null;
                            };

                            /**
                             * Creates a Result message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result} Result
                             */
                            Result.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result)
                                    return object;
                                var message = new $root.sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result();
                                if (object.values) {
                                    if (typeof object.values !== "object")
                                        throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.values: object expected");
                                    message.values = {};
                                    for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i) {
                                        if (typeof object.values[keys[i]] !== "object")
                                            throw TypeError(".sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result.values: object expected");
                                        message.values[keys[i]] = $root.sajari.engine.Value.fromObject(object.values[keys[i]]);
                                    }
                                }
                                if (object.score != null)
                                    message.score = Number(object.score);
                                if (object.indexScore != null)
                                    message.indexScore = Number(object.indexScore);
                                return message;
                            };

                            /**
                             * Creates a plain object from a Result message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @static
                             * @param {sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result} message Result
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Result.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.objects || options.defaults)
                                    object.values = {};
                                if (options.defaults) {
                                    object.score = 0;
                                    object.indexScore = 0;
                                }
                                var keys2;
                                if (message.values && (keys2 = Object.keys(message.values)).length) {
                                    object.values = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        object.values[keys2[j]] = $root.sajari.engine.Value.toObject(message.values[keys2[j]], options);
                                }
                                if (message.score != null && message.hasOwnProperty("score"))
                                    object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                                if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                                    object.indexScore = options.json && !isFinite(message.indexScore) ? String(message.indexScore) : message.indexScore;
                                return object;
                            };

                            /**
                             * Converts this Result to JSON.
                             * @function toJSON
                             * @memberof sajari.api.pipeline.v1.SearchResponse.SearchResponse.Result
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Result.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Result;
                        })();

                        return SearchResponse;
                    })();

                    return SearchResponse;
                })();

                v1.Store = (function() {

                    /**
                     * Constructs a new Store service.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents a Store
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Store(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Store.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Store;

                    /**
                     * Creates new Store service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.Store
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Store} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Store.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.api.pipeline.v1.Store#add}.
                     * @memberof sajari.api.pipeline.v1.Store
                     * @typedef AddCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.api.pipeline.v1.AddResponse} [response] AddResponse
                     */

                    /**
                     * Calls Add.
                     * @function add
                     * @memberof sajari.api.pipeline.v1.Store
                     * @instance
                     * @param {sajari.api.pipeline.v1.IAddRequest} request AddRequest message or plain object
                     * @param {sajari.api.pipeline.v1.Store.AddCallback} callback Node-style callback called with the error, if any, and AddResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype.add = function add(request, callback) {
                        return this.rpcCall(add, $root.sajari.api.pipeline.v1.AddRequest, $root.sajari.api.pipeline.v1.AddResponse, request, callback);
                    };

                    /**
                     * Calls Add.
                     * @function add
                     * @memberof sajari.api.pipeline.v1.Store
                     * @instance
                     * @param {sajari.api.pipeline.v1.IAddRequest} request AddRequest message or plain object
                     * @returns {Promise<sajari.api.pipeline.v1.AddResponse>} Promise
                     * @variation 2
                     */

                    return Store;
                })();

                v1.AddRequest = (function() {

                    /**
                     * Properties of an AddRequest.
                     * @memberof sajari.api.pipeline.v1
                     * @interface IAddRequest
                     * @property {sajari.api.pipeline.v1.IPipeline|null} [pipeline] AddRequest pipeline
                     * @property {Object.<string,string>|null} [values] AddRequest values
                     * @property {Array.<sajari.engine.store.record.IRecord>|null} [records] AddRequest records
                     */

                    /**
                     * Constructs a new AddRequest.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents an AddRequest.
                     * @implements IAddRequest
                     * @constructor
                     * @param {sajari.api.pipeline.v1.IAddRequest=} [properties] Properties to set
                     */
                    function AddRequest(properties) {
                        this.values = {};
                        this.records = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AddRequest pipeline.
                     * @member {sajari.api.pipeline.v1.IPipeline|null|undefined} pipeline
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @instance
                     */
                    AddRequest.prototype.pipeline = null;

                    /**
                     * AddRequest values.
                     * @member {Object.<string,string>} values
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @instance
                     */
                    AddRequest.prototype.values = $util.emptyObject;

                    /**
                     * AddRequest records.
                     * @member {Array.<sajari.engine.store.record.IRecord>} records
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @instance
                     */
                    AddRequest.prototype.records = $util.emptyArray;

                    /**
                     * Creates a new AddRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddRequest=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.AddRequest} AddRequest instance
                     */
                    AddRequest.create = function create(properties) {
                        return new AddRequest(properties);
                    };

                    /**
                     * Encodes the specified AddRequest message. Does not implicitly {@link sajari.api.pipeline.v1.AddRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddRequest} message AddRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pipeline != null && message.hasOwnProperty("pipeline"))
                            $root.sajari.api.pipeline.v1.Pipeline.encode(message.pipeline, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.values != null && message.hasOwnProperty("values"))
                            for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.values[keys[i]]).ldelim();
                        if (message.records != null && message.records.length)
                            for (var i = 0; i < message.records.length; ++i)
                                $root.sajari.engine.store.record.Record.encode(message.records[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AddRequest message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.AddRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddRequest} message AddRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AddRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.AddRequest} AddRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.AddRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pipeline = $root.sajari.api.pipeline.v1.Pipeline.decode(reader, reader.uint32());
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.values === $util.emptyObject)
                                    message.values = {};
                                key = reader.string();
                                reader.pos++;
                                message.values[key] = reader.string();
                                break;
                            case 3:
                                if (!(message.records && message.records.length))
                                    message.records = [];
                                message.records.push($root.sajari.engine.store.record.Record.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AddRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.AddRequest} AddRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AddRequest message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AddRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pipeline != null && message.hasOwnProperty("pipeline")) {
                            var error = $root.sajari.api.pipeline.v1.Pipeline.verify(message.pipeline);
                            if (error)
                                return "pipeline." + error;
                        }
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!$util.isObject(message.values))
                                return "values: object expected";
                            var key = Object.keys(message.values);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.values[key[i]]))
                                    return "values: string{k:string} expected";
                        }
                        if (message.records != null && message.hasOwnProperty("records")) {
                            if (!Array.isArray(message.records))
                                return "records: array expected";
                            for (var i = 0; i < message.records.length; ++i) {
                                var error = $root.sajari.engine.store.record.Record.verify(message.records[i]);
                                if (error)
                                    return "records." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AddRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.AddRequest} AddRequest
                     */
                    AddRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.AddRequest)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.AddRequest();
                        if (object.pipeline != null) {
                            if (typeof object.pipeline !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.AddRequest.pipeline: object expected");
                            message.pipeline = $root.sajari.api.pipeline.v1.Pipeline.fromObject(object.pipeline);
                        }
                        if (object.values) {
                            if (typeof object.values !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.AddRequest.values: object expected");
                            message.values = {};
                            for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i)
                                message.values[keys[i]] = String(object.values[keys[i]]);
                        }
                        if (object.records) {
                            if (!Array.isArray(object.records))
                                throw TypeError(".sajari.api.pipeline.v1.AddRequest.records: array expected");
                            message.records = [];
                            for (var i = 0; i < object.records.length; ++i) {
                                if (typeof object.records[i] !== "object")
                                    throw TypeError(".sajari.api.pipeline.v1.AddRequest.records: object expected");
                                message.records[i] = $root.sajari.engine.store.record.Record.fromObject(object.records[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AddRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @static
                     * @param {sajari.api.pipeline.v1.AddRequest} message AddRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AddRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.records = [];
                        if (options.objects || options.defaults)
                            object.values = {};
                        if (options.defaults)
                            object.pipeline = null;
                        if (message.pipeline != null && message.hasOwnProperty("pipeline"))
                            object.pipeline = $root.sajari.api.pipeline.v1.Pipeline.toObject(message.pipeline, options);
                        var keys2;
                        if (message.values && (keys2 = Object.keys(message.values)).length) {
                            object.values = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.values[keys2[j]] = message.values[keys2[j]];
                        }
                        if (message.records && message.records.length) {
                            object.records = [];
                            for (var j = 0; j < message.records.length; ++j)
                                object.records[j] = $root.sajari.engine.store.record.Record.toObject(message.records[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this AddRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.AddRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AddRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AddRequest;
                })();

                v1.AddResponse = (function() {

                    /**
                     * Properties of an AddResponse.
                     * @memberof sajari.api.pipeline.v1
                     * @interface IAddResponse
                     * @property {sajari.engine.store.record.IAddResponse|null} [response] AddResponse response
                     */

                    /**
                     * Constructs a new AddResponse.
                     * @memberof sajari.api.pipeline.v1
                     * @classdesc Represents an AddResponse.
                     * @implements IAddResponse
                     * @constructor
                     * @param {sajari.api.pipeline.v1.IAddResponse=} [properties] Properties to set
                     */
                    function AddResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AddResponse response.
                     * @member {sajari.engine.store.record.IAddResponse|null|undefined} response
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @instance
                     */
                    AddResponse.prototype.response = null;

                    /**
                     * Creates a new AddResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddResponse=} [properties] Properties to set
                     * @returns {sajari.api.pipeline.v1.AddResponse} AddResponse instance
                     */
                    AddResponse.create = function create(properties) {
                        return new AddResponse(properties);
                    };

                    /**
                     * Encodes the specified AddResponse message. Does not implicitly {@link sajari.api.pipeline.v1.AddResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddResponse} message AddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.response != null && message.hasOwnProperty("response"))
                            $root.sajari.engine.store.record.AddResponse.encode(message.response, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AddResponse message, length delimited. Does not implicitly {@link sajari.api.pipeline.v1.AddResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.IAddResponse} message AddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AddResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.api.pipeline.v1.AddResponse} AddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.api.pipeline.v1.AddResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.response = $root.sajari.engine.store.record.AddResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AddResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.api.pipeline.v1.AddResponse} AddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AddResponse message.
                     * @function verify
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AddResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.response != null && message.hasOwnProperty("response")) {
                            var error = $root.sajari.engine.store.record.AddResponse.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an AddResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.api.pipeline.v1.AddResponse} AddResponse
                     */
                    AddResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.api.pipeline.v1.AddResponse)
                            return object;
                        var message = new $root.sajari.api.pipeline.v1.AddResponse();
                        if (object.response != null) {
                            if (typeof object.response !== "object")
                                throw TypeError(".sajari.api.pipeline.v1.AddResponse.response: object expected");
                            message.response = $root.sajari.engine.store.record.AddResponse.fromObject(object.response);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AddResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @static
                     * @param {sajari.api.pipeline.v1.AddResponse} message AddResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AddResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.response = null;
                        if (message.response != null && message.hasOwnProperty("response"))
                            object.response = $root.sajari.engine.store.record.AddResponse.toObject(message.response, options);
                        return object;
                    };

                    /**
                     * Converts this AddResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.api.pipeline.v1.AddResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AddResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AddResponse;
                })();

                return v1;
            })();

            return pipeline;
        })();

        return api;
    })();

    sajari.engine = (function() {

        /**
         * Namespace engine.
         * @memberof sajari
         * @namespace
         */
        var engine = {};

        engine.Value = (function() {

            /**
             * Properties of a Value.
             * @memberof sajari.engine
             * @interface IValue
             * @property {boolean|null} ["null"] Value null
             * @property {string|null} [single] Value single
             * @property {sajari.engine.Value.IRepeated|null} [repeated] Value repeated
             */

            /**
             * Constructs a new Value.
             * @memberof sajari.engine
             * @classdesc Represents a Value.
             * @implements IValue
             * @constructor
             * @param {sajari.engine.IValue=} [properties] Properties to set
             */
            function Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Value null.
             * @member {boolean} null
             * @memberof sajari.engine.Value
             * @instance
             */
            Value.prototype["null"] = false;

            /**
             * Value single.
             * @member {string} single
             * @memberof sajari.engine.Value
             * @instance
             */
            Value.prototype.single = "";

            /**
             * Value repeated.
             * @member {sajari.engine.Value.IRepeated|null|undefined} repeated
             * @memberof sajari.engine.Value
             * @instance
             */
            Value.prototype.repeated = null;

            // OneOf field names bound to virtual getters and setters
            var $oneOfFields;

            /**
             * Value value.
             * @member {"null"|"single"|"repeated"|undefined} value
             * @memberof sajari.engine.Value
             * @instance
             */
            Object.defineProperty(Value.prototype, "value", {
                get: $util.oneOfGetter($oneOfFields = ["null", "single", "repeated"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Value instance using the specified properties.
             * @function create
             * @memberof sajari.engine.Value
             * @static
             * @param {sajari.engine.IValue=} [properties] Properties to set
             * @returns {sajari.engine.Value} Value instance
             */
            Value.create = function create(properties) {
                return new Value(properties);
            };

            /**
             * Encodes the specified Value message. Does not implicitly {@link sajari.engine.Value.verify|verify} messages.
             * @function encode
             * @memberof sajari.engine.Value
             * @static
             * @param {sajari.engine.IValue} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["null"] != null && message.hasOwnProperty("null"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message["null"]);
                if (message.single != null && message.hasOwnProperty("single"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.single);
                if (message.repeated != null && message.hasOwnProperty("repeated"))
                    $root.sajari.engine.Value.Repeated.encode(message.repeated, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Value message, length delimited. Does not implicitly {@link sajari.engine.Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sajari.engine.Value
             * @static
             * @param {sajari.engine.IValue} message Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Value message from the specified reader or buffer.
             * @function decode
             * @memberof sajari.engine.Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sajari.engine.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message["null"] = reader.bool();
                        break;
                    case 2:
                        message.single = reader.string();
                        break;
                    case 3:
                        message.repeated = $root.sajari.engine.Value.Repeated.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sajari.engine.Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sajari.engine.Value} Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Value message.
             * @function verify
             * @memberof sajari.engine.Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message["null"] != null && message.hasOwnProperty("null")) {
                    properties.value = 1;
                    if (typeof message["null"] !== "boolean")
                        return "null: boolean expected";
                }
                if (message.single != null && message.hasOwnProperty("single")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    if (!$util.isString(message.single))
                        return "single: string expected";
                }
                if (message.repeated != null && message.hasOwnProperty("repeated")) {
                    if (properties.value === 1)
                        return "value: multiple values";
                    properties.value = 1;
                    {
                        var error = $root.sajari.engine.Value.Repeated.verify(message.repeated);
                        if (error)
                            return "repeated." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sajari.engine.Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sajari.engine.Value} Value
             */
            Value.fromObject = function fromObject(object) {
                if (object instanceof $root.sajari.engine.Value)
                    return object;
                var message = new $root.sajari.engine.Value();
                if (object["null"] != null)
                    message["null"] = Boolean(object["null"]);
                if (object.single != null)
                    message.single = String(object.single);
                if (object.repeated != null) {
                    if (typeof object.repeated !== "object")
                        throw TypeError(".sajari.engine.Value.repeated: object expected");
                    message.repeated = $root.sajari.engine.Value.Repeated.fromObject(object.repeated);
                }
                return message;
            };

            /**
             * Creates a plain object from a Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sajari.engine.Value
             * @static
             * @param {sajari.engine.Value} message Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message["null"] != null && message.hasOwnProperty("null")) {
                    object["null"] = message["null"];
                    if (options.oneofs)
                        object.value = "null";
                }
                if (message.single != null && message.hasOwnProperty("single")) {
                    object.single = message.single;
                    if (options.oneofs)
                        object.value = "single";
                }
                if (message.repeated != null && message.hasOwnProperty("repeated")) {
                    object.repeated = $root.sajari.engine.Value.Repeated.toObject(message.repeated, options);
                    if (options.oneofs)
                        object.value = "repeated";
                }
                return object;
            };

            /**
             * Converts this Value to JSON.
             * @function toJSON
             * @memberof sajari.engine.Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            Value.Repeated = (function() {

                /**
                 * Properties of a Repeated.
                 * @memberof sajari.engine.Value
                 * @interface IRepeated
                 * @property {Array.<string>|null} [values] Repeated values
                 */

                /**
                 * Constructs a new Repeated.
                 * @memberof sajari.engine.Value
                 * @classdesc Represents a Repeated.
                 * @implements IRepeated
                 * @constructor
                 * @param {sajari.engine.Value.IRepeated=} [properties] Properties to set
                 */
                function Repeated(properties) {
                    this.values = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Repeated values.
                 * @member {Array.<string>} values
                 * @memberof sajari.engine.Value.Repeated
                 * @instance
                 */
                Repeated.prototype.values = $util.emptyArray;

                /**
                 * Creates a new Repeated instance using the specified properties.
                 * @function create
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {sajari.engine.Value.IRepeated=} [properties] Properties to set
                 * @returns {sajari.engine.Value.Repeated} Repeated instance
                 */
                Repeated.create = function create(properties) {
                    return new Repeated(properties);
                };

                /**
                 * Encodes the specified Repeated message. Does not implicitly {@link sajari.engine.Value.Repeated.verify|verify} messages.
                 * @function encode
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {sajari.engine.Value.IRepeated} message Repeated message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Repeated.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.values != null && message.values.length)
                        for (var i = 0; i < message.values.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.values[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Repeated message, length delimited. Does not implicitly {@link sajari.engine.Value.Repeated.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {sajari.engine.Value.IRepeated} message Repeated message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Repeated.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Repeated message from the specified reader or buffer.
                 * @function decode
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sajari.engine.Value.Repeated} Repeated
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Repeated.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.Value.Repeated();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.values && message.values.length))
                                message.values = [];
                            message.values.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Repeated message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sajari.engine.Value.Repeated} Repeated
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Repeated.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Repeated message.
                 * @function verify
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Repeated.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.values != null && message.hasOwnProperty("values")) {
                        if (!Array.isArray(message.values))
                            return "values: array expected";
                        for (var i = 0; i < message.values.length; ++i)
                            if (!$util.isString(message.values[i]))
                                return "values: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Repeated message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sajari.engine.Value.Repeated} Repeated
                 */
                Repeated.fromObject = function fromObject(object) {
                    if (object instanceof $root.sajari.engine.Value.Repeated)
                        return object;
                    var message = new $root.sajari.engine.Value.Repeated();
                    if (object.values) {
                        if (!Array.isArray(object.values))
                            throw TypeError(".sajari.engine.Value.Repeated.values: array expected");
                        message.values = [];
                        for (var i = 0; i < object.values.length; ++i)
                            message.values[i] = String(object.values[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Repeated message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sajari.engine.Value.Repeated
                 * @static
                 * @param {sajari.engine.Value.Repeated} message Repeated
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Repeated.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.values = [];
                    if (message.values && message.values.length) {
                        object.values = [];
                        for (var j = 0; j < message.values.length; ++j)
                            object.values[j] = message.values[j];
                    }
                    return object;
                };

                /**
                 * Converts this Repeated to JSON.
                 * @function toJSON
                 * @memberof sajari.engine.Value.Repeated
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Repeated.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Repeated;
            })();

            return Value;
        })();

        engine.store = (function() {

            /**
             * Namespace store.
             * @memberof sajari.engine
             * @namespace
             */
            var store = {};

            store.record = (function() {

                /**
                 * Namespace record.
                 * @memberof sajari.engine.store
                 * @namespace
                 */
                var record = {};

                record.Store = (function() {

                    /**
                     * Constructs a new Store service.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Store
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Store(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Store.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Store;

                    /**
                     * Creates new Store service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.engine.store.record.Store
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Store} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Store.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Store#add}.
                     * @memberof sajari.engine.store.record.Store
                     * @typedef AddCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.AddResponse} [response] AddResponse
                     */

                    /**
                     * Calls Add.
                     * @function add
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IRecords} request Records message or plain object
                     * @param {sajari.engine.store.record.Store.AddCallback} callback Node-style callback called with the error, if any, and AddResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype.add = function add(request, callback) {
                        return this.rpcCall(add, $root.sajari.engine.store.record.Records, $root.sajari.engine.store.record.AddResponse, request, callback);
                    };

                    /**
                     * Calls Add.
                     * @function add
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IRecords} request Records message or plain object
                     * @returns {Promise<sajari.engine.store.record.AddResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Store#get}.
                     * @memberof sajari.engine.store.record.Store
                     * @typedef GetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.GetResponse} [response] GetResponse
                     */

                    /**
                     * Calls Get.
                     * @function get
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @param {sajari.engine.store.record.Store.GetCallback} callback Node-style callback called with the error, if any, and GetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype.get = function get(request, callback) {
                        return this.rpcCall(get, $root.sajari.engine.store.record.Keys, $root.sajari.engine.store.record.GetResponse, request, callback);
                    };

                    /**
                     * Calls Get.
                     * @function get
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @returns {Promise<sajari.engine.store.record.GetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Store#delete_}.
                     * @memberof sajari.engine.store.record.Store
                     * @typedef DeleteCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.DeleteResponse} [response] DeleteResponse
                     */

                    /**
                     * Calls Delete.
                     * @function delete
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @param {sajari.engine.store.record.Store.DeleteCallback} callback Node-style callback called with the error, if any, and DeleteResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype["delete"] = function delete_(request, callback) {
                        return this.rpcCall(delete_, $root.sajari.engine.store.record.Keys, $root.sajari.engine.store.record.DeleteResponse, request, callback);
                    };

                    /**
                     * Calls Delete.
                     * @function delete
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @returns {Promise<sajari.engine.store.record.DeleteResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Store#mutate}.
                     * @memberof sajari.engine.store.record.Store
                     * @typedef MutateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.MutateResponse} [response] MutateResponse
                     */

                    /**
                     * Calls Mutate.
                     * @function mutate
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IMutateRequest} request MutateRequest message or plain object
                     * @param {sajari.engine.store.record.Store.MutateCallback} callback Node-style callback called with the error, if any, and MutateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype.mutate = function mutate(request, callback) {
                        return this.rpcCall(mutate, $root.sajari.engine.store.record.MutateRequest, $root.sajari.engine.store.record.MutateResponse, request, callback);
                    };

                    /**
                     * Calls Mutate.
                     * @function mutate
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IMutateRequest} request MutateRequest message or plain object
                     * @returns {Promise<sajari.engine.store.record.MutateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Store#exists}.
                     * @memberof sajari.engine.store.record.Store
                     * @typedef ExistsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.ExistsResponse} [response] ExistsResponse
                     */

                    /**
                     * Calls Exists.
                     * @function exists
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @param {sajari.engine.store.record.Store.ExistsCallback} callback Node-style callback called with the error, if any, and ExistsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Store.prototype.exists = function exists(request, callback) {
                        return this.rpcCall(exists, $root.sajari.engine.store.record.Keys, $root.sajari.engine.store.record.ExistsResponse, request, callback);
                    };

                    /**
                     * Calls Exists.
                     * @function exists
                     * @memberof sajari.engine.store.record.Store
                     * @instance
                     * @param {sajari.engine.store.record.IKeys} request Keys message or plain object
                     * @returns {Promise<sajari.engine.store.record.ExistsResponse>} Promise
                     * @variation 2
                     */

                    return Store;
                })();

                record.ExistsResponse = (function() {

                    /**
                     * Properties of an ExistsResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IExistsResponse
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] ExistsResponse status
                     */

                    /**
                     * Constructs a new ExistsResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents an ExistsResponse.
                     * @implements IExistsResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IExistsResponse=} [properties] Properties to set
                     */
                    function ExistsResponse(properties) {
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ExistsResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @instance
                     */
                    ExistsResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new ExistsResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {sajari.engine.store.record.IExistsResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.ExistsResponse} ExistsResponse instance
                     */
                    ExistsResponse.create = function create(properties) {
                        return new ExistsResponse(properties);
                    };

                    /**
                     * Encodes the specified ExistsResponse message. Does not implicitly {@link sajari.engine.store.record.ExistsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {sajari.engine.store.record.IExistsResponse} message ExistsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExistsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ExistsResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.ExistsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {sajari.engine.store.record.IExistsResponse} message ExistsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExistsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an ExistsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.ExistsResponse} ExistsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExistsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.ExistsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an ExistsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.ExistsResponse} ExistsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExistsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an ExistsResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExistsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an ExistsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.ExistsResponse} ExistsResponse
                     */
                    ExistsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.ExistsResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.ExistsResponse();
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.ExistsResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.ExistsResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an ExistsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @static
                     * @param {sajari.engine.store.record.ExistsResponse} message ExistsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExistsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.status = [];
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ExistsResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.ExistsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExistsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ExistsResponse;
                })();

                record.Score = (function() {

                    /**
                     * Constructs a new Score service.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Score
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Score(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Score.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Score;

                    /**
                     * Creates new Score service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.engine.store.record.Score
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Score} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Score.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Score#set}.
                     * @memberof sajari.engine.store.record.Score
                     * @typedef SetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.SetResponse} [response] SetResponse
                     */

                    /**
                     * Calls Set.
                     * @function set
                     * @memberof sajari.engine.store.record.Score
                     * @instance
                     * @param {sajari.engine.store.record.ISetRequest} request SetRequest message or plain object
                     * @param {sajari.engine.store.record.Score.SetCallback} callback Node-style callback called with the error, if any, and SetResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Score.prototype.set = function set(request, callback) {
                        return this.rpcCall(set, $root.sajari.engine.store.record.SetRequest, $root.sajari.engine.store.record.SetResponse, request, callback);
                    };

                    /**
                     * Calls Set.
                     * @function set
                     * @memberof sajari.engine.store.record.Score
                     * @instance
                     * @param {sajari.engine.store.record.ISetRequest} request SetRequest message or plain object
                     * @returns {Promise<sajari.engine.store.record.SetResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.store.record.Score#increment}.
                     * @memberof sajari.engine.store.record.Score
                     * @typedef IncrementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.record.IncrementResponse} [response] IncrementResponse
                     */

                    /**
                     * Calls Increment.
                     * @function increment
                     * @memberof sajari.engine.store.record.Score
                     * @instance
                     * @param {sajari.engine.store.record.IIncrementRequest} request IncrementRequest message or plain object
                     * @param {sajari.engine.store.record.Score.IncrementCallback} callback Node-style callback called with the error, if any, and IncrementResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Score.prototype.increment = function increment(request, callback) {
                        return this.rpcCall(increment, $root.sajari.engine.store.record.IncrementRequest, $root.sajari.engine.store.record.IncrementResponse, request, callback);
                    };

                    /**
                     * Calls Increment.
                     * @function increment
                     * @memberof sajari.engine.store.record.Score
                     * @instance
                     * @param {sajari.engine.store.record.IIncrementRequest} request IncrementRequest message or plain object
                     * @returns {Promise<sajari.engine.store.record.IncrementResponse>} Promise
                     * @variation 2
                     */

                    return Score;
                })();

                record.Transform = (function() {

                    /**
                     * Properties of a Transform.
                     * @memberof sajari.engine.store.record
                     * @interface ITransform
                     * @property {string|null} [identifier] Transform identifier
                     */

                    /**
                     * Constructs a new Transform.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Transform.
                     * @implements ITransform
                     * @constructor
                     * @param {sajari.engine.store.record.ITransform=} [properties] Properties to set
                     */
                    function Transform(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Transform identifier.
                     * @member {string} identifier
                     * @memberof sajari.engine.store.record.Transform
                     * @instance
                     */
                    Transform.prototype.identifier = "";

                    /**
                     * Creates a new Transform instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {sajari.engine.store.record.ITransform=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.Transform} Transform instance
                     */
                    Transform.create = function create(properties) {
                        return new Transform(properties);
                    };

                    /**
                     * Encodes the specified Transform message. Does not implicitly {@link sajari.engine.store.record.Transform.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {sajari.engine.store.record.ITransform} message Transform message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transform.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Transform message, length delimited. Does not implicitly {@link sajari.engine.store.record.Transform.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {sajari.engine.store.record.ITransform} message Transform message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transform.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Transform message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.Transform} Transform
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transform.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.Transform();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Transform message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.Transform} Transform
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transform.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Transform message.
                     * @function verify
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transform.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            if (!$util.isString(message.identifier))
                                return "identifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Transform message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.Transform} Transform
                     */
                    Transform.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.Transform)
                            return object;
                        var message = new $root.sajari.engine.store.record.Transform();
                        if (object.identifier != null)
                            message.identifier = String(object.identifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Transform message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.Transform
                     * @static
                     * @param {sajari.engine.store.record.Transform} message Transform
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transform.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.identifier = "";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            object.identifier = message.identifier;
                        return object;
                    };

                    /**
                     * Converts this Transform to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.Transform
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transform.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Transform;
                })();

                record.Record = (function() {

                    /**
                     * Properties of a Record.
                     * @memberof sajari.engine.store.record
                     * @interface IRecord
                     * @property {Object.<string,sajari.engine.IValue>|null} [values] Record values
                     */

                    /**
                     * Constructs a new Record.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Record.
                     * @implements IRecord
                     * @constructor
                     * @param {sajari.engine.store.record.IRecord=} [properties] Properties to set
                     */
                    function Record(properties) {
                        this.values = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Record values.
                     * @member {Object.<string,sajari.engine.IValue>} values
                     * @memberof sajari.engine.store.record.Record
                     * @instance
                     */
                    Record.prototype.values = $util.emptyObject;

                    /**
                     * Creates a new Record instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {sajari.engine.store.record.IRecord=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.Record} Record instance
                     */
                    Record.create = function create(properties) {
                        return new Record(properties);
                    };

                    /**
                     * Encodes the specified Record message. Does not implicitly {@link sajari.engine.store.record.Record.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {sajari.engine.store.record.IRecord} message Record message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Record.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.values != null && message.hasOwnProperty("values"))
                            for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.Value.encode(message.values[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        return writer;
                    };

                    /**
                     * Encodes the specified Record message, length delimited. Does not implicitly {@link sajari.engine.store.record.Record.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {sajari.engine.store.record.IRecord} message Record message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Record.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Record message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.Record} Record
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Record.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.Record(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                reader.skip().pos++;
                                if (message.values === $util.emptyObject)
                                    message.values = {};
                                key = reader.string();
                                reader.pos++;
                                message.values[key] = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Record message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.Record} Record
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Record.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Record message.
                     * @function verify
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Record.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!$util.isObject(message.values))
                                return "values: object expected";
                            var key = Object.keys(message.values);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.Value.verify(message.values[key[i]]);
                                if (error)
                                    return "values." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Record message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.Record} Record
                     */
                    Record.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.Record)
                            return object;
                        var message = new $root.sajari.engine.store.record.Record();
                        if (object.values) {
                            if (typeof object.values !== "object")
                                throw TypeError(".sajari.engine.store.record.Record.values: object expected");
                            message.values = {};
                            for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i) {
                                if (typeof object.values[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.store.record.Record.values: object expected");
                                message.values[keys[i]] = $root.sajari.engine.Value.fromObject(object.values[keys[i]]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Record message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.Record
                     * @static
                     * @param {sajari.engine.store.record.Record} message Record
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Record.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.values = {};
                        var keys2;
                        if (message.values && (keys2 = Object.keys(message.values)).length) {
                            object.values = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.values[keys2[j]] = $root.sajari.engine.Value.toObject(message.values[keys2[j]], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Record to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.Record
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Record.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Record;
                })();

                record.Records = (function() {

                    /**
                     * Properties of a Records.
                     * @memberof sajari.engine.store.record
                     * @interface IRecords
                     * @property {Array.<sajari.engine.store.record.IRecord>|null} [records] Records records
                     * @property {Array.<sajari.engine.store.record.ITransform>|null} [transforms] Records transforms
                     */

                    /**
                     * Constructs a new Records.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Records.
                     * @implements IRecords
                     * @constructor
                     * @param {sajari.engine.store.record.IRecords=} [properties] Properties to set
                     */
                    function Records(properties) {
                        this.records = [];
                        this.transforms = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Records records.
                     * @member {Array.<sajari.engine.store.record.IRecord>} records
                     * @memberof sajari.engine.store.record.Records
                     * @instance
                     */
                    Records.prototype.records = $util.emptyArray;

                    /**
                     * Records transforms.
                     * @member {Array.<sajari.engine.store.record.ITransform>} transforms
                     * @memberof sajari.engine.store.record.Records
                     * @instance
                     */
                    Records.prototype.transforms = $util.emptyArray;

                    /**
                     * Creates a new Records instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {sajari.engine.store.record.IRecords=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.Records} Records instance
                     */
                    Records.create = function create(properties) {
                        return new Records(properties);
                    };

                    /**
                     * Encodes the specified Records message. Does not implicitly {@link sajari.engine.store.record.Records.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {sajari.engine.store.record.IRecords} message Records message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Records.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.records != null && message.records.length)
                            for (var i = 0; i < message.records.length; ++i)
                                $root.sajari.engine.store.record.Record.encode(message.records[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.transforms != null && message.transforms.length)
                            for (var i = 0; i < message.transforms.length; ++i)
                                $root.sajari.engine.store.record.Transform.encode(message.transforms[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Records message, length delimited. Does not implicitly {@link sajari.engine.store.record.Records.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {sajari.engine.store.record.IRecords} message Records message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Records.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Records message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.Records} Records
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Records.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.Records();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.records && message.records.length))
                                    message.records = [];
                                message.records.push($root.sajari.engine.store.record.Record.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.transforms && message.transforms.length))
                                    message.transforms = [];
                                message.transforms.push($root.sajari.engine.store.record.Transform.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Records message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.Records} Records
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Records.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Records message.
                     * @function verify
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Records.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.records != null && message.hasOwnProperty("records")) {
                            if (!Array.isArray(message.records))
                                return "records: array expected";
                            for (var i = 0; i < message.records.length; ++i) {
                                var error = $root.sajari.engine.store.record.Record.verify(message.records[i]);
                                if (error)
                                    return "records." + error;
                            }
                        }
                        if (message.transforms != null && message.hasOwnProperty("transforms")) {
                            if (!Array.isArray(message.transforms))
                                return "transforms: array expected";
                            for (var i = 0; i < message.transforms.length; ++i) {
                                var error = $root.sajari.engine.store.record.Transform.verify(message.transforms[i]);
                                if (error)
                                    return "transforms." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Records message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.Records} Records
                     */
                    Records.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.Records)
                            return object;
                        var message = new $root.sajari.engine.store.record.Records();
                        if (object.records) {
                            if (!Array.isArray(object.records))
                                throw TypeError(".sajari.engine.store.record.Records.records: array expected");
                            message.records = [];
                            for (var i = 0; i < object.records.length; ++i) {
                                if (typeof object.records[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.Records.records: object expected");
                                message.records[i] = $root.sajari.engine.store.record.Record.fromObject(object.records[i]);
                            }
                        }
                        if (object.transforms) {
                            if (!Array.isArray(object.transforms))
                                throw TypeError(".sajari.engine.store.record.Records.transforms: array expected");
                            message.transforms = [];
                            for (var i = 0; i < object.transforms.length; ++i) {
                                if (typeof object.transforms[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.Records.transforms: object expected");
                                message.transforms[i] = $root.sajari.engine.store.record.Transform.fromObject(object.transforms[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Records message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.Records
                     * @static
                     * @param {sajari.engine.store.record.Records} message Records
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Records.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.records = [];
                            object.transforms = [];
                        }
                        if (message.records && message.records.length) {
                            object.records = [];
                            for (var j = 0; j < message.records.length; ++j)
                                object.records[j] = $root.sajari.engine.store.record.Record.toObject(message.records[j], options);
                        }
                        if (message.transforms && message.transforms.length) {
                            object.transforms = [];
                            for (var j = 0; j < message.transforms.length; ++j)
                                object.transforms[j] = $root.sajari.engine.store.record.Transform.toObject(message.transforms[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Records to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.Records
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Records.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Records;
                })();

                record.AddResponse = (function() {

                    /**
                     * Properties of an AddResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IAddResponse
                     * @property {Array.<sajari.engine.IKey>|null} [keys] AddResponse keys
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] AddResponse status
                     */

                    /**
                     * Constructs a new AddResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents an AddResponse.
                     * @implements IAddResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IAddResponse=} [properties] Properties to set
                     */
                    function AddResponse(properties) {
                        this.keys = [];
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AddResponse keys.
                     * @member {Array.<sajari.engine.IKey>} keys
                     * @memberof sajari.engine.store.record.AddResponse
                     * @instance
                     */
                    AddResponse.prototype.keys = $util.emptyArray;

                    /**
                     * AddResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.AddResponse
                     * @instance
                     */
                    AddResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new AddResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {sajari.engine.store.record.IAddResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.AddResponse} AddResponse instance
                     */
                    AddResponse.create = function create(properties) {
                        return new AddResponse(properties);
                    };

                    /**
                     * Encodes the specified AddResponse message. Does not implicitly {@link sajari.engine.store.record.AddResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {sajari.engine.store.record.IAddResponse} message AddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keys != null && message.keys.length)
                            for (var i = 0; i < message.keys.length; ++i)
                                $root.sajari.engine.Key.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AddResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.AddResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {sajari.engine.store.record.IAddResponse} message AddResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AddResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AddResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.AddResponse} AddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.AddResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.keys && message.keys.length))
                                    message.keys = [];
                                message.keys.push($root.sajari.engine.Key.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AddResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.AddResponse} AddResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AddResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AddResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AddResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.keys != null && message.hasOwnProperty("keys")) {
                            if (!Array.isArray(message.keys))
                                return "keys: array expected";
                            for (var i = 0; i < message.keys.length; ++i) {
                                var error = $root.sajari.engine.Key.verify(message.keys[i]);
                                if (error)
                                    return "keys." + error;
                            }
                        }
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AddResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.AddResponse} AddResponse
                     */
                    AddResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.AddResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.AddResponse();
                        if (object.keys) {
                            if (!Array.isArray(object.keys))
                                throw TypeError(".sajari.engine.store.record.AddResponse.keys: array expected");
                            message.keys = [];
                            for (var i = 0; i < object.keys.length; ++i) {
                                if (typeof object.keys[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.AddResponse.keys: object expected");
                                message.keys[i] = $root.sajari.engine.Key.fromObject(object.keys[i]);
                            }
                        }
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.AddResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.AddResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AddResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.AddResponse
                     * @static
                     * @param {sajari.engine.store.record.AddResponse} message AddResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AddResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.keys = [];
                            object.status = [];
                        }
                        if (message.keys && message.keys.length) {
                            object.keys = [];
                            for (var j = 0; j < message.keys.length; ++j)
                                object.keys[j] = $root.sajari.engine.Key.toObject(message.keys[j], options);
                        }
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this AddResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.AddResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AddResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AddResponse;
                })();

                record.GetResponse = (function() {

                    /**
                     * Properties of a GetResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IGetResponse
                     * @property {Array.<sajari.engine.store.record.IRecord>|null} [records] GetResponse records
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] GetResponse status
                     */

                    /**
                     * Constructs a new GetResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a GetResponse.
                     * @implements IGetResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IGetResponse=} [properties] Properties to set
                     */
                    function GetResponse(properties) {
                        this.records = [];
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GetResponse records.
                     * @member {Array.<sajari.engine.store.record.IRecord>} records
                     * @memberof sajari.engine.store.record.GetResponse
                     * @instance
                     */
                    GetResponse.prototype.records = $util.emptyArray;

                    /**
                     * GetResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.GetResponse
                     * @instance
                     */
                    GetResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new GetResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {sajari.engine.store.record.IGetResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.GetResponse} GetResponse instance
                     */
                    GetResponse.create = function create(properties) {
                        return new GetResponse(properties);
                    };

                    /**
                     * Encodes the specified GetResponse message. Does not implicitly {@link sajari.engine.store.record.GetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {sajari.engine.store.record.IGetResponse} message GetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.records != null && message.records.length)
                            for (var i = 0; i < message.records.length; ++i)
                                $root.sajari.engine.store.record.Record.encode(message.records[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GetResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.GetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {sajari.engine.store.record.IGetResponse} message GetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.GetResponse} GetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.GetResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.records && message.records.length))
                                    message.records = [];
                                message.records.push($root.sajari.engine.store.record.Record.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.GetResponse} GetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GetResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.records != null && message.hasOwnProperty("records")) {
                            if (!Array.isArray(message.records))
                                return "records: array expected";
                            for (var i = 0; i < message.records.length; ++i) {
                                var error = $root.sajari.engine.store.record.Record.verify(message.records[i]);
                                if (error)
                                    return "records." + error;
                            }
                        }
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a GetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.GetResponse} GetResponse
                     */
                    GetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.GetResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.GetResponse();
                        if (object.records) {
                            if (!Array.isArray(object.records))
                                throw TypeError(".sajari.engine.store.record.GetResponse.records: array expected");
                            message.records = [];
                            for (var i = 0; i < object.records.length; ++i) {
                                if (typeof object.records[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.GetResponse.records: object expected");
                                message.records[i] = $root.sajari.engine.store.record.Record.fromObject(object.records[i]);
                            }
                        }
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.GetResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.GetResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.GetResponse
                     * @static
                     * @param {sajari.engine.store.record.GetResponse} message GetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.records = [];
                            object.status = [];
                        }
                        if (message.records && message.records.length) {
                            object.records = [];
                            for (var j = 0; j < message.records.length; ++j)
                                object.records[j] = $root.sajari.engine.store.record.Record.toObject(message.records[j], options);
                        }
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this GetResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.GetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GetResponse;
                })();

                record.DeleteResponse = (function() {

                    /**
                     * Properties of a DeleteResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IDeleteResponse
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] DeleteResponse status
                     */

                    /**
                     * Constructs a new DeleteResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a DeleteResponse.
                     * @implements IDeleteResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IDeleteResponse=} [properties] Properties to set
                     */
                    function DeleteResponse(properties) {
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DeleteResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @instance
                     */
                    DeleteResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new DeleteResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {sajari.engine.store.record.IDeleteResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.DeleteResponse} DeleteResponse instance
                     */
                    DeleteResponse.create = function create(properties) {
                        return new DeleteResponse(properties);
                    };

                    /**
                     * Encodes the specified DeleteResponse message. Does not implicitly {@link sajari.engine.store.record.DeleteResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {sajari.engine.store.record.IDeleteResponse} message DeleteResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified DeleteResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.DeleteResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {sajari.engine.store.record.IDeleteResponse} message DeleteResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DeleteResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DeleteResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.DeleteResponse} DeleteResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.DeleteResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DeleteResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.DeleteResponse} DeleteResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DeleteResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DeleteResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DeleteResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a DeleteResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.DeleteResponse} DeleteResponse
                     */
                    DeleteResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.DeleteResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.DeleteResponse();
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.DeleteResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.DeleteResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a DeleteResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @static
                     * @param {sajari.engine.store.record.DeleteResponse} message DeleteResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DeleteResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.status = [];
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this DeleteResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.DeleteResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DeleteResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DeleteResponse;
                })();

                record.Keys = (function() {

                    /**
                     * Properties of a Keys.
                     * @memberof sajari.engine.store.record
                     * @interface IKeys
                     * @property {Array.<sajari.engine.IKey>|null} [keys] Keys keys
                     */

                    /**
                     * Constructs a new Keys.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a Keys.
                     * @implements IKeys
                     * @constructor
                     * @param {sajari.engine.store.record.IKeys=} [properties] Properties to set
                     */
                    function Keys(properties) {
                        this.keys = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Keys keys.
                     * @member {Array.<sajari.engine.IKey>} keys
                     * @memberof sajari.engine.store.record.Keys
                     * @instance
                     */
                    Keys.prototype.keys = $util.emptyArray;

                    /**
                     * Creates a new Keys instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {sajari.engine.store.record.IKeys=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.Keys} Keys instance
                     */
                    Keys.create = function create(properties) {
                        return new Keys(properties);
                    };

                    /**
                     * Encodes the specified Keys message. Does not implicitly {@link sajari.engine.store.record.Keys.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {sajari.engine.store.record.IKeys} message Keys message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Keys.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keys != null && message.keys.length)
                            for (var i = 0; i < message.keys.length; ++i)
                                $root.sajari.engine.Key.encode(message.keys[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Keys message, length delimited. Does not implicitly {@link sajari.engine.store.record.Keys.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {sajari.engine.store.record.IKeys} message Keys message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Keys.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Keys message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.Keys} Keys
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Keys.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.Keys();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.keys && message.keys.length))
                                    message.keys = [];
                                message.keys.push($root.sajari.engine.Key.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Keys message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.Keys} Keys
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Keys.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Keys message.
                     * @function verify
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Keys.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.keys != null && message.hasOwnProperty("keys")) {
                            if (!Array.isArray(message.keys))
                                return "keys: array expected";
                            for (var i = 0; i < message.keys.length; ++i) {
                                var error = $root.sajari.engine.Key.verify(message.keys[i]);
                                if (error)
                                    return "keys." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Keys message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.Keys} Keys
                     */
                    Keys.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.Keys)
                            return object;
                        var message = new $root.sajari.engine.store.record.Keys();
                        if (object.keys) {
                            if (!Array.isArray(object.keys))
                                throw TypeError(".sajari.engine.store.record.Keys.keys: array expected");
                            message.keys = [];
                            for (var i = 0; i < object.keys.length; ++i) {
                                if (typeof object.keys[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.Keys.keys: object expected");
                                message.keys[i] = $root.sajari.engine.Key.fromObject(object.keys[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Keys message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.Keys
                     * @static
                     * @param {sajari.engine.store.record.Keys} message Keys
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Keys.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.keys = [];
                        if (message.keys && message.keys.length) {
                            object.keys = [];
                            for (var j = 0; j < message.keys.length; ++j)
                                object.keys[j] = $root.sajari.engine.Key.toObject(message.keys[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Keys to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.Keys
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Keys.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Keys;
                })();

                record.MutateRequest = (function() {

                    /**
                     * Properties of a MutateRequest.
                     * @memberof sajari.engine.store.record
                     * @interface IMutateRequest
                     * @property {Array.<sajari.engine.store.record.MutateRequest.IRecordMutation>|null} [recordMutations] MutateRequest recordMutations
                     */

                    /**
                     * Constructs a new MutateRequest.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a MutateRequest.
                     * @implements IMutateRequest
                     * @constructor
                     * @param {sajari.engine.store.record.IMutateRequest=} [properties] Properties to set
                     */
                    function MutateRequest(properties) {
                        this.recordMutations = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MutateRequest recordMutations.
                     * @member {Array.<sajari.engine.store.record.MutateRequest.IRecordMutation>} recordMutations
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @instance
                     */
                    MutateRequest.prototype.recordMutations = $util.emptyArray;

                    /**
                     * Creates a new MutateRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {sajari.engine.store.record.IMutateRequest=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.MutateRequest} MutateRequest instance
                     */
                    MutateRequest.create = function create(properties) {
                        return new MutateRequest(properties);
                    };

                    /**
                     * Encodes the specified MutateRequest message. Does not implicitly {@link sajari.engine.store.record.MutateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {sajari.engine.store.record.IMutateRequest} message MutateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.recordMutations != null && message.recordMutations.length)
                            for (var i = 0; i < message.recordMutations.length; ++i)
                                $root.sajari.engine.store.record.MutateRequest.RecordMutation.encode(message.recordMutations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MutateRequest message, length delimited. Does not implicitly {@link sajari.engine.store.record.MutateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {sajari.engine.store.record.IMutateRequest} message MutateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MutateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.MutateRequest} MutateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.MutateRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.recordMutations && message.recordMutations.length))
                                    message.recordMutations = [];
                                message.recordMutations.push($root.sajari.engine.store.record.MutateRequest.RecordMutation.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MutateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.MutateRequest} MutateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MutateRequest message.
                     * @function verify
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.recordMutations != null && message.hasOwnProperty("recordMutations")) {
                            if (!Array.isArray(message.recordMutations))
                                return "recordMutations: array expected";
                            for (var i = 0; i < message.recordMutations.length; ++i) {
                                var error = $root.sajari.engine.store.record.MutateRequest.RecordMutation.verify(message.recordMutations[i]);
                                if (error)
                                    return "recordMutations." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a MutateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.MutateRequest} MutateRequest
                     */
                    MutateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.MutateRequest)
                            return object;
                        var message = new $root.sajari.engine.store.record.MutateRequest();
                        if (object.recordMutations) {
                            if (!Array.isArray(object.recordMutations))
                                throw TypeError(".sajari.engine.store.record.MutateRequest.recordMutations: array expected");
                            message.recordMutations = [];
                            for (var i = 0; i < object.recordMutations.length; ++i) {
                                if (typeof object.recordMutations[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.MutateRequest.recordMutations: object expected");
                                message.recordMutations[i] = $root.sajari.engine.store.record.MutateRequest.RecordMutation.fromObject(object.recordMutations[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MutateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @static
                     * @param {sajari.engine.store.record.MutateRequest} message MutateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.recordMutations = [];
                        if (message.recordMutations && message.recordMutations.length) {
                            object.recordMutations = [];
                            for (var j = 0; j < message.recordMutations.length; ++j)
                                object.recordMutations[j] = $root.sajari.engine.store.record.MutateRequest.RecordMutation.toObject(message.recordMutations[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this MutateRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.MutateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    MutateRequest.RecordMutation = (function() {

                        /**
                         * Properties of a RecordMutation.
                         * @memberof sajari.engine.store.record.MutateRequest
                         * @interface IRecordMutation
                         * @property {sajari.engine.IKey|null} [key] RecordMutation key
                         * @property {Array.<sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation>|null} [fieldMutations] RecordMutation fieldMutations
                         */

                        /**
                         * Constructs a new RecordMutation.
                         * @memberof sajari.engine.store.record.MutateRequest
                         * @classdesc Represents a RecordMutation.
                         * @implements IRecordMutation
                         * @constructor
                         * @param {sajari.engine.store.record.MutateRequest.IRecordMutation=} [properties] Properties to set
                         */
                        function RecordMutation(properties) {
                            this.fieldMutations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * RecordMutation key.
                         * @member {sajari.engine.IKey|null|undefined} key
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @instance
                         */
                        RecordMutation.prototype.key = null;

                        /**
                         * RecordMutation fieldMutations.
                         * @member {Array.<sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation>} fieldMutations
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @instance
                         */
                        RecordMutation.prototype.fieldMutations = $util.emptyArray;

                        /**
                         * Creates a new RecordMutation instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {sajari.engine.store.record.MutateRequest.IRecordMutation=} [properties] Properties to set
                         * @returns {sajari.engine.store.record.MutateRequest.RecordMutation} RecordMutation instance
                         */
                        RecordMutation.create = function create(properties) {
                            return new RecordMutation(properties);
                        };

                        /**
                         * Encodes the specified RecordMutation message. Does not implicitly {@link sajari.engine.store.record.MutateRequest.RecordMutation.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {sajari.engine.store.record.MutateRequest.IRecordMutation} message RecordMutation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordMutation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && message.hasOwnProperty("key"))
                                $root.sajari.engine.Key.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.fieldMutations != null && message.fieldMutations.length)
                                for (var i = 0; i < message.fieldMutations.length; ++i)
                                    $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.encode(message.fieldMutations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified RecordMutation message, length delimited. Does not implicitly {@link sajari.engine.store.record.MutateRequest.RecordMutation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {sajari.engine.store.record.MutateRequest.IRecordMutation} message RecordMutation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        RecordMutation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a RecordMutation message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.store.record.MutateRequest.RecordMutation} RecordMutation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordMutation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.MutateRequest.RecordMutation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = $root.sajari.engine.Key.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    if (!(message.fieldMutations && message.fieldMutations.length))
                                        message.fieldMutations = [];
                                    message.fieldMutations.push($root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a RecordMutation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.store.record.MutateRequest.RecordMutation} RecordMutation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        RecordMutation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a RecordMutation message.
                         * @function verify
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        RecordMutation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key")) {
                                var error = $root.sajari.engine.Key.verify(message.key);
                                if (error)
                                    return "key." + error;
                            }
                            if (message.fieldMutations != null && message.hasOwnProperty("fieldMutations")) {
                                if (!Array.isArray(message.fieldMutations))
                                    return "fieldMutations: array expected";
                                for (var i = 0; i < message.fieldMutations.length; ++i) {
                                    var error = $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.verify(message.fieldMutations[i]);
                                    if (error)
                                        return "fieldMutations." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a RecordMutation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.store.record.MutateRequest.RecordMutation} RecordMutation
                         */
                        RecordMutation.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.store.record.MutateRequest.RecordMutation)
                                return object;
                            var message = new $root.sajari.engine.store.record.MutateRequest.RecordMutation();
                            if (object.key != null) {
                                if (typeof object.key !== "object")
                                    throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.key: object expected");
                                message.key = $root.sajari.engine.Key.fromObject(object.key);
                            }
                            if (object.fieldMutations) {
                                if (!Array.isArray(object.fieldMutations))
                                    throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.fieldMutations: array expected");
                                message.fieldMutations = [];
                                for (var i = 0; i < object.fieldMutations.length; ++i) {
                                    if (typeof object.fieldMutations[i] !== "object")
                                        throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.fieldMutations: object expected");
                                    message.fieldMutations[i] = $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.fromObject(object.fieldMutations[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a RecordMutation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @static
                         * @param {sajari.engine.store.record.MutateRequest.RecordMutation} message RecordMutation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        RecordMutation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.fieldMutations = [];
                            if (options.defaults)
                                object.key = null;
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = $root.sajari.engine.Key.toObject(message.key, options);
                            if (message.fieldMutations && message.fieldMutations.length) {
                                object.fieldMutations = [];
                                for (var j = 0; j < message.fieldMutations.length; ++j)
                                    object.fieldMutations[j] = $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.toObject(message.fieldMutations[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this RecordMutation to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        RecordMutation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        RecordMutation.FieldMutation = (function() {

                            /**
                             * Properties of a FieldMutation.
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                             * @interface IFieldMutation
                             * @property {string|null} [field] FieldMutation field
                             * @property {sajari.engine.IValue|null} [set] FieldMutation set
                             * @property {sajari.engine.IValue|null} [increment] FieldMutation increment
                             * @property {sajari.engine.IValue|null} [append] FieldMutation append
                             */

                            /**
                             * Constructs a new FieldMutation.
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation
                             * @classdesc Represents a FieldMutation.
                             * @implements IFieldMutation
                             * @constructor
                             * @param {sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation=} [properties] Properties to set
                             */
                            function FieldMutation(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * FieldMutation field.
                             * @member {string} field
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             */
                            FieldMutation.prototype.field = "";

                            /**
                             * FieldMutation set.
                             * @member {sajari.engine.IValue|null|undefined} set
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             */
                            FieldMutation.prototype.set = null;

                            /**
                             * FieldMutation increment.
                             * @member {sajari.engine.IValue|null|undefined} increment
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             */
                            FieldMutation.prototype.increment = null;

                            /**
                             * FieldMutation append.
                             * @member {sajari.engine.IValue|null|undefined} append
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             */
                            FieldMutation.prototype.append = null;

                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;

                            /**
                             * FieldMutation mutation.
                             * @member {"set"|"increment"|"append"|undefined} mutation
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             */
                            Object.defineProperty(FieldMutation.prototype, "mutation", {
                                get: $util.oneOfGetter($oneOfFields = ["set", "increment", "append"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });

                            /**
                             * Creates a new FieldMutation instance using the specified properties.
                             * @function create
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation=} [properties] Properties to set
                             * @returns {sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation} FieldMutation instance
                             */
                            FieldMutation.create = function create(properties) {
                                return new FieldMutation(properties);
                            };

                            /**
                             * Encodes the specified FieldMutation message. Does not implicitly {@link sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation} message FieldMutation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FieldMutation.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.field != null && message.hasOwnProperty("field"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                                if (message.set != null && message.hasOwnProperty("set"))
                                    $root.sajari.engine.Value.encode(message.set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                if (message.increment != null && message.hasOwnProperty("increment"))
                                    $root.sajari.engine.Value.encode(message.increment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                                if (message.append != null && message.hasOwnProperty("append"))
                                    $root.sajari.engine.Value.encode(message.append, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified FieldMutation message, length delimited. Does not implicitly {@link sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {sajari.engine.store.record.MutateRequest.RecordMutation.IFieldMutation} message FieldMutation message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FieldMutation.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a FieldMutation message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation} FieldMutation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FieldMutation.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.field = reader.string();
                                        break;
                                    case 2:
                                        message.set = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                        break;
                                    case 3:
                                        message.increment = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                        break;
                                    case 4:
                                        message.append = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a FieldMutation message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation} FieldMutation
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FieldMutation.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a FieldMutation message.
                             * @function verify
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            FieldMutation.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.field != null && message.hasOwnProperty("field"))
                                    if (!$util.isString(message.field))
                                        return "field: string expected";
                                if (message.set != null && message.hasOwnProperty("set")) {
                                    properties.mutation = 1;
                                    {
                                        var error = $root.sajari.engine.Value.verify(message.set);
                                        if (error)
                                            return "set." + error;
                                    }
                                }
                                if (message.increment != null && message.hasOwnProperty("increment")) {
                                    if (properties.mutation === 1)
                                        return "mutation: multiple values";
                                    properties.mutation = 1;
                                    {
                                        var error = $root.sajari.engine.Value.verify(message.increment);
                                        if (error)
                                            return "increment." + error;
                                    }
                                }
                                if (message.append != null && message.hasOwnProperty("append")) {
                                    if (properties.mutation === 1)
                                        return "mutation: multiple values";
                                    properties.mutation = 1;
                                    {
                                        var error = $root.sajari.engine.Value.verify(message.append);
                                        if (error)
                                            return "append." + error;
                                    }
                                }
                                return null;
                            };

                            /**
                             * Creates a FieldMutation message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation} FieldMutation
                             */
                            FieldMutation.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation)
                                    return object;
                                var message = new $root.sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation();
                                if (object.field != null)
                                    message.field = String(object.field);
                                if (object.set != null) {
                                    if (typeof object.set !== "object")
                                        throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.set: object expected");
                                    message.set = $root.sajari.engine.Value.fromObject(object.set);
                                }
                                if (object.increment != null) {
                                    if (typeof object.increment !== "object")
                                        throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.increment: object expected");
                                    message.increment = $root.sajari.engine.Value.fromObject(object.increment);
                                }
                                if (object.append != null) {
                                    if (typeof object.append !== "object")
                                        throw TypeError(".sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation.append: object expected");
                                    message.append = $root.sajari.engine.Value.fromObject(object.append);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a FieldMutation message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @static
                             * @param {sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation} message FieldMutation
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            FieldMutation.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.field = "";
                                if (message.field != null && message.hasOwnProperty("field"))
                                    object.field = message.field;
                                if (message.set != null && message.hasOwnProperty("set")) {
                                    object.set = $root.sajari.engine.Value.toObject(message.set, options);
                                    if (options.oneofs)
                                        object.mutation = "set";
                                }
                                if (message.increment != null && message.hasOwnProperty("increment")) {
                                    object.increment = $root.sajari.engine.Value.toObject(message.increment, options);
                                    if (options.oneofs)
                                        object.mutation = "increment";
                                }
                                if (message.append != null && message.hasOwnProperty("append")) {
                                    object.append = $root.sajari.engine.Value.toObject(message.append, options);
                                    if (options.oneofs)
                                        object.mutation = "append";
                                }
                                return object;
                            };

                            /**
                             * Converts this FieldMutation to JSON.
                             * @function toJSON
                             * @memberof sajari.engine.store.record.MutateRequest.RecordMutation.FieldMutation
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            FieldMutation.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return FieldMutation;
                        })();

                        return RecordMutation;
                    })();

                    return MutateRequest;
                })();

                record.MutateResponse = (function() {

                    /**
                     * Properties of a MutateResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IMutateResponse
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] MutateResponse status
                     */

                    /**
                     * Constructs a new MutateResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a MutateResponse.
                     * @implements IMutateResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IMutateResponse=} [properties] Properties to set
                     */
                    function MutateResponse(properties) {
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MutateResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @instance
                     */
                    MutateResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new MutateResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {sajari.engine.store.record.IMutateResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.MutateResponse} MutateResponse instance
                     */
                    MutateResponse.create = function create(properties) {
                        return new MutateResponse(properties);
                    };

                    /**
                     * Encodes the specified MutateResponse message. Does not implicitly {@link sajari.engine.store.record.MutateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {sajari.engine.store.record.IMutateResponse} message MutateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MutateResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.MutateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {sajari.engine.store.record.IMutateResponse} message MutateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MutateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MutateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.MutateResponse} MutateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.MutateResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MutateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.MutateResponse} MutateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MutateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MutateResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MutateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a MutateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.MutateResponse} MutateResponse
                     */
                    MutateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.MutateResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.MutateResponse();
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.MutateResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.MutateResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MutateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @static
                     * @param {sajari.engine.store.record.MutateResponse} message MutateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MutateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.status = [];
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this MutateResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.MutateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MutateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MutateResponse;
                })();

                record.SetRequest = (function() {

                    /**
                     * Properties of a SetRequest.
                     * @memberof sajari.engine.store.record
                     * @interface ISetRequest
                     * @property {Array.<sajari.engine.store.record.IKeyScores>|null} [keysScores] SetRequest keysScores
                     */

                    /**
                     * Constructs a new SetRequest.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a SetRequest.
                     * @implements ISetRequest
                     * @constructor
                     * @param {sajari.engine.store.record.ISetRequest=} [properties] Properties to set
                     */
                    function SetRequest(properties) {
                        this.keysScores = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SetRequest keysScores.
                     * @member {Array.<sajari.engine.store.record.IKeyScores>} keysScores
                     * @memberof sajari.engine.store.record.SetRequest
                     * @instance
                     */
                    SetRequest.prototype.keysScores = $util.emptyArray;

                    /**
                     * Creates a new SetRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {sajari.engine.store.record.ISetRequest=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.SetRequest} SetRequest instance
                     */
                    SetRequest.create = function create(properties) {
                        return new SetRequest(properties);
                    };

                    /**
                     * Encodes the specified SetRequest message. Does not implicitly {@link sajari.engine.store.record.SetRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {sajari.engine.store.record.ISetRequest} message SetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keysScores != null && message.keysScores.length)
                            for (var i = 0; i < message.keysScores.length; ++i)
                                $root.sajari.engine.store.record.KeyScores.encode(message.keysScores[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SetRequest message, length delimited. Does not implicitly {@link sajari.engine.store.record.SetRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {sajari.engine.store.record.ISetRequest} message SetRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SetRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.SetRequest} SetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.SetRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.keysScores && message.keysScores.length))
                                    message.keysScores = [];
                                message.keysScores.push($root.sajari.engine.store.record.KeyScores.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SetRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.SetRequest} SetRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SetRequest message.
                     * @function verify
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.keysScores != null && message.hasOwnProperty("keysScores")) {
                            if (!Array.isArray(message.keysScores))
                                return "keysScores: array expected";
                            for (var i = 0; i < message.keysScores.length; ++i) {
                                var error = $root.sajari.engine.store.record.KeyScores.verify(message.keysScores[i]);
                                if (error)
                                    return "keysScores." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SetRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.SetRequest} SetRequest
                     */
                    SetRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.SetRequest)
                            return object;
                        var message = new $root.sajari.engine.store.record.SetRequest();
                        if (object.keysScores) {
                            if (!Array.isArray(object.keysScores))
                                throw TypeError(".sajari.engine.store.record.SetRequest.keysScores: array expected");
                            message.keysScores = [];
                            for (var i = 0; i < object.keysScores.length; ++i) {
                                if (typeof object.keysScores[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.SetRequest.keysScores: object expected");
                                message.keysScores[i] = $root.sajari.engine.store.record.KeyScores.fromObject(object.keysScores[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SetRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.SetRequest
                     * @static
                     * @param {sajari.engine.store.record.SetRequest} message SetRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.keysScores = [];
                        if (message.keysScores && message.keysScores.length) {
                            object.keysScores = [];
                            for (var j = 0; j < message.keysScores.length; ++j)
                                object.keysScores[j] = $root.sajari.engine.store.record.KeyScores.toObject(message.keysScores[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this SetRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.SetRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SetRequest;
                })();

                record.SetResponse = (function() {

                    /**
                     * Properties of a SetResponse.
                     * @memberof sajari.engine.store.record
                     * @interface ISetResponse
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] SetResponse status
                     */

                    /**
                     * Constructs a new SetResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a SetResponse.
                     * @implements ISetResponse
                     * @constructor
                     * @param {sajari.engine.store.record.ISetResponse=} [properties] Properties to set
                     */
                    function SetResponse(properties) {
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SetResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.SetResponse
                     * @instance
                     */
                    SetResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new SetResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {sajari.engine.store.record.ISetResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.SetResponse} SetResponse instance
                     */
                    SetResponse.create = function create(properties) {
                        return new SetResponse(properties);
                    };

                    /**
                     * Encodes the specified SetResponse message. Does not implicitly {@link sajari.engine.store.record.SetResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {sajari.engine.store.record.ISetResponse} message SetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SetResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.SetResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {sajari.engine.store.record.ISetResponse} message SetResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SetResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SetResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.SetResponse} SetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.SetResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SetResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.SetResponse} SetResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SetResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SetResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SetResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SetResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.SetResponse} SetResponse
                     */
                    SetResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.SetResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.SetResponse();
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.SetResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.SetResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SetResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.SetResponse
                     * @static
                     * @param {sajari.engine.store.record.SetResponse} message SetResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SetResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.status = [];
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this SetResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.SetResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SetResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SetResponse;
                })();

                record.IncrementRequest = (function() {

                    /**
                     * Properties of an IncrementRequest.
                     * @memberof sajari.engine.store.record
                     * @interface IIncrementRequest
                     * @property {Array.<sajari.engine.store.record.IKeyScores>|null} [keysScores] IncrementRequest keysScores
                     */

                    /**
                     * Constructs a new IncrementRequest.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents an IncrementRequest.
                     * @implements IIncrementRequest
                     * @constructor
                     * @param {sajari.engine.store.record.IIncrementRequest=} [properties] Properties to set
                     */
                    function IncrementRequest(properties) {
                        this.keysScores = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IncrementRequest keysScores.
                     * @member {Array.<sajari.engine.store.record.IKeyScores>} keysScores
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @instance
                     */
                    IncrementRequest.prototype.keysScores = $util.emptyArray;

                    /**
                     * Creates a new IncrementRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {sajari.engine.store.record.IIncrementRequest=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.IncrementRequest} IncrementRequest instance
                     */
                    IncrementRequest.create = function create(properties) {
                        return new IncrementRequest(properties);
                    };

                    /**
                     * Encodes the specified IncrementRequest message. Does not implicitly {@link sajari.engine.store.record.IncrementRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {sajari.engine.store.record.IIncrementRequest} message IncrementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IncrementRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.keysScores != null && message.keysScores.length)
                            for (var i = 0; i < message.keysScores.length; ++i)
                                $root.sajari.engine.store.record.KeyScores.encode(message.keysScores[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IncrementRequest message, length delimited. Does not implicitly {@link sajari.engine.store.record.IncrementRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {sajari.engine.store.record.IIncrementRequest} message IncrementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IncrementRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IncrementRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.IncrementRequest} IncrementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IncrementRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.IncrementRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.keysScores && message.keysScores.length))
                                    message.keysScores = [];
                                message.keysScores.push($root.sajari.engine.store.record.KeyScores.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IncrementRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.IncrementRequest} IncrementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IncrementRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IncrementRequest message.
                     * @function verify
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IncrementRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.keysScores != null && message.hasOwnProperty("keysScores")) {
                            if (!Array.isArray(message.keysScores))
                                return "keysScores: array expected";
                            for (var i = 0; i < message.keysScores.length; ++i) {
                                var error = $root.sajari.engine.store.record.KeyScores.verify(message.keysScores[i]);
                                if (error)
                                    return "keysScores." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an IncrementRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.IncrementRequest} IncrementRequest
                     */
                    IncrementRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.IncrementRequest)
                            return object;
                        var message = new $root.sajari.engine.store.record.IncrementRequest();
                        if (object.keysScores) {
                            if (!Array.isArray(object.keysScores))
                                throw TypeError(".sajari.engine.store.record.IncrementRequest.keysScores: array expected");
                            message.keysScores = [];
                            for (var i = 0; i < object.keysScores.length; ++i) {
                                if (typeof object.keysScores[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.IncrementRequest.keysScores: object expected");
                                message.keysScores[i] = $root.sajari.engine.store.record.KeyScores.fromObject(object.keysScores[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IncrementRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @static
                     * @param {sajari.engine.store.record.IncrementRequest} message IncrementRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IncrementRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.keysScores = [];
                        if (message.keysScores && message.keysScores.length) {
                            object.keysScores = [];
                            for (var j = 0; j < message.keysScores.length; ++j)
                                object.keysScores[j] = $root.sajari.engine.store.record.KeyScores.toObject(message.keysScores[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this IncrementRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.IncrementRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IncrementRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IncrementRequest;
                })();

                record.IncrementResponse = (function() {

                    /**
                     * Properties of an IncrementResponse.
                     * @memberof sajari.engine.store.record
                     * @interface IIncrementResponse
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] IncrementResponse status
                     */

                    /**
                     * Constructs a new IncrementResponse.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents an IncrementResponse.
                     * @implements IIncrementResponse
                     * @constructor
                     * @param {sajari.engine.store.record.IIncrementResponse=} [properties] Properties to set
                     */
                    function IncrementResponse(properties) {
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IncrementResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @instance
                     */
                    IncrementResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new IncrementResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {sajari.engine.store.record.IIncrementResponse=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.IncrementResponse} IncrementResponse instance
                     */
                    IncrementResponse.create = function create(properties) {
                        return new IncrementResponse(properties);
                    };

                    /**
                     * Encodes the specified IncrementResponse message. Does not implicitly {@link sajari.engine.store.record.IncrementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {sajari.engine.store.record.IIncrementResponse} message IncrementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IncrementResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IncrementResponse message, length delimited. Does not implicitly {@link sajari.engine.store.record.IncrementResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {sajari.engine.store.record.IIncrementResponse} message IncrementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IncrementResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IncrementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.IncrementResponse} IncrementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IncrementResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.IncrementResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IncrementResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.IncrementResponse} IncrementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IncrementResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IncrementResponse message.
                     * @function verify
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IncrementResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an IncrementResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.IncrementResponse} IncrementResponse
                     */
                    IncrementResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.IncrementResponse)
                            return object;
                        var message = new $root.sajari.engine.store.record.IncrementResponse();
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.store.record.IncrementResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.IncrementResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IncrementResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @static
                     * @param {sajari.engine.store.record.IncrementResponse} message IncrementResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IncrementResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.status = [];
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this IncrementResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.IncrementResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IncrementResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IncrementResponse;
                })();

                record.KeyScores = (function() {

                    /**
                     * Properties of a KeyScores.
                     * @memberof sajari.engine.store.record
                     * @interface IKeyScores
                     * @property {sajari.engine.IKey|null} [key] KeyScores key
                     * @property {Array.<sajari.engine.store.record.KeyScores.IScore>|null} [scores] KeyScores scores
                     */

                    /**
                     * Constructs a new KeyScores.
                     * @memberof sajari.engine.store.record
                     * @classdesc Represents a KeyScores.
                     * @implements IKeyScores
                     * @constructor
                     * @param {sajari.engine.store.record.IKeyScores=} [properties] Properties to set
                     */
                    function KeyScores(properties) {
                        this.scores = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * KeyScores key.
                     * @member {sajari.engine.IKey|null|undefined} key
                     * @memberof sajari.engine.store.record.KeyScores
                     * @instance
                     */
                    KeyScores.prototype.key = null;

                    /**
                     * KeyScores scores.
                     * @member {Array.<sajari.engine.store.record.KeyScores.IScore>} scores
                     * @memberof sajari.engine.store.record.KeyScores
                     * @instance
                     */
                    KeyScores.prototype.scores = $util.emptyArray;

                    /**
                     * Creates a new KeyScores instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {sajari.engine.store.record.IKeyScores=} [properties] Properties to set
                     * @returns {sajari.engine.store.record.KeyScores} KeyScores instance
                     */
                    KeyScores.create = function create(properties) {
                        return new KeyScores(properties);
                    };

                    /**
                     * Encodes the specified KeyScores message. Does not implicitly {@link sajari.engine.store.record.KeyScores.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {sajari.engine.store.record.IKeyScores} message KeyScores message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeyScores.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && message.hasOwnProperty("key"))
                            $root.sajari.engine.Key.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.scores != null && message.scores.length)
                            for (var i = 0; i < message.scores.length; ++i)
                                $root.sajari.engine.store.record.KeyScores.Score.encode(message.scores[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified KeyScores message, length delimited. Does not implicitly {@link sajari.engine.store.record.KeyScores.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {sajari.engine.store.record.IKeyScores} message KeyScores message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    KeyScores.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a KeyScores message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.record.KeyScores} KeyScores
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeyScores.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.KeyScores();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = $root.sajari.engine.Key.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.scores && message.scores.length))
                                    message.scores = [];
                                message.scores.push($root.sajari.engine.store.record.KeyScores.Score.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a KeyScores message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.record.KeyScores} KeyScores
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    KeyScores.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a KeyScores message.
                     * @function verify
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    KeyScores.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key")) {
                            var error = $root.sajari.engine.Key.verify(message.key);
                            if (error)
                                return "key." + error;
                        }
                        if (message.scores != null && message.hasOwnProperty("scores")) {
                            if (!Array.isArray(message.scores))
                                return "scores: array expected";
                            for (var i = 0; i < message.scores.length; ++i) {
                                var error = $root.sajari.engine.store.record.KeyScores.Score.verify(message.scores[i]);
                                if (error)
                                    return "scores." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a KeyScores message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.record.KeyScores} KeyScores
                     */
                    KeyScores.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.record.KeyScores)
                            return object;
                        var message = new $root.sajari.engine.store.record.KeyScores();
                        if (object.key != null) {
                            if (typeof object.key !== "object")
                                throw TypeError(".sajari.engine.store.record.KeyScores.key: object expected");
                            message.key = $root.sajari.engine.Key.fromObject(object.key);
                        }
                        if (object.scores) {
                            if (!Array.isArray(object.scores))
                                throw TypeError(".sajari.engine.store.record.KeyScores.scores: array expected");
                            message.scores = [];
                            for (var i = 0; i < object.scores.length; ++i) {
                                if (typeof object.scores[i] !== "object")
                                    throw TypeError(".sajari.engine.store.record.KeyScores.scores: object expected");
                                message.scores[i] = $root.sajari.engine.store.record.KeyScores.Score.fromObject(object.scores[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a KeyScores message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.record.KeyScores
                     * @static
                     * @param {sajari.engine.store.record.KeyScores} message KeyScores
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    KeyScores.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.scores = [];
                        if (options.defaults)
                            object.key = null;
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = $root.sajari.engine.Key.toObject(message.key, options);
                        if (message.scores && message.scores.length) {
                            object.scores = [];
                            for (var j = 0; j < message.scores.length; ++j)
                                object.scores[j] = $root.sajari.engine.store.record.KeyScores.Score.toObject(message.scores[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this KeyScores to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.record.KeyScores
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    KeyScores.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    KeyScores.Score = (function() {

                        /**
                         * Properties of a Score.
                         * @memberof sajari.engine.store.record.KeyScores
                         * @interface IScore
                         * @property {Array.<string>|null} [terms] Score terms
                         * @property {number|null} [count] Score count
                         * @property {number|null} [score] Score score
                         */

                        /**
                         * Constructs a new Score.
                         * @memberof sajari.engine.store.record.KeyScores
                         * @classdesc Represents a Score.
                         * @implements IScore
                         * @constructor
                         * @param {sajari.engine.store.record.KeyScores.IScore=} [properties] Properties to set
                         */
                        function Score(properties) {
                            this.terms = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Score terms.
                         * @member {Array.<string>} terms
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @instance
                         */
                        Score.prototype.terms = $util.emptyArray;

                        /**
                         * Score count.
                         * @member {number} count
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @instance
                         */
                        Score.prototype.count = 0;

                        /**
                         * Score score.
                         * @member {number} score
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @instance
                         */
                        Score.prototype.score = 0;

                        /**
                         * Creates a new Score instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {sajari.engine.store.record.KeyScores.IScore=} [properties] Properties to set
                         * @returns {sajari.engine.store.record.KeyScores.Score} Score instance
                         */
                        Score.create = function create(properties) {
                            return new Score(properties);
                        };

                        /**
                         * Encodes the specified Score message. Does not implicitly {@link sajari.engine.store.record.KeyScores.Score.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {sajari.engine.store.record.KeyScores.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.terms != null && message.terms.length)
                                for (var i = 0; i < message.terms.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.terms[i]);
                            if (message.count != null && message.hasOwnProperty("count"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                            if (message.score != null && message.hasOwnProperty("score"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.score);
                            return writer;
                        };

                        /**
                         * Encodes the specified Score message, length delimited. Does not implicitly {@link sajari.engine.store.record.KeyScores.Score.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {sajari.engine.store.record.KeyScores.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.store.record.KeyScores.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.record.KeyScores.Score();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.terms && message.terms.length))
                                        message.terms = [];
                                    message.terms.push(reader.string());
                                    break;
                                case 2:
                                    message.count = reader.int32();
                                    break;
                                case 3:
                                    message.score = reader.float();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.store.record.KeyScores.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Score message.
                         * @function verify
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Score.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.terms != null && message.hasOwnProperty("terms")) {
                                if (!Array.isArray(message.terms))
                                    return "terms: array expected";
                                for (var i = 0; i < message.terms.length; ++i)
                                    if (!$util.isString(message.terms[i]))
                                        return "terms: string[] expected";
                            }
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (!$util.isInteger(message.count))
                                    return "count: integer expected";
                            if (message.score != null && message.hasOwnProperty("score"))
                                if (typeof message.score !== "number")
                                    return "score: number expected";
                            return null;
                        };

                        /**
                         * Creates a Score message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.store.record.KeyScores.Score} Score
                         */
                        Score.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.store.record.KeyScores.Score)
                                return object;
                            var message = new $root.sajari.engine.store.record.KeyScores.Score();
                            if (object.terms) {
                                if (!Array.isArray(object.terms))
                                    throw TypeError(".sajari.engine.store.record.KeyScores.Score.terms: array expected");
                                message.terms = [];
                                for (var i = 0; i < object.terms.length; ++i)
                                    message.terms[i] = String(object.terms[i]);
                            }
                            if (object.count != null)
                                message.count = object.count | 0;
                            if (object.score != null)
                                message.score = Number(object.score);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Score message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @static
                         * @param {sajari.engine.store.record.KeyScores.Score} message Score
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Score.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.terms = [];
                            if (options.defaults) {
                                object.count = 0;
                                object.score = 0;
                            }
                            if (message.terms && message.terms.length) {
                                object.terms = [];
                                for (var j = 0; j < message.terms.length; ++j)
                                    object.terms[j] = message.terms[j];
                            }
                            if (message.count != null && message.hasOwnProperty("count"))
                                object.count = message.count;
                            if (message.score != null && message.hasOwnProperty("score"))
                                object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                            return object;
                        };

                        /**
                         * Converts this Score to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.store.record.KeyScores.Score
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Score.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Score;
                    })();

                    return KeyScores;
                })();

                return record;
            })();

            store.term = (function() {

                /**
                 * Namespace term.
                 * @memberof sajari.engine.store
                 * @namespace
                 */
                var term = {};

                term.Term = (function() {

                    /**
                     * Constructs a new Term service.
                     * @memberof sajari.engine.store.term
                     * @classdesc Represents a Term
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Term(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Term.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Term;

                    /**
                     * Creates new Term service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.engine.store.term.Term
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Term} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Term.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.engine.store.term.Term#get}.
                     * @memberof sajari.engine.store.term.Term
                     * @typedef GetCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.store.term.Infos} [response] Infos
                     */

                    /**
                     * Calls Get.
                     * @function get
                     * @memberof sajari.engine.store.term.Term
                     * @instance
                     * @param {sajari.engine.store.term.IValues} request Values message or plain object
                     * @param {sajari.engine.store.term.Term.GetCallback} callback Node-style callback called with the error, if any, and Infos
                     * @returns {undefined}
                     * @variation 1
                     */
                    Term.prototype.get = function get(request, callback) {
                        return this.rpcCall(get, $root.sajari.engine.store.term.Values, $root.sajari.engine.store.term.Infos, request, callback);
                    };

                    /**
                     * Calls Get.
                     * @function get
                     * @memberof sajari.engine.store.term.Term
                     * @instance
                     * @param {sajari.engine.store.term.IValues} request Values message or plain object
                     * @returns {Promise<sajari.engine.store.term.Infos>} Promise
                     * @variation 2
                     */

                    return Term;
                })();

                term.Values = (function() {

                    /**
                     * Properties of a Values.
                     * @memberof sajari.engine.store.term
                     * @interface IValues
                     * @property {Array.<string>|null} [values] Values values
                     */

                    /**
                     * Constructs a new Values.
                     * @memberof sajari.engine.store.term
                     * @classdesc Represents a Values.
                     * @implements IValues
                     * @constructor
                     * @param {sajari.engine.store.term.IValues=} [properties] Properties to set
                     */
                    function Values(properties) {
                        this.values = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Values values.
                     * @member {Array.<string>} values
                     * @memberof sajari.engine.store.term.Values
                     * @instance
                     */
                    Values.prototype.values = $util.emptyArray;

                    /**
                     * Creates a new Values instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {sajari.engine.store.term.IValues=} [properties] Properties to set
                     * @returns {sajari.engine.store.term.Values} Values instance
                     */
                    Values.create = function create(properties) {
                        return new Values(properties);
                    };

                    /**
                     * Encodes the specified Values message. Does not implicitly {@link sajari.engine.store.term.Values.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {sajari.engine.store.term.IValues} message Values message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Values.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.values != null && message.values.length)
                            for (var i = 0; i < message.values.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.values[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Values message, length delimited. Does not implicitly {@link sajari.engine.store.term.Values.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {sajari.engine.store.term.IValues} message Values message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Values.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Values message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.term.Values} Values
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Values.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.term.Values();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.values && message.values.length))
                                    message.values = [];
                                message.values.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Values message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.term.Values} Values
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Values.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Values message.
                     * @function verify
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Values.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!Array.isArray(message.values))
                                return "values: array expected";
                            for (var i = 0; i < message.values.length; ++i)
                                if (!$util.isString(message.values[i]))
                                    return "values: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Values message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.term.Values} Values
                     */
                    Values.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.term.Values)
                            return object;
                        var message = new $root.sajari.engine.store.term.Values();
                        if (object.values) {
                            if (!Array.isArray(object.values))
                                throw TypeError(".sajari.engine.store.term.Values.values: array expected");
                            message.values = [];
                            for (var i = 0; i < object.values.length; ++i)
                                message.values[i] = String(object.values[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Values message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.term.Values
                     * @static
                     * @param {sajari.engine.store.term.Values} message Values
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Values.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.values = [];
                        if (message.values && message.values.length) {
                            object.values = [];
                            for (var j = 0; j < message.values.length; ++j)
                                object.values[j] = message.values[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Values to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.term.Values
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Values.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Values;
                })();

                term.Infos = (function() {

                    /**
                     * Properties of an Infos.
                     * @memberof sajari.engine.store.term
                     * @interface IInfos
                     * @property {Array.<sajari.engine.store.term.Infos.IInfo>|null} [infos] Infos infos
                     */

                    /**
                     * Constructs a new Infos.
                     * @memberof sajari.engine.store.term
                     * @classdesc Represents an Infos.
                     * @implements IInfos
                     * @constructor
                     * @param {sajari.engine.store.term.IInfos=} [properties] Properties to set
                     */
                    function Infos(properties) {
                        this.infos = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Infos infos.
                     * @member {Array.<sajari.engine.store.term.Infos.IInfo>} infos
                     * @memberof sajari.engine.store.term.Infos
                     * @instance
                     */
                    Infos.prototype.infos = $util.emptyArray;

                    /**
                     * Creates a new Infos instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {sajari.engine.store.term.IInfos=} [properties] Properties to set
                     * @returns {sajari.engine.store.term.Infos} Infos instance
                     */
                    Infos.create = function create(properties) {
                        return new Infos(properties);
                    };

                    /**
                     * Encodes the specified Infos message. Does not implicitly {@link sajari.engine.store.term.Infos.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {sajari.engine.store.term.IInfos} message Infos message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Infos.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.infos != null && message.infos.length)
                            for (var i = 0; i < message.infos.length; ++i)
                                $root.sajari.engine.store.term.Infos.Info.encode(message.infos[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Infos message, length delimited. Does not implicitly {@link sajari.engine.store.term.Infos.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {sajari.engine.store.term.IInfos} message Infos message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Infos.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Infos message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.store.term.Infos} Infos
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Infos.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.term.Infos();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.infos && message.infos.length))
                                    message.infos = [];
                                message.infos.push($root.sajari.engine.store.term.Infos.Info.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Infos message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.store.term.Infos} Infos
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Infos.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Infos message.
                     * @function verify
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Infos.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.infos != null && message.hasOwnProperty("infos")) {
                            if (!Array.isArray(message.infos))
                                return "infos: array expected";
                            for (var i = 0; i < message.infos.length; ++i) {
                                var error = $root.sajari.engine.store.term.Infos.Info.verify(message.infos[i]);
                                if (error)
                                    return "infos." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an Infos message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.store.term.Infos} Infos
                     */
                    Infos.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.store.term.Infos)
                            return object;
                        var message = new $root.sajari.engine.store.term.Infos();
                        if (object.infos) {
                            if (!Array.isArray(object.infos))
                                throw TypeError(".sajari.engine.store.term.Infos.infos: array expected");
                            message.infos = [];
                            for (var i = 0; i < object.infos.length; ++i) {
                                if (typeof object.infos[i] !== "object")
                                    throw TypeError(".sajari.engine.store.term.Infos.infos: object expected");
                                message.infos[i] = $root.sajari.engine.store.term.Infos.Info.fromObject(object.infos[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an Infos message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.store.term.Infos
                     * @static
                     * @param {sajari.engine.store.term.Infos} message Infos
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Infos.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.infos = [];
                        if (message.infos && message.infos.length) {
                            object.infos = [];
                            for (var j = 0; j < message.infos.length; ++j)
                                object.infos[j] = $root.sajari.engine.store.term.Infos.Info.toObject(message.infos[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this Infos to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.store.term.Infos
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Infos.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Infos.Info = (function() {

                        /**
                         * Properties of an Info.
                         * @memberof sajari.engine.store.term.Infos
                         * @interface IInfo
                         * @property {number|null} [id] Info id
                         * @property {string|null} [value] Info value
                         * @property {number|null} [numDocs] Info numDocs
                         * @property {number|null} [numWords] Info numWords
                         * @property {number|null} [hardcoded] Info hardcoded
                         * @property {number|null} [infogain] Info infogain
                         * @property {number|null} [pos] Info pos
                         * @property {number|null} [neg] Info neg
                         */

                        /**
                         * Constructs a new Info.
                         * @memberof sajari.engine.store.term.Infos
                         * @classdesc Represents an Info.
                         * @implements IInfo
                         * @constructor
                         * @param {sajari.engine.store.term.Infos.IInfo=} [properties] Properties to set
                         */
                        function Info(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Info id.
                         * @member {number} id
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.id = 0;

                        /**
                         * Info value.
                         * @member {string} value
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.value = "";

                        /**
                         * Info numDocs.
                         * @member {number} numDocs
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.numDocs = 0;

                        /**
                         * Info numWords.
                         * @member {number} numWords
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.numWords = 0;

                        /**
                         * Info hardcoded.
                         * @member {number} hardcoded
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.hardcoded = 0;

                        /**
                         * Info infogain.
                         * @member {number} infogain
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.infogain = 0;

                        /**
                         * Info pos.
                         * @member {number} pos
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.pos = 0;

                        /**
                         * Info neg.
                         * @member {number} neg
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         */
                        Info.prototype.neg = 0;

                        /**
                         * Creates a new Info instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {sajari.engine.store.term.Infos.IInfo=} [properties] Properties to set
                         * @returns {sajari.engine.store.term.Infos.Info} Info instance
                         */
                        Info.create = function create(properties) {
                            return new Info(properties);
                        };

                        /**
                         * Encodes the specified Info message. Does not implicitly {@link sajari.engine.store.term.Infos.Info.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {sajari.engine.store.term.Infos.IInfo} message Info message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Info.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && message.hasOwnProperty("id"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                            if (message.numDocs != null && message.hasOwnProperty("numDocs"))
                                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.numDocs);
                            if (message.numWords != null && message.hasOwnProperty("numWords"))
                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.numWords);
                            if (message.hardcoded != null && message.hasOwnProperty("hardcoded"))
                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.hardcoded);
                            if (message.infogain != null && message.hasOwnProperty("infogain"))
                                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.infogain);
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.pos);
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.neg);
                            return writer;
                        };

                        /**
                         * Encodes the specified Info message, length delimited. Does not implicitly {@link sajari.engine.store.term.Infos.Info.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {sajari.engine.store.term.Infos.IInfo} message Info message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Info.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Info message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.store.term.Infos.Info} Info
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Info.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.store.term.Infos.Info();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.uint32();
                                    break;
                                case 2:
                                    message.value = reader.string();
                                    break;
                                case 3:
                                    message.numDocs = reader.uint32();
                                    break;
                                case 4:
                                    message.numWords = reader.uint32();
                                    break;
                                case 5:
                                    message.hardcoded = reader.uint32();
                                    break;
                                case 6:
                                    message.infogain = reader.uint32();
                                    break;
                                case 7:
                                    message.pos = reader.uint32();
                                    break;
                                case 8:
                                    message.neg = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Info message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.store.term.Infos.Info} Info
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Info.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Info message.
                         * @function verify
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Info.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isInteger(message.id))
                                    return "id: integer expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            if (message.numDocs != null && message.hasOwnProperty("numDocs"))
                                if (!$util.isInteger(message.numDocs))
                                    return "numDocs: integer expected";
                            if (message.numWords != null && message.hasOwnProperty("numWords"))
                                if (!$util.isInteger(message.numWords))
                                    return "numWords: integer expected";
                            if (message.hardcoded != null && message.hasOwnProperty("hardcoded"))
                                if (!$util.isInteger(message.hardcoded))
                                    return "hardcoded: integer expected";
                            if (message.infogain != null && message.hasOwnProperty("infogain"))
                                if (!$util.isInteger(message.infogain))
                                    return "infogain: integer expected";
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                if (!$util.isInteger(message.pos))
                                    return "pos: integer expected";
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                if (!$util.isInteger(message.neg))
                                    return "neg: integer expected";
                            return null;
                        };

                        /**
                         * Creates an Info message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.store.term.Infos.Info} Info
                         */
                        Info.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.store.term.Infos.Info)
                                return object;
                            var message = new $root.sajari.engine.store.term.Infos.Info();
                            if (object.id != null)
                                message.id = object.id >>> 0;
                            if (object.value != null)
                                message.value = String(object.value);
                            if (object.numDocs != null)
                                message.numDocs = object.numDocs >>> 0;
                            if (object.numWords != null)
                                message.numWords = object.numWords >>> 0;
                            if (object.hardcoded != null)
                                message.hardcoded = object.hardcoded >>> 0;
                            if (object.infogain != null)
                                message.infogain = object.infogain >>> 0;
                            if (object.pos != null)
                                message.pos = object.pos >>> 0;
                            if (object.neg != null)
                                message.neg = object.neg >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from an Info message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @static
                         * @param {sajari.engine.store.term.Infos.Info} message Info
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Info.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.id = 0;
                                object.value = "";
                                object.numDocs = 0;
                                object.numWords = 0;
                                object.hardcoded = 0;
                                object.infogain = 0;
                                object.pos = 0;
                                object.neg = 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            if (message.numDocs != null && message.hasOwnProperty("numDocs"))
                                object.numDocs = message.numDocs;
                            if (message.numWords != null && message.hasOwnProperty("numWords"))
                                object.numWords = message.numWords;
                            if (message.hardcoded != null && message.hasOwnProperty("hardcoded"))
                                object.hardcoded = message.hardcoded;
                            if (message.infogain != null && message.hasOwnProperty("infogain"))
                                object.infogain = message.infogain;
                            if (message.pos != null && message.hasOwnProperty("pos"))
                                object.pos = message.pos;
                            if (message.neg != null && message.hasOwnProperty("neg"))
                                object.neg = message.neg;
                            return object;
                        };

                        /**
                         * Converts this Info to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.store.term.Infos.Info
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Info.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Info;
                    })();

                    return Infos;
                })();

                return term;
            })();

            return store;
        })();

        engine.Key = (function() {

            /**
             * Properties of a Key.
             * @memberof sajari.engine
             * @interface IKey
             * @property {string|null} [field] Key field
             * @property {sajari.engine.IValue|null} [value] Key value
             */

            /**
             * Constructs a new Key.
             * @memberof sajari.engine
             * @classdesc Represents a Key.
             * @implements IKey
             * @constructor
             * @param {sajari.engine.IKey=} [properties] Properties to set
             */
            function Key(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Key field.
             * @member {string} field
             * @memberof sajari.engine.Key
             * @instance
             */
            Key.prototype.field = "";

            /**
             * Key value.
             * @member {sajari.engine.IValue|null|undefined} value
             * @memberof sajari.engine.Key
             * @instance
             */
            Key.prototype.value = null;

            /**
             * Creates a new Key instance using the specified properties.
             * @function create
             * @memberof sajari.engine.Key
             * @static
             * @param {sajari.engine.IKey=} [properties] Properties to set
             * @returns {sajari.engine.Key} Key instance
             */
            Key.create = function create(properties) {
                return new Key(properties);
            };

            /**
             * Encodes the specified Key message. Does not implicitly {@link sajari.engine.Key.verify|verify} messages.
             * @function encode
             * @memberof sajari.engine.Key
             * @static
             * @param {sajari.engine.IKey} message Key message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Key.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.field != null && message.hasOwnProperty("field"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                if (message.value != null && message.hasOwnProperty("value"))
                    $root.sajari.engine.Value.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Key message, length delimited. Does not implicitly {@link sajari.engine.Key.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sajari.engine.Key
             * @static
             * @param {sajari.engine.IKey} message Key message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Key.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Key message from the specified reader or buffer.
             * @function decode
             * @memberof sajari.engine.Key
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sajari.engine.Key} Key
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Key.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.Key();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.field = reader.string();
                        break;
                    case 2:
                        message.value = $root.sajari.engine.Value.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Key message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sajari.engine.Key
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sajari.engine.Key} Key
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Key.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Key message.
             * @function verify
             * @memberof sajari.engine.Key
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Key.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.field != null && message.hasOwnProperty("field"))
                    if (!$util.isString(message.field))
                        return "field: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    var error = $root.sajari.engine.Value.verify(message.value);
                    if (error)
                        return "value." + error;
                }
                return null;
            };

            /**
             * Creates a Key message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sajari.engine.Key
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sajari.engine.Key} Key
             */
            Key.fromObject = function fromObject(object) {
                if (object instanceof $root.sajari.engine.Key)
                    return object;
                var message = new $root.sajari.engine.Key();
                if (object.field != null)
                    message.field = String(object.field);
                if (object.value != null) {
                    if (typeof object.value !== "object")
                        throw TypeError(".sajari.engine.Key.value: object expected");
                    message.value = $root.sajari.engine.Value.fromObject(object.value);
                }
                return message;
            };

            /**
             * Creates a plain object from a Key message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sajari.engine.Key
             * @static
             * @param {sajari.engine.Key} message Key
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Key.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.field = "";
                    object.value = null;
                }
                if (message.field != null && message.hasOwnProperty("field"))
                    object.field = message.field;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = $root.sajari.engine.Value.toObject(message.value, options);
                return object;
            };

            /**
             * Converts this Key to JSON.
             * @function toJSON
             * @memberof sajari.engine.Key
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Key.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Key;
        })();

        engine.schema = (function() {

            /**
             * Namespace schema.
             * @memberof sajari.engine
             * @namespace
             */
            var schema = {};

            schema.Schema = (function() {

                /**
                 * Constructs a new Schema service.
                 * @memberof sajari.engine.schema
                 * @classdesc Represents a Schema
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Schema(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Schema.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Schema;

                /**
                 * Creates new Schema service using the specified rpc implementation.
                 * @function create
                 * @memberof sajari.engine.schema.Schema
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Schema} RPC service. Useful where requests and/or responses are streamed.
                 */
                Schema.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link sajari.engine.schema.Schema#getFields}.
                 * @memberof sajari.engine.schema.Schema
                 * @typedef GetFieldsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {sajari.engine.schema.Fields} [response] Fields
                 */

                /**
                 * Calls GetFields.
                 * @function getFields
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.rpc.IEmpty} request Empty message or plain object
                 * @param {sajari.engine.schema.Schema.GetFieldsCallback} callback Node-style callback called with the error, if any, and Fields
                 * @returns {undefined}
                 * @variation 1
                 */
                Schema.prototype.getFields = function getFields(request, callback) {
                    return this.rpcCall(getFields, $root.sajari.rpc.Empty, $root.sajari.engine.schema.Fields, request, callback);
                };

                /**
                 * Calls GetFields.
                 * @function getFields
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.rpc.IEmpty} request Empty message or plain object
                 * @returns {Promise<sajari.engine.schema.Fields>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link sajari.engine.schema.Schema#addFields}.
                 * @memberof sajari.engine.schema.Schema
                 * @typedef AddFieldsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {sajari.engine.schema.Response} [response] Response
                 */

                /**
                 * Calls AddFields.
                 * @function addFields
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.engine.schema.IFields} request Fields message or plain object
                 * @param {sajari.engine.schema.Schema.AddFieldsCallback} callback Node-style callback called with the error, if any, and Response
                 * @returns {undefined}
                 * @variation 1
                 */
                Schema.prototype.addFields = function addFields(request, callback) {
                    return this.rpcCall(addFields, $root.sajari.engine.schema.Fields, $root.sajari.engine.schema.Response, request, callback);
                };

                /**
                 * Calls AddFields.
                 * @function addFields
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.engine.schema.IFields} request Fields message or plain object
                 * @returns {Promise<sajari.engine.schema.Response>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link sajari.engine.schema.Schema#mutateField}.
                 * @memberof sajari.engine.schema.Schema
                 * @typedef MutateFieldCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {sajari.engine.schema.Response} [response] Response
                 */

                /**
                 * Calls MutateField.
                 * @function mutateField
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.engine.schema.IMutateFieldRequest} request MutateFieldRequest message or plain object
                 * @param {sajari.engine.schema.Schema.MutateFieldCallback} callback Node-style callback called with the error, if any, and Response
                 * @returns {undefined}
                 * @variation 1
                 */
                Schema.prototype.mutateField = function mutateField(request, callback) {
                    return this.rpcCall(mutateField, $root.sajari.engine.schema.MutateFieldRequest, $root.sajari.engine.schema.Response, request, callback);
                };

                /**
                 * Calls MutateField.
                 * @function mutateField
                 * @memberof sajari.engine.schema.Schema
                 * @instance
                 * @param {sajari.engine.schema.IMutateFieldRequest} request MutateFieldRequest message or plain object
                 * @returns {Promise<sajari.engine.schema.Response>} Promise
                 * @variation 2
                 */

                return Schema;
            })();

            schema.Fields = (function() {

                /**
                 * Properties of a Fields.
                 * @memberof sajari.engine.schema
                 * @interface IFields
                 * @property {Array.<sajari.engine.schema.IField>|null} [fields] Fields fields
                 */

                /**
                 * Constructs a new Fields.
                 * @memberof sajari.engine.schema
                 * @classdesc Represents a Fields.
                 * @implements IFields
                 * @constructor
                 * @param {sajari.engine.schema.IFields=} [properties] Properties to set
                 */
                function Fields(properties) {
                    this.fields = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Fields fields.
                 * @member {Array.<sajari.engine.schema.IField>} fields
                 * @memberof sajari.engine.schema.Fields
                 * @instance
                 */
                Fields.prototype.fields = $util.emptyArray;

                /**
                 * Creates a new Fields instance using the specified properties.
                 * @function create
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {sajari.engine.schema.IFields=} [properties] Properties to set
                 * @returns {sajari.engine.schema.Fields} Fields instance
                 */
                Fields.create = function create(properties) {
                    return new Fields(properties);
                };

                /**
                 * Encodes the specified Fields message. Does not implicitly {@link sajari.engine.schema.Fields.verify|verify} messages.
                 * @function encode
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {sajari.engine.schema.IFields} message Fields message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fields.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fields != null && message.fields.length)
                        for (var i = 0; i < message.fields.length; ++i)
                            $root.sajari.engine.schema.Field.encode(message.fields[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Fields message, length delimited. Does not implicitly {@link sajari.engine.schema.Fields.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {sajari.engine.schema.IFields} message Fields message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fields.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Fields message from the specified reader or buffer.
                 * @function decode
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sajari.engine.schema.Fields} Fields
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fields.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.schema.Fields();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.fields && message.fields.length))
                                message.fields = [];
                            message.fields.push($root.sajari.engine.schema.Field.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Fields message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sajari.engine.schema.Fields} Fields
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fields.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Fields message.
                 * @function verify
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Fields.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fields != null && message.hasOwnProperty("fields")) {
                        if (!Array.isArray(message.fields))
                            return "fields: array expected";
                        for (var i = 0; i < message.fields.length; ++i) {
                            var error = $root.sajari.engine.schema.Field.verify(message.fields[i]);
                            if (error)
                                return "fields." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Fields message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sajari.engine.schema.Fields} Fields
                 */
                Fields.fromObject = function fromObject(object) {
                    if (object instanceof $root.sajari.engine.schema.Fields)
                        return object;
                    var message = new $root.sajari.engine.schema.Fields();
                    if (object.fields) {
                        if (!Array.isArray(object.fields))
                            throw TypeError(".sajari.engine.schema.Fields.fields: array expected");
                        message.fields = [];
                        for (var i = 0; i < object.fields.length; ++i) {
                            if (typeof object.fields[i] !== "object")
                                throw TypeError(".sajari.engine.schema.Fields.fields: object expected");
                            message.fields[i] = $root.sajari.engine.schema.Field.fromObject(object.fields[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Fields message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sajari.engine.schema.Fields
                 * @static
                 * @param {sajari.engine.schema.Fields} message Fields
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Fields.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fields = [];
                    if (message.fields && message.fields.length) {
                        object.fields = [];
                        for (var j = 0; j < message.fields.length; ++j)
                            object.fields[j] = $root.sajari.engine.schema.Field.toObject(message.fields[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Fields to JSON.
                 * @function toJSON
                 * @memberof sajari.engine.schema.Fields
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Fields.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Fields;
            })();

            schema.Field = (function() {

                /**
                 * Properties of a Field.
                 * @memberof sajari.engine.schema
                 * @interface IField
                 * @property {number|null} [id] Field id
                 * @property {string|null} [name] Field name
                 * @property {string|null} [description] Field description
                 * @property {sajari.engine.schema.Field.Type|null} [type] Field type
                 * @property {boolean|null} [repeated] Field repeated
                 * @property {boolean|null} [required] Field required
                 * @property {boolean|null} [store] Field store
                 * @property {boolean|null} [indexed] Field indexed
                 * @property {boolean|null} [unique] Field unique
                 */

                /**
                 * Constructs a new Field.
                 * @memberof sajari.engine.schema
                 * @classdesc Represents a Field.
                 * @implements IField
                 * @constructor
                 * @param {sajari.engine.schema.IField=} [properties] Properties to set
                 */
                function Field(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Field id.
                 * @member {number} id
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.id = 0;

                /**
                 * Field name.
                 * @member {string} name
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.name = "";

                /**
                 * Field description.
                 * @member {string} description
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.description = "";

                /**
                 * Field type.
                 * @member {sajari.engine.schema.Field.Type} type
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.type = 0;

                /**
                 * Field repeated.
                 * @member {boolean} repeated
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.repeated = false;

                /**
                 * Field required.
                 * @member {boolean} required
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.required = false;

                /**
                 * Field store.
                 * @member {boolean} store
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.store = false;

                /**
                 * Field indexed.
                 * @member {boolean} indexed
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.indexed = false;

                /**
                 * Field unique.
                 * @member {boolean} unique
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 */
                Field.prototype.unique = false;

                /**
                 * Creates a new Field instance using the specified properties.
                 * @function create
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {sajari.engine.schema.IField=} [properties] Properties to set
                 * @returns {sajari.engine.schema.Field} Field instance
                 */
                Field.create = function create(properties) {
                    return new Field(properties);
                };

                /**
                 * Encodes the specified Field message. Does not implicitly {@link sajari.engine.schema.Field.verify|verify} messages.
                 * @function encode
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {sajari.engine.schema.IField} message Field message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Field.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && message.hasOwnProperty("id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                    if (message.description != null && message.hasOwnProperty("description"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                    if (message.type != null && message.hasOwnProperty("type"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
                    if (message.repeated != null && message.hasOwnProperty("repeated"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.repeated);
                    if (message.required != null && message.hasOwnProperty("required"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.required);
                    if (message.store != null && message.hasOwnProperty("store"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.store);
                    if (message.indexed != null && message.hasOwnProperty("indexed"))
                        writer.uint32(/* id 8, wireType 0 =*/64).bool(message.indexed);
                    if (message.unique != null && message.hasOwnProperty("unique"))
                        writer.uint32(/* id 9, wireType 0 =*/72).bool(message.unique);
                    return writer;
                };

                /**
                 * Encodes the specified Field message, length delimited. Does not implicitly {@link sajari.engine.schema.Field.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {sajari.engine.schema.IField} message Field message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Field.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Field message from the specified reader or buffer.
                 * @function decode
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sajari.engine.schema.Field} Field
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Field.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.schema.Field();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint32();
                            break;
                        case 2:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.description = reader.string();
                            break;
                        case 4:
                            message.type = reader.int32();
                            break;
                        case 5:
                            message.repeated = reader.bool();
                            break;
                        case 6:
                            message.required = reader.bool();
                            break;
                        case 7:
                            message.store = reader.bool();
                            break;
                        case 8:
                            message.indexed = reader.bool();
                            break;
                        case 9:
                            message.unique = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Field message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sajari.engine.schema.Field} Field
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Field.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Field message.
                 * @function verify
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Field.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id))
                            return "id: integer expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.repeated != null && message.hasOwnProperty("repeated"))
                        if (typeof message.repeated !== "boolean")
                            return "repeated: boolean expected";
                    if (message.required != null && message.hasOwnProperty("required"))
                        if (typeof message.required !== "boolean")
                            return "required: boolean expected";
                    if (message.store != null && message.hasOwnProperty("store"))
                        if (typeof message.store !== "boolean")
                            return "store: boolean expected";
                    if (message.indexed != null && message.hasOwnProperty("indexed"))
                        if (typeof message.indexed !== "boolean")
                            return "indexed: boolean expected";
                    if (message.unique != null && message.hasOwnProperty("unique"))
                        if (typeof message.unique !== "boolean")
                            return "unique: boolean expected";
                    return null;
                };

                /**
                 * Creates a Field message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sajari.engine.schema.Field} Field
                 */
                Field.fromObject = function fromObject(object) {
                    if (object instanceof $root.sajari.engine.schema.Field)
                        return object;
                    var message = new $root.sajari.engine.schema.Field();
                    if (object.id != null)
                        message.id = object.id >>> 0;
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.description != null)
                        message.description = String(object.description);
                    switch (object.type) {
                    case "STRING":
                    case 0:
                        message.type = 0;
                        break;
                    case "INTEGER":
                    case 1:
                        message.type = 1;
                        break;
                    case "FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "BOOLEAN":
                    case 3:
                        message.type = 3;
                        break;
                    case "TIMESTAMP":
                    case 4:
                        message.type = 4;
                        break;
                    }
                    if (object.repeated != null)
                        message.repeated = Boolean(object.repeated);
                    if (object.required != null)
                        message.required = Boolean(object.required);
                    if (object.store != null)
                        message.store = Boolean(object.store);
                    if (object.indexed != null)
                        message.indexed = Boolean(object.indexed);
                    if (object.unique != null)
                        message.unique = Boolean(object.unique);
                    return message;
                };

                /**
                 * Creates a plain object from a Field message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sajari.engine.schema.Field
                 * @static
                 * @param {sajari.engine.schema.Field} message Field
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Field.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.id = 0;
                        object.name = "";
                        object.description = "";
                        object.type = options.enums === String ? "STRING" : 0;
                        object.repeated = false;
                        object.required = false;
                        object.store = false;
                        object.indexed = false;
                        object.unique = false;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.sajari.engine.schema.Field.Type[message.type] : message.type;
                    if (message.repeated != null && message.hasOwnProperty("repeated"))
                        object.repeated = message.repeated;
                    if (message.required != null && message.hasOwnProperty("required"))
                        object.required = message.required;
                    if (message.store != null && message.hasOwnProperty("store"))
                        object.store = message.store;
                    if (message.indexed != null && message.hasOwnProperty("indexed"))
                        object.indexed = message.indexed;
                    if (message.unique != null && message.hasOwnProperty("unique"))
                        object.unique = message.unique;
                    return object;
                };

                /**
                 * Converts this Field to JSON.
                 * @function toJSON
                 * @memberof sajari.engine.schema.Field
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Field.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Type enum.
                 * @name sajari.engine.schema.Field.Type
                 * @enum {string}
                 * @property {number} STRING=0 STRING value
                 * @property {number} INTEGER=1 INTEGER value
                 * @property {number} FLOAT=2 FLOAT value
                 * @property {number} BOOLEAN=3 BOOLEAN value
                 * @property {number} TIMESTAMP=4 TIMESTAMP value
                 */
                Field.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "INTEGER"] = 1;
                    values[valuesById[2] = "FLOAT"] = 2;
                    values[valuesById[3] = "BOOLEAN"] = 3;
                    values[valuesById[4] = "TIMESTAMP"] = 4;
                    return values;
                })();

                return Field;
            })();

            schema.Response = (function() {

                /**
                 * Properties of a Response.
                 * @memberof sajari.engine.schema
                 * @interface IResponse
                 * @property {Array.<sajari.rpc.IStatus>|null} [status] Response status
                 */

                /**
                 * Constructs a new Response.
                 * @memberof sajari.engine.schema
                 * @classdesc Represents a Response.
                 * @implements IResponse
                 * @constructor
                 * @param {sajari.engine.schema.IResponse=} [properties] Properties to set
                 */
                function Response(properties) {
                    this.status = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Response status.
                 * @member {Array.<sajari.rpc.IStatus>} status
                 * @memberof sajari.engine.schema.Response
                 * @instance
                 */
                Response.prototype.status = $util.emptyArray;

                /**
                 * Creates a new Response instance using the specified properties.
                 * @function create
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {sajari.engine.schema.IResponse=} [properties] Properties to set
                 * @returns {sajari.engine.schema.Response} Response instance
                 */
                Response.create = function create(properties) {
                    return new Response(properties);
                };

                /**
                 * Encodes the specified Response message. Does not implicitly {@link sajari.engine.schema.Response.verify|verify} messages.
                 * @function encode
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {sajari.engine.schema.IResponse} message Response message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Response.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.status != null && message.status.length)
                        for (var i = 0; i < message.status.length; ++i)
                            $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified Response message, length delimited. Does not implicitly {@link sajari.engine.schema.Response.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {sajari.engine.schema.IResponse} message Response message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Response.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Response message from the specified reader or buffer.
                 * @function decode
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sajari.engine.schema.Response} Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Response.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.schema.Response();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.status && message.status.length))
                                message.status = [];
                            message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Response message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sajari.engine.schema.Response} Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Response.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Response message.
                 * @function verify
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Response.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.status != null && message.hasOwnProperty("status")) {
                        if (!Array.isArray(message.status))
                            return "status: array expected";
                        for (var i = 0; i < message.status.length; ++i) {
                            var error = $root.sajari.rpc.Status.verify(message.status[i]);
                            if (error)
                                return "status." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a Response message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sajari.engine.schema.Response} Response
                 */
                Response.fromObject = function fromObject(object) {
                    if (object instanceof $root.sajari.engine.schema.Response)
                        return object;
                    var message = new $root.sajari.engine.schema.Response();
                    if (object.status) {
                        if (!Array.isArray(object.status))
                            throw TypeError(".sajari.engine.schema.Response.status: array expected");
                        message.status = [];
                        for (var i = 0; i < object.status.length; ++i) {
                            if (typeof object.status[i] !== "object")
                                throw TypeError(".sajari.engine.schema.Response.status: object expected");
                            message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Response message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sajari.engine.schema.Response
                 * @static
                 * @param {sajari.engine.schema.Response} message Response
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Response.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.status = [];
                    if (message.status && message.status.length) {
                        object.status = [];
                        for (var j = 0; j < message.status.length; ++j)
                            object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this Response to JSON.
                 * @function toJSON
                 * @memberof sajari.engine.schema.Response
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Response.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Response;
            })();

            schema.MutateFieldRequest = (function() {

                /**
                 * Properties of a MutateFieldRequest.
                 * @memberof sajari.engine.schema
                 * @interface IMutateFieldRequest
                 * @property {string|null} [name] MutateFieldRequest name
                 * @property {Array.<sajari.engine.schema.MutateFieldRequest.IMutation>|null} [mutations] MutateFieldRequest mutations
                 */

                /**
                 * Constructs a new MutateFieldRequest.
                 * @memberof sajari.engine.schema
                 * @classdesc Represents a MutateFieldRequest.
                 * @implements IMutateFieldRequest
                 * @constructor
                 * @param {sajari.engine.schema.IMutateFieldRequest=} [properties] Properties to set
                 */
                function MutateFieldRequest(properties) {
                    this.mutations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * MutateFieldRequest name.
                 * @member {string} name
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @instance
                 */
                MutateFieldRequest.prototype.name = "";

                /**
                 * MutateFieldRequest mutations.
                 * @member {Array.<sajari.engine.schema.MutateFieldRequest.IMutation>} mutations
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @instance
                 */
                MutateFieldRequest.prototype.mutations = $util.emptyArray;

                /**
                 * Creates a new MutateFieldRequest instance using the specified properties.
                 * @function create
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {sajari.engine.schema.IMutateFieldRequest=} [properties] Properties to set
                 * @returns {sajari.engine.schema.MutateFieldRequest} MutateFieldRequest instance
                 */
                MutateFieldRequest.create = function create(properties) {
                    return new MutateFieldRequest(properties);
                };

                /**
                 * Encodes the specified MutateFieldRequest message. Does not implicitly {@link sajari.engine.schema.MutateFieldRequest.verify|verify} messages.
                 * @function encode
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {sajari.engine.schema.IMutateFieldRequest} message MutateFieldRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MutateFieldRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.hasOwnProperty("name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.mutations != null && message.mutations.length)
                        for (var i = 0; i < message.mutations.length; ++i)
                            $root.sajari.engine.schema.MutateFieldRequest.Mutation.encode(message.mutations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified MutateFieldRequest message, length delimited. Does not implicitly {@link sajari.engine.schema.MutateFieldRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {sajari.engine.schema.IMutateFieldRequest} message MutateFieldRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MutateFieldRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a MutateFieldRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {sajari.engine.schema.MutateFieldRequest} MutateFieldRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MutateFieldRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.schema.MutateFieldRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.mutations && message.mutations.length))
                                message.mutations = [];
                            message.mutations.push($root.sajari.engine.schema.MutateFieldRequest.Mutation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a MutateFieldRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {sajari.engine.schema.MutateFieldRequest} MutateFieldRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MutateFieldRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a MutateFieldRequest message.
                 * @function verify
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MutateFieldRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.mutations != null && message.hasOwnProperty("mutations")) {
                        if (!Array.isArray(message.mutations))
                            return "mutations: array expected";
                        for (var i = 0; i < message.mutations.length; ++i) {
                            var error = $root.sajari.engine.schema.MutateFieldRequest.Mutation.verify(message.mutations[i]);
                            if (error)
                                return "mutations." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a MutateFieldRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {sajari.engine.schema.MutateFieldRequest} MutateFieldRequest
                 */
                MutateFieldRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.sajari.engine.schema.MutateFieldRequest)
                        return object;
                    var message = new $root.sajari.engine.schema.MutateFieldRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.mutations) {
                        if (!Array.isArray(object.mutations))
                            throw TypeError(".sajari.engine.schema.MutateFieldRequest.mutations: array expected");
                        message.mutations = [];
                        for (var i = 0; i < object.mutations.length; ++i) {
                            if (typeof object.mutations[i] !== "object")
                                throw TypeError(".sajari.engine.schema.MutateFieldRequest.mutations: object expected");
                            message.mutations[i] = $root.sajari.engine.schema.MutateFieldRequest.Mutation.fromObject(object.mutations[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a MutateFieldRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @static
                 * @param {sajari.engine.schema.MutateFieldRequest} message MutateFieldRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MutateFieldRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.mutations = [];
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.mutations && message.mutations.length) {
                        object.mutations = [];
                        for (var j = 0; j < message.mutations.length; ++j)
                            object.mutations[j] = $root.sajari.engine.schema.MutateFieldRequest.Mutation.toObject(message.mutations[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this MutateFieldRequest to JSON.
                 * @function toJSON
                 * @memberof sajari.engine.schema.MutateFieldRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MutateFieldRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                MutateFieldRequest.Mutation = (function() {

                    /**
                     * Properties of a Mutation.
                     * @memberof sajari.engine.schema.MutateFieldRequest
                     * @interface IMutation
                     * @property {string|null} [name] Mutation name
                     * @property {string|null} [description] Mutation description
                     * @property {sajari.engine.schema.Field.Type|null} [type] Mutation type
                     * @property {boolean|null} [repeated] Mutation repeated
                     * @property {boolean|null} [required] Mutation required
                     * @property {boolean|null} [unique] Mutation unique
                     * @property {boolean|null} [indexed] Mutation indexed
                     */

                    /**
                     * Constructs a new Mutation.
                     * @memberof sajari.engine.schema.MutateFieldRequest
                     * @classdesc Represents a Mutation.
                     * @implements IMutation
                     * @constructor
                     * @param {sajari.engine.schema.MutateFieldRequest.IMutation=} [properties] Properties to set
                     */
                    function Mutation(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Mutation name.
                     * @member {string} name
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.name = "";

                    /**
                     * Mutation description.
                     * @member {string} description
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.description = "";

                    /**
                     * Mutation type.
                     * @member {sajari.engine.schema.Field.Type} type
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.type = 0;

                    /**
                     * Mutation repeated.
                     * @member {boolean} repeated
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.repeated = false;

                    /**
                     * Mutation required.
                     * @member {boolean} required
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.required = false;

                    /**
                     * Mutation unique.
                     * @member {boolean} unique
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.unique = false;

                    /**
                     * Mutation indexed.
                     * @member {boolean} indexed
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Mutation.prototype.indexed = false;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Mutation mutation.
                     * @member {"name"|"description"|"type"|"repeated"|"required"|"unique"|"indexed"|undefined} mutation
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     */
                    Object.defineProperty(Mutation.prototype, "mutation", {
                        get: $util.oneOfGetter($oneOfFields = ["name", "description", "type", "repeated", "required", "unique", "indexed"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new Mutation instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {sajari.engine.schema.MutateFieldRequest.IMutation=} [properties] Properties to set
                     * @returns {sajari.engine.schema.MutateFieldRequest.Mutation} Mutation instance
                     */
                    Mutation.create = function create(properties) {
                        return new Mutation(properties);
                    };

                    /**
                     * Encodes the specified Mutation message. Does not implicitly {@link sajari.engine.schema.MutateFieldRequest.Mutation.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {sajari.engine.schema.MutateFieldRequest.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && message.hasOwnProperty("name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.description != null && message.hasOwnProperty("description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.type != null && message.hasOwnProperty("type"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                        if (message.repeated != null && message.hasOwnProperty("repeated"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.repeated);
                        if (message.required != null && message.hasOwnProperty("required"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.required);
                        if (message.unique != null && message.hasOwnProperty("unique"))
                            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.unique);
                        if (message.indexed != null && message.hasOwnProperty("indexed"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.indexed);
                        return writer;
                    };

                    /**
                     * Encodes the specified Mutation message, length delimited. Does not implicitly {@link sajari.engine.schema.MutateFieldRequest.Mutation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {sajari.engine.schema.MutateFieldRequest.IMutation} message Mutation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mutation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Mutation message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.schema.MutateFieldRequest.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.schema.MutateFieldRequest.Mutation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.type = reader.int32();
                                break;
                            case 4:
                                message.repeated = reader.bool();
                                break;
                            case 5:
                                message.required = reader.bool();
                                break;
                            case 6:
                                message.unique = reader.bool();
                                break;
                            case 7:
                                message.indexed = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Mutation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.schema.MutateFieldRequest.Mutation} Mutation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mutation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Mutation message.
                     * @function verify
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Mutation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.name != null && message.hasOwnProperty("name")) {
                            properties.mutation = 1;
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        }
                        if (message.description != null && message.hasOwnProperty("description")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        }
                        if (message.type != null && message.hasOwnProperty("type")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            switch (message.type) {
                            default:
                                return "type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        }
                        if (message.repeated != null && message.hasOwnProperty("repeated")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            if (typeof message.repeated !== "boolean")
                                return "repeated: boolean expected";
                        }
                        if (message.required != null && message.hasOwnProperty("required")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            if (typeof message.required !== "boolean")
                                return "required: boolean expected";
                        }
                        if (message.unique != null && message.hasOwnProperty("unique")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            if (typeof message.unique !== "boolean")
                                return "unique: boolean expected";
                        }
                        if (message.indexed != null && message.hasOwnProperty("indexed")) {
                            if (properties.mutation === 1)
                                return "mutation: multiple values";
                            properties.mutation = 1;
                            if (typeof message.indexed !== "boolean")
                                return "indexed: boolean expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Mutation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.schema.MutateFieldRequest.Mutation} Mutation
                     */
                    Mutation.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.schema.MutateFieldRequest.Mutation)
                            return object;
                        var message = new $root.sajari.engine.schema.MutateFieldRequest.Mutation();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.description != null)
                            message.description = String(object.description);
                        switch (object.type) {
                        case "STRING":
                        case 0:
                            message.type = 0;
                            break;
                        case "INTEGER":
                        case 1:
                            message.type = 1;
                            break;
                        case "FLOAT":
                        case 2:
                            message.type = 2;
                            break;
                        case "BOOLEAN":
                        case 3:
                            message.type = 3;
                            break;
                        case "TIMESTAMP":
                        case 4:
                            message.type = 4;
                            break;
                        }
                        if (object.repeated != null)
                            message.repeated = Boolean(object.repeated);
                        if (object.required != null)
                            message.required = Boolean(object.required);
                        if (object.unique != null)
                            message.unique = Boolean(object.unique);
                        if (object.indexed != null)
                            message.indexed = Boolean(object.indexed);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Mutation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @static
                     * @param {sajari.engine.schema.MutateFieldRequest.Mutation} message Mutation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Mutation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.name != null && message.hasOwnProperty("name")) {
                            object.name = message.name;
                            if (options.oneofs)
                                object.mutation = "name";
                        }
                        if (message.description != null && message.hasOwnProperty("description")) {
                            object.description = message.description;
                            if (options.oneofs)
                                object.mutation = "description";
                        }
                        if (message.type != null && message.hasOwnProperty("type")) {
                            object.type = options.enums === String ? $root.sajari.engine.schema.Field.Type[message.type] : message.type;
                            if (options.oneofs)
                                object.mutation = "type";
                        }
                        if (message.repeated != null && message.hasOwnProperty("repeated")) {
                            object.repeated = message.repeated;
                            if (options.oneofs)
                                object.mutation = "repeated";
                        }
                        if (message.required != null && message.hasOwnProperty("required")) {
                            object.required = message.required;
                            if (options.oneofs)
                                object.mutation = "required";
                        }
                        if (message.unique != null && message.hasOwnProperty("unique")) {
                            object.unique = message.unique;
                            if (options.oneofs)
                                object.mutation = "unique";
                        }
                        if (message.indexed != null && message.hasOwnProperty("indexed")) {
                            object.indexed = message.indexed;
                            if (options.oneofs)
                                object.mutation = "indexed";
                        }
                        return object;
                    };

                    /**
                     * Converts this Mutation to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.schema.MutateFieldRequest.Mutation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Mutation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Mutation;
                })();

                return MutateFieldRequest;
            })();

            return schema;
        })();

        engine.query = (function() {

            /**
             * Namespace query.
             * @memberof sajari.engine
             * @namespace
             */
            var query = {};

            query.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof sajari.engine.query
                 * @namespace
                 */
                var v1 = {};

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Creates new Query service using the specified rpc implementation.
                     * @function create
                     * @memberof sajari.engine.query.v1.Query
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {Query} RPC service. Useful where requests and/or responses are streamed.
                     */
                    Query.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };

                    /**
                     * Callback as used by {@link sajari.engine.query.v1.Query#search}.
                     * @memberof sajari.engine.query.v1.Query
                     * @typedef SearchCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.query.v1.SearchResponse} [response] SearchResponse
                     */

                    /**
                     * Calls Search.
                     * @function search
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.ISearchRequest} request SearchRequest message or plain object
                     * @param {sajari.engine.query.v1.Query.SearchCallback} callback Node-style callback called with the error, if any, and SearchResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Query.prototype.search = function search(request, callback) {
                        return this.rpcCall(search, $root.sajari.engine.query.v1.SearchRequest, $root.sajari.engine.query.v1.SearchResponse, request, callback);
                    };

                    /**
                     * Calls Search.
                     * @function search
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.ISearchRequest} request SearchRequest message or plain object
                     * @returns {Promise<sajari.engine.query.v1.SearchResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.query.v1.Query#evaluate}.
                     * @memberof sajari.engine.query.v1.Query
                     * @typedef EvaluateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.query.v1.SearchResponse} [response] SearchResponse
                     */

                    /**
                     * Calls Evaluate.
                     * @function evaluate
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.IEvaluateRequest} request EvaluateRequest message or plain object
                     * @param {sajari.engine.query.v1.Query.EvaluateCallback} callback Node-style callback called with the error, if any, and SearchResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Query.prototype.evaluate = function evaluate(request, callback) {
                        return this.rpcCall(evaluate, $root.sajari.engine.query.v1.EvaluateRequest, $root.sajari.engine.query.v1.SearchResponse, request, callback);
                    };

                    /**
                     * Calls Evaluate.
                     * @function evaluate
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.IEvaluateRequest} request EvaluateRequest message or plain object
                     * @returns {Promise<sajari.engine.query.v1.SearchResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.query.v1.Query#substitute}.
                     * @memberof sajari.engine.query.v1.Query
                     * @typedef SubstituteCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.query.v1.SearchRequest} [response] SearchRequest
                     */

                    /**
                     * Calls Substitute.
                     * @function substitute
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.ISubstituteRequest} request SubstituteRequest message or plain object
                     * @param {sajari.engine.query.v1.Query.SubstituteCallback} callback Node-style callback called with the error, if any, and SearchRequest
                     * @returns {undefined}
                     * @variation 1
                     */
                    Query.prototype.substitute = function substitute(request, callback) {
                        return this.rpcCall(substitute, $root.sajari.engine.query.v1.SubstituteRequest, $root.sajari.engine.query.v1.SearchRequest, request, callback);
                    };

                    /**
                     * Calls Substitute.
                     * @function substitute
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.ISubstituteRequest} request SubstituteRequest message or plain object
                     * @returns {Promise<sajari.engine.query.v1.SearchRequest>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link sajari.engine.query.v1.Query#analyse}.
                     * @memberof sajari.engine.query.v1.Query
                     * @typedef AnalyseCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {sajari.engine.query.v1.AnalyseResponse} [response] AnalyseResponse
                     */

                    /**
                     * Calls Analyse.
                     * @function analyse
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.IAnalyseRequest} request AnalyseRequest message or plain object
                     * @param {sajari.engine.query.v1.Query.AnalyseCallback} callback Node-style callback called with the error, if any, and AnalyseResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Query.prototype.analyse = function analyse(request, callback) {
                        return this.rpcCall(analyse, $root.sajari.engine.query.v1.AnalyseRequest, $root.sajari.engine.query.v1.AnalyseResponse, request, callback);
                    };

                    /**
                     * Calls Analyse.
                     * @function analyse
                     * @memberof sajari.engine.query.v1.Query
                     * @instance
                     * @param {sajari.engine.query.v1.IAnalyseRequest} request AnalyseRequest message or plain object
                     * @returns {Promise<sajari.engine.query.v1.AnalyseResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.SearchRequest = (function() {

                    /**
                     * Properties of a SearchRequest.
                     * @memberof sajari.engine.query.v1
                     * @interface ISearchRequest
                     * @property {sajari.engine.query.v1.IFilter|null} [filter] SearchRequest filter
                     * @property {sajari.engine.query.v1.SearchRequest.IIndexQuery|null} [indexQuery] SearchRequest indexQuery
                     * @property {sajari.engine.query.v1.SearchRequest.IFeatureQuery|null} [featureQuery] SearchRequest featureQuery
                     * @property {number|null} [minScoreThreshold] SearchRequest minScoreThreshold
                     * @property {number|null} [offset] SearchRequest offset
                     * @property {number|null} [limit] SearchRequest limit
                     * @property {Array.<string>|null} [fields] SearchRequest fields
                     * @property {Array.<sajari.engine.query.v1.ISort>|null} [sort] SearchRequest sort
                     * @property {Object.<string,sajari.engine.query.v1.IAggregate>|null} [aggregates] SearchRequest aggregates
                     * @property {Array.<sajari.engine.query.v1.ITransform>|null} [transforms] SearchRequest transforms
                     */

                    /**
                     * Constructs a new SearchRequest.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a SearchRequest.
                     * @implements ISearchRequest
                     * @constructor
                     * @param {sajari.engine.query.v1.ISearchRequest=} [properties] Properties to set
                     */
                    function SearchRequest(properties) {
                        this.fields = [];
                        this.sort = [];
                        this.aggregates = {};
                        this.transforms = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SearchRequest filter.
                     * @member {sajari.engine.query.v1.IFilter|null|undefined} filter
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.filter = null;

                    /**
                     * SearchRequest indexQuery.
                     * @member {sajari.engine.query.v1.SearchRequest.IIndexQuery|null|undefined} indexQuery
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.indexQuery = null;

                    /**
                     * SearchRequest featureQuery.
                     * @member {sajari.engine.query.v1.SearchRequest.IFeatureQuery|null|undefined} featureQuery
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.featureQuery = null;

                    /**
                     * SearchRequest minScoreThreshold.
                     * @member {number} minScoreThreshold
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.minScoreThreshold = 0;

                    /**
                     * SearchRequest offset.
                     * @member {number} offset
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.offset = 0;

                    /**
                     * SearchRequest limit.
                     * @member {number} limit
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.limit = 0;

                    /**
                     * SearchRequest fields.
                     * @member {Array.<string>} fields
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.fields = $util.emptyArray;

                    /**
                     * SearchRequest sort.
                     * @member {Array.<sajari.engine.query.v1.ISort>} sort
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.sort = $util.emptyArray;

                    /**
                     * SearchRequest aggregates.
                     * @member {Object.<string,sajari.engine.query.v1.IAggregate>} aggregates
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.aggregates = $util.emptyObject;

                    /**
                     * SearchRequest transforms.
                     * @member {Array.<sajari.engine.query.v1.ITransform>} transforms
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     */
                    SearchRequest.prototype.transforms = $util.emptyArray;

                    /**
                     * Creates a new SearchRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISearchRequest=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.SearchRequest} SearchRequest instance
                     */
                    SearchRequest.create = function create(properties) {
                        return new SearchRequest(properties);
                    };

                    /**
                     * Encodes the specified SearchRequest message. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISearchRequest} message SearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            $root.sajari.engine.query.v1.Filter.encode(message.filter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.indexQuery != null && message.hasOwnProperty("indexQuery"))
                            $root.sajari.engine.query.v1.SearchRequest.IndexQuery.encode(message.indexQuery, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.featureQuery != null && message.hasOwnProperty("featureQuery"))
                            $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.encode(message.featureQuery, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.offset);
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.limit);
                        if (message.fields != null && message.fields.length)
                            for (var i = 0; i < message.fields.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.fields[i]);
                        if (message.sort != null && message.sort.length)
                            for (var i = 0; i < message.sort.length; ++i)
                                $root.sajari.engine.query.v1.Sort.encode(message.sort[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.aggregates != null && message.hasOwnProperty("aggregates"))
                            for (var keys = Object.keys(message.aggregates), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.query.v1.Aggregate.encode(message.aggregates[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.transforms != null && message.transforms.length)
                            for (var i = 0; i < message.transforms.length; ++i)
                                $root.sajari.engine.query.v1.Transform.encode(message.transforms[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.minScoreThreshold != null && message.hasOwnProperty("minScoreThreshold"))
                            writer.uint32(/* id 10, wireType 1 =*/81).double(message.minScoreThreshold);
                        return writer;
                    };

                    /**
                     * Encodes the specified SearchRequest message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISearchRequest} message SearchRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SearchRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.SearchRequest} SearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SearchRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.filter = $root.sajari.engine.query.v1.Filter.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.indexQuery = $root.sajari.engine.query.v1.SearchRequest.IndexQuery.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.featureQuery = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.minScoreThreshold = reader.double();
                                break;
                            case 4:
                                message.offset = reader.int32();
                                break;
                            case 5:
                                message.limit = reader.int32();
                                break;
                            case 6:
                                if (!(message.fields && message.fields.length))
                                    message.fields = [];
                                message.fields.push(reader.string());
                                break;
                            case 7:
                                if (!(message.sort && message.sort.length))
                                    message.sort = [];
                                message.sort.push($root.sajari.engine.query.v1.Sort.decode(reader, reader.uint32()));
                                break;
                            case 8:
                                reader.skip().pos++;
                                if (message.aggregates === $util.emptyObject)
                                    message.aggregates = {};
                                key = reader.string();
                                reader.pos++;
                                message.aggregates[key] = $root.sajari.engine.query.v1.Aggregate.decode(reader, reader.uint32());
                                break;
                            case 9:
                                if (!(message.transforms && message.transforms.length))
                                    message.transforms = [];
                                message.transforms.push($root.sajari.engine.query.v1.Transform.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SearchRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.SearchRequest} SearchRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SearchRequest message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.filter != null && message.hasOwnProperty("filter")) {
                            var error = $root.sajari.engine.query.v1.Filter.verify(message.filter);
                            if (error)
                                return "filter." + error;
                        }
                        if (message.indexQuery != null && message.hasOwnProperty("indexQuery")) {
                            var error = $root.sajari.engine.query.v1.SearchRequest.IndexQuery.verify(message.indexQuery);
                            if (error)
                                return "indexQuery." + error;
                        }
                        if (message.featureQuery != null && message.hasOwnProperty("featureQuery")) {
                            var error = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.verify(message.featureQuery);
                            if (error)
                                return "featureQuery." + error;
                        }
                        if (message.minScoreThreshold != null && message.hasOwnProperty("minScoreThreshold"))
                            if (typeof message.minScoreThreshold !== "number")
                                return "minScoreThreshold: number expected";
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (!$util.isInteger(message.offset))
                                return "offset: integer expected";
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit))
                                return "limit: integer expected";
                        if (message.fields != null && message.hasOwnProperty("fields")) {
                            if (!Array.isArray(message.fields))
                                return "fields: array expected";
                            for (var i = 0; i < message.fields.length; ++i)
                                if (!$util.isString(message.fields[i]))
                                    return "fields: string[] expected";
                        }
                        if (message.sort != null && message.hasOwnProperty("sort")) {
                            if (!Array.isArray(message.sort))
                                return "sort: array expected";
                            for (var i = 0; i < message.sort.length; ++i) {
                                var error = $root.sajari.engine.query.v1.Sort.verify(message.sort[i]);
                                if (error)
                                    return "sort." + error;
                            }
                        }
                        if (message.aggregates != null && message.hasOwnProperty("aggregates")) {
                            if (!$util.isObject(message.aggregates))
                                return "aggregates: object expected";
                            var key = Object.keys(message.aggregates);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.query.v1.Aggregate.verify(message.aggregates[key[i]]);
                                if (error)
                                    return "aggregates." + error;
                            }
                        }
                        if (message.transforms != null && message.hasOwnProperty("transforms")) {
                            if (!Array.isArray(message.transforms))
                                return "transforms: array expected";
                            for (var i = 0; i < message.transforms.length; ++i) {
                                var error = $root.sajari.engine.query.v1.Transform.verify(message.transforms[i]);
                                if (error)
                                    return "transforms." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SearchRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.SearchRequest} SearchRequest
                     */
                    SearchRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.SearchRequest)
                            return object;
                        var message = new $root.sajari.engine.query.v1.SearchRequest();
                        if (object.filter != null) {
                            if (typeof object.filter !== "object")
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.filter: object expected");
                            message.filter = $root.sajari.engine.query.v1.Filter.fromObject(object.filter);
                        }
                        if (object.indexQuery != null) {
                            if (typeof object.indexQuery !== "object")
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.indexQuery: object expected");
                            message.indexQuery = $root.sajari.engine.query.v1.SearchRequest.IndexQuery.fromObject(object.indexQuery);
                        }
                        if (object.featureQuery != null) {
                            if (typeof object.featureQuery !== "object")
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.featureQuery: object expected");
                            message.featureQuery = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.fromObject(object.featureQuery);
                        }
                        if (object.minScoreThreshold != null)
                            message.minScoreThreshold = Number(object.minScoreThreshold);
                        if (object.offset != null)
                            message.offset = object.offset | 0;
                        if (object.limit != null)
                            message.limit = object.limit | 0;
                        if (object.fields) {
                            if (!Array.isArray(object.fields))
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.fields: array expected");
                            message.fields = [];
                            for (var i = 0; i < object.fields.length; ++i)
                                message.fields[i] = String(object.fields[i]);
                        }
                        if (object.sort) {
                            if (!Array.isArray(object.sort))
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.sort: array expected");
                            message.sort = [];
                            for (var i = 0; i < object.sort.length; ++i) {
                                if (typeof object.sort[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.sort: object expected");
                                message.sort[i] = $root.sajari.engine.query.v1.Sort.fromObject(object.sort[i]);
                            }
                        }
                        if (object.aggregates) {
                            if (typeof object.aggregates !== "object")
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.aggregates: object expected");
                            message.aggregates = {};
                            for (var keys = Object.keys(object.aggregates), i = 0; i < keys.length; ++i) {
                                if (typeof object.aggregates[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.aggregates: object expected");
                                message.aggregates[keys[i]] = $root.sajari.engine.query.v1.Aggregate.fromObject(object.aggregates[keys[i]]);
                            }
                        }
                        if (object.transforms) {
                            if (!Array.isArray(object.transforms))
                                throw TypeError(".sajari.engine.query.v1.SearchRequest.transforms: array expected");
                            message.transforms = [];
                            for (var i = 0; i < object.transforms.length; ++i) {
                                if (typeof object.transforms[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.transforms: object expected");
                                message.transforms[i] = $root.sajari.engine.query.v1.Transform.fromObject(object.transforms[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SearchRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @static
                     * @param {sajari.engine.query.v1.SearchRequest} message SearchRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.fields = [];
                            object.sort = [];
                            object.transforms = [];
                        }
                        if (options.objects || options.defaults)
                            object.aggregates = {};
                        if (options.defaults) {
                            object.filter = null;
                            object.indexQuery = null;
                            object.featureQuery = null;
                            object.offset = 0;
                            object.limit = 0;
                            object.minScoreThreshold = 0;
                        }
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            object.filter = $root.sajari.engine.query.v1.Filter.toObject(message.filter, options);
                        if (message.indexQuery != null && message.hasOwnProperty("indexQuery"))
                            object.indexQuery = $root.sajari.engine.query.v1.SearchRequest.IndexQuery.toObject(message.indexQuery, options);
                        if (message.featureQuery != null && message.hasOwnProperty("featureQuery"))
                            object.featureQuery = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.toObject(message.featureQuery, options);
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            object.offset = message.offset;
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            object.limit = message.limit;
                        if (message.fields && message.fields.length) {
                            object.fields = [];
                            for (var j = 0; j < message.fields.length; ++j)
                                object.fields[j] = message.fields[j];
                        }
                        if (message.sort && message.sort.length) {
                            object.sort = [];
                            for (var j = 0; j < message.sort.length; ++j)
                                object.sort[j] = $root.sajari.engine.query.v1.Sort.toObject(message.sort[j], options);
                        }
                        var keys2;
                        if (message.aggregates && (keys2 = Object.keys(message.aggregates)).length) {
                            object.aggregates = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.aggregates[keys2[j]] = $root.sajari.engine.query.v1.Aggregate.toObject(message.aggregates[keys2[j]], options);
                        }
                        if (message.transforms && message.transforms.length) {
                            object.transforms = [];
                            for (var j = 0; j < message.transforms.length; ++j)
                                object.transforms[j] = $root.sajari.engine.query.v1.Transform.toObject(message.transforms[j], options);
                        }
                        if (message.minScoreThreshold != null && message.hasOwnProperty("minScoreThreshold"))
                            object.minScoreThreshold = options.json && !isFinite(message.minScoreThreshold) ? String(message.minScoreThreshold) : message.minScoreThreshold;
                        return object;
                    };

                    /**
                     * Converts this SearchRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.SearchRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    SearchRequest.IndexQuery = (function() {

                        /**
                         * Properties of an IndexQuery.
                         * @memberof sajari.engine.query.v1.SearchRequest
                         * @interface IIndexQuery
                         * @property {Array.<sajari.engine.query.v1.IBody>|null} [body] IndexQuery body
                         * @property {Array.<sajari.engine.query.v1.ITerm>|null} [terms] IndexQuery terms
                         * @property {Array.<sajari.engine.query.v1.IInstanceBoost>|null} [instanceBoosts] IndexQuery instanceBoosts
                         * @property {sajari.engine.query.v1.SearchRequest.IndexQuery.InstanceScoreMode|null} [instanceScoreMode] IndexQuery instanceScoreMode
                         * @property {Array.<sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost>|null} [fieldBoosts] IndexQuery fieldBoosts
                         */

                        /**
                         * Constructs a new IndexQuery.
                         * @memberof sajari.engine.query.v1.SearchRequest
                         * @classdesc Represents an IndexQuery.
                         * @implements IIndexQuery
                         * @constructor
                         * @param {sajari.engine.query.v1.SearchRequest.IIndexQuery=} [properties] Properties to set
                         */
                        function IndexQuery(properties) {
                            this.body = [];
                            this.terms = [];
                            this.instanceBoosts = [];
                            this.fieldBoosts = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * IndexQuery body.
                         * @member {Array.<sajari.engine.query.v1.IBody>} body
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         */
                        IndexQuery.prototype.body = $util.emptyArray;

                        /**
                         * IndexQuery terms.
                         * @member {Array.<sajari.engine.query.v1.ITerm>} terms
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         */
                        IndexQuery.prototype.terms = $util.emptyArray;

                        /**
                         * IndexQuery instanceBoosts.
                         * @member {Array.<sajari.engine.query.v1.IInstanceBoost>} instanceBoosts
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         */
                        IndexQuery.prototype.instanceBoosts = $util.emptyArray;

                        /**
                         * IndexQuery instanceScoreMode.
                         * @member {sajari.engine.query.v1.SearchRequest.IndexQuery.InstanceScoreMode} instanceScoreMode
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         */
                        IndexQuery.prototype.instanceScoreMode = 0;

                        /**
                         * IndexQuery fieldBoosts.
                         * @member {Array.<sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost>} fieldBoosts
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         */
                        IndexQuery.prototype.fieldBoosts = $util.emptyArray;

                        /**
                         * Creates a new IndexQuery instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IIndexQuery=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.SearchRequest.IndexQuery} IndexQuery instance
                         */
                        IndexQuery.create = function create(properties) {
                            return new IndexQuery(properties);
                        };

                        /**
                         * Encodes the specified IndexQuery message. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.IndexQuery.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IIndexQuery} message IndexQuery message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IndexQuery.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.body != null && message.body.length)
                                for (var i = 0; i < message.body.length; ++i)
                                    $root.sajari.engine.query.v1.Body.encode(message.body[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.terms != null && message.terms.length)
                                for (var i = 0; i < message.terms.length; ++i)
                                    $root.sajari.engine.query.v1.Term.encode(message.terms[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.instanceBoosts != null && message.instanceBoosts.length)
                                for (var i = 0; i < message.instanceBoosts.length; ++i)
                                    $root.sajari.engine.query.v1.InstanceBoost.encode(message.instanceBoosts[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.fieldBoosts != null && message.fieldBoosts.length)
                                for (var i = 0; i < message.fieldBoosts.length; ++i)
                                    $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.encode(message.fieldBoosts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.instanceScoreMode != null && message.hasOwnProperty("instanceScoreMode"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.instanceScoreMode);
                            return writer;
                        };

                        /**
                         * Encodes the specified IndexQuery message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.IndexQuery.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IIndexQuery} message IndexQuery message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IndexQuery.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an IndexQuery message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.SearchRequest.IndexQuery} IndexQuery
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IndexQuery.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SearchRequest.IndexQuery();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.body && message.body.length))
                                        message.body = [];
                                    message.body.push($root.sajari.engine.query.v1.Body.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    if (!(message.terms && message.terms.length))
                                        message.terms = [];
                                    message.terms.push($root.sajari.engine.query.v1.Term.decode(reader, reader.uint32()));
                                    break;
                                case 3:
                                    if (!(message.instanceBoosts && message.instanceBoosts.length))
                                        message.instanceBoosts = [];
                                    message.instanceBoosts.push($root.sajari.engine.query.v1.InstanceBoost.decode(reader, reader.uint32()));
                                    break;
                                case 5:
                                    message.instanceScoreMode = reader.int32();
                                    break;
                                case 4:
                                    if (!(message.fieldBoosts && message.fieldBoosts.length))
                                        message.fieldBoosts = [];
                                    message.fieldBoosts.push($root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an IndexQuery message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.SearchRequest.IndexQuery} IndexQuery
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IndexQuery.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an IndexQuery message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        IndexQuery.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.body != null && message.hasOwnProperty("body")) {
                                if (!Array.isArray(message.body))
                                    return "body: array expected";
                                for (var i = 0; i < message.body.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.Body.verify(message.body[i]);
                                    if (error)
                                        return "body." + error;
                                }
                            }
                            if (message.terms != null && message.hasOwnProperty("terms")) {
                                if (!Array.isArray(message.terms))
                                    return "terms: array expected";
                                for (var i = 0; i < message.terms.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.Term.verify(message.terms[i]);
                                    if (error)
                                        return "terms." + error;
                                }
                            }
                            if (message.instanceBoosts != null && message.hasOwnProperty("instanceBoosts")) {
                                if (!Array.isArray(message.instanceBoosts))
                                    return "instanceBoosts: array expected";
                                for (var i = 0; i < message.instanceBoosts.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.InstanceBoost.verify(message.instanceBoosts[i]);
                                    if (error)
                                        return "instanceBoosts." + error;
                                }
                            }
                            if (message.instanceScoreMode != null && message.hasOwnProperty("instanceScoreMode"))
                                switch (message.instanceScoreMode) {
                                default:
                                    return "instanceScoreMode: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.fieldBoosts != null && message.hasOwnProperty("fieldBoosts")) {
                                if (!Array.isArray(message.fieldBoosts))
                                    return "fieldBoosts: array expected";
                                for (var i = 0; i < message.fieldBoosts.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.verify(message.fieldBoosts[i]);
                                    if (error)
                                        return "fieldBoosts." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an IndexQuery message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.SearchRequest.IndexQuery} IndexQuery
                         */
                        IndexQuery.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.SearchRequest.IndexQuery)
                                return object;
                            var message = new $root.sajari.engine.query.v1.SearchRequest.IndexQuery();
                            if (object.body) {
                                if (!Array.isArray(object.body))
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.body: array expected");
                                message.body = [];
                                for (var i = 0; i < object.body.length; ++i) {
                                    if (typeof object.body[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.body: object expected");
                                    message.body[i] = $root.sajari.engine.query.v1.Body.fromObject(object.body[i]);
                                }
                            }
                            if (object.terms) {
                                if (!Array.isArray(object.terms))
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.terms: array expected");
                                message.terms = [];
                                for (var i = 0; i < object.terms.length; ++i) {
                                    if (typeof object.terms[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.terms: object expected");
                                    message.terms[i] = $root.sajari.engine.query.v1.Term.fromObject(object.terms[i]);
                                }
                            }
                            if (object.instanceBoosts) {
                                if (!Array.isArray(object.instanceBoosts))
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.instanceBoosts: array expected");
                                message.instanceBoosts = [];
                                for (var i = 0; i < object.instanceBoosts.length; ++i) {
                                    if (typeof object.instanceBoosts[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.instanceBoosts: object expected");
                                    message.instanceBoosts[i] = $root.sajari.engine.query.v1.InstanceBoost.fromObject(object.instanceBoosts[i]);
                                }
                            }
                            switch (object.instanceScoreMode) {
                            case "ABS":
                            case 0:
                                message.instanceScoreMode = 0;
                                break;
                            case "MAX":
                            case 1:
                                message.instanceScoreMode = 1;
                                break;
                            }
                            if (object.fieldBoosts) {
                                if (!Array.isArray(object.fieldBoosts))
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.fieldBoosts: array expected");
                                message.fieldBoosts = [];
                                for (var i = 0; i < object.fieldBoosts.length; ++i) {
                                    if (typeof object.fieldBoosts[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.IndexQuery.fieldBoosts: object expected");
                                    message.fieldBoosts[i] = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.fromObject(object.fieldBoosts[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an IndexQuery message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IndexQuery} message IndexQuery
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        IndexQuery.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.body = [];
                                object.terms = [];
                                object.instanceBoosts = [];
                                object.fieldBoosts = [];
                            }
                            if (options.defaults)
                                object.instanceScoreMode = options.enums === String ? "ABS" : 0;
                            if (message.body && message.body.length) {
                                object.body = [];
                                for (var j = 0; j < message.body.length; ++j)
                                    object.body[j] = $root.sajari.engine.query.v1.Body.toObject(message.body[j], options);
                            }
                            if (message.terms && message.terms.length) {
                                object.terms = [];
                                for (var j = 0; j < message.terms.length; ++j)
                                    object.terms[j] = $root.sajari.engine.query.v1.Term.toObject(message.terms[j], options);
                            }
                            if (message.instanceBoosts && message.instanceBoosts.length) {
                                object.instanceBoosts = [];
                                for (var j = 0; j < message.instanceBoosts.length; ++j)
                                    object.instanceBoosts[j] = $root.sajari.engine.query.v1.InstanceBoost.toObject(message.instanceBoosts[j], options);
                            }
                            if (message.fieldBoosts && message.fieldBoosts.length) {
                                object.fieldBoosts = [];
                                for (var j = 0; j < message.fieldBoosts.length; ++j)
                                    object.fieldBoosts[j] = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.toObject(message.fieldBoosts[j], options);
                            }
                            if (message.instanceScoreMode != null && message.hasOwnProperty("instanceScoreMode"))
                                object.instanceScoreMode = options.enums === String ? $root.sajari.engine.query.v1.SearchRequest.IndexQuery.InstanceScoreMode[message.instanceScoreMode] : message.instanceScoreMode;
                            return object;
                        };

                        /**
                         * Converts this IndexQuery to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.SearchRequest.IndexQuery
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        IndexQuery.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * InstanceScoreMode enum.
                         * @name sajari.engine.query.v1.SearchRequest.IndexQuery.InstanceScoreMode
                         * @enum {string}
                         * @property {number} ABS=0 ABS value
                         * @property {number} MAX=1 MAX value
                         */
                        IndexQuery.InstanceScoreMode = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ABS"] = 0;
                            values[valuesById[1] = "MAX"] = 1;
                            return values;
                        })();

                        return IndexQuery;
                    })();

                    SearchRequest.FeatureQuery = (function() {

                        /**
                         * Properties of a FeatureQuery.
                         * @memberof sajari.engine.query.v1.SearchRequest
                         * @interface IFeatureQuery
                         * @property {Array.<sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost>|null} [fieldBoosts] FeatureQuery fieldBoosts
                         */

                        /**
                         * Constructs a new FeatureQuery.
                         * @memberof sajari.engine.query.v1.SearchRequest
                         * @classdesc Represents a FeatureQuery.
                         * @implements IFeatureQuery
                         * @constructor
                         * @param {sajari.engine.query.v1.SearchRequest.IFeatureQuery=} [properties] Properties to set
                         */
                        function FeatureQuery(properties) {
                            this.fieldBoosts = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * FeatureQuery fieldBoosts.
                         * @member {Array.<sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost>} fieldBoosts
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @instance
                         */
                        FeatureQuery.prototype.fieldBoosts = $util.emptyArray;

                        /**
                         * Creates a new FeatureQuery instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IFeatureQuery=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery} FeatureQuery instance
                         */
                        FeatureQuery.create = function create(properties) {
                            return new FeatureQuery(properties);
                        };

                        /**
                         * Encodes the specified FeatureQuery message. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.FeatureQuery.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IFeatureQuery} message FeatureQuery message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FeatureQuery.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fieldBoosts != null && message.fieldBoosts.length)
                                for (var i = 0; i < message.fieldBoosts.length; ++i)
                                    $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.encode(message.fieldBoosts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified FeatureQuery message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.FeatureQuery.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.IFeatureQuery} message FeatureQuery message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FeatureQuery.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a FeatureQuery message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery} FeatureQuery
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FeatureQuery.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SearchRequest.FeatureQuery();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.fieldBoosts && message.fieldBoosts.length))
                                        message.fieldBoosts = [];
                                    message.fieldBoosts.push($root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a FeatureQuery message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery} FeatureQuery
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FeatureQuery.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a FeatureQuery message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FeatureQuery.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.fieldBoosts != null && message.hasOwnProperty("fieldBoosts")) {
                                if (!Array.isArray(message.fieldBoosts))
                                    return "fieldBoosts: array expected";
                                for (var i = 0; i < message.fieldBoosts.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.verify(message.fieldBoosts[i]);
                                    if (error)
                                        return "fieldBoosts." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a FeatureQuery message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery} FeatureQuery
                         */
                        FeatureQuery.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.SearchRequest.FeatureQuery)
                                return object;
                            var message = new $root.sajari.engine.query.v1.SearchRequest.FeatureQuery();
                            if (object.fieldBoosts) {
                                if (!Array.isArray(object.fieldBoosts))
                                    throw TypeError(".sajari.engine.query.v1.SearchRequest.FeatureQuery.fieldBoosts: array expected");
                                message.fieldBoosts = [];
                                for (var i = 0; i < object.fieldBoosts.length; ++i) {
                                    if (typeof object.fieldBoosts[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.FeatureQuery.fieldBoosts: object expected");
                                    message.fieldBoosts[i] = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.fromObject(object.fieldBoosts[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a FeatureQuery message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @static
                         * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery} message FeatureQuery
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FeatureQuery.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.fieldBoosts = [];
                            if (message.fieldBoosts && message.fieldBoosts.length) {
                                object.fieldBoosts = [];
                                for (var j = 0; j < message.fieldBoosts.length; ++j)
                                    object.fieldBoosts[j] = $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.toObject(message.fieldBoosts[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this FeatureQuery to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FeatureQuery.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        FeatureQuery.FieldBoost = (function() {

                            /**
                             * Properties of a FieldBoost.
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                             * @interface IFieldBoost
                             * @property {sajari.engine.query.v1.IFieldBoost|null} [fieldBoost] FieldBoost fieldBoost
                             * @property {number|null} [value] FieldBoost value
                             */

                            /**
                             * Constructs a new FieldBoost.
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery
                             * @classdesc Represents a FieldBoost.
                             * @implements IFieldBoost
                             * @constructor
                             * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost=} [properties] Properties to set
                             */
                            function FieldBoost(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * FieldBoost fieldBoost.
                             * @member {sajari.engine.query.v1.IFieldBoost|null|undefined} fieldBoost
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @instance
                             */
                            FieldBoost.prototype.fieldBoost = null;

                            /**
                             * FieldBoost value.
                             * @member {number} value
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @instance
                             */
                            FieldBoost.prototype.value = 0;

                            /**
                             * Creates a new FieldBoost instance using the specified properties.
                             * @function create
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost=} [properties] Properties to set
                             * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost} FieldBoost instance
                             */
                            FieldBoost.create = function create(properties) {
                                return new FieldBoost(properties);
                            };

                            /**
                             * Encodes the specified FieldBoost message. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost} message FieldBoost message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FieldBoost.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.fieldBoost != null && message.hasOwnProperty("fieldBoost"))
                                    $root.sajari.engine.query.v1.FieldBoost.encode(message.fieldBoost, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.value != null && message.hasOwnProperty("value"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                                return writer;
                            };

                            /**
                             * Encodes the specified FieldBoost message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery.IFieldBoost} message FieldBoost message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            FieldBoost.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a FieldBoost message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost} FieldBoost
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FieldBoost.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.fieldBoost = $root.sajari.engine.query.v1.FieldBoost.decode(reader, reader.uint32());
                                        break;
                                    case 2:
                                        message.value = reader.double();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a FieldBoost message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost} FieldBoost
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            FieldBoost.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a FieldBoost message.
                             * @function verify
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            FieldBoost.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.fieldBoost != null && message.hasOwnProperty("fieldBoost")) {
                                    var error = $root.sajari.engine.query.v1.FieldBoost.verify(message.fieldBoost);
                                    if (error)
                                        return "fieldBoost." + error;
                                }
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (typeof message.value !== "number")
                                        return "value: number expected";
                                return null;
                            };

                            /**
                             * Creates a FieldBoost message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost} FieldBoost
                             */
                            FieldBoost.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost)
                                    return object;
                                var message = new $root.sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost();
                                if (object.fieldBoost != null) {
                                    if (typeof object.fieldBoost !== "object")
                                        throw TypeError(".sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost.fieldBoost: object expected");
                                    message.fieldBoost = $root.sajari.engine.query.v1.FieldBoost.fromObject(object.fieldBoost);
                                }
                                if (object.value != null)
                                    message.value = Number(object.value);
                                return message;
                            };

                            /**
                             * Creates a plain object from a FieldBoost message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @static
                             * @param {sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost} message FieldBoost
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            FieldBoost.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.fieldBoost = null;
                                    object.value = 0;
                                }
                                if (message.fieldBoost != null && message.hasOwnProperty("fieldBoost"))
                                    object.fieldBoost = $root.sajari.engine.query.v1.FieldBoost.toObject(message.fieldBoost, options);
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                                return object;
                            };

                            /**
                             * Converts this FieldBoost to JSON.
                             * @function toJSON
                             * @memberof sajari.engine.query.v1.SearchRequest.FeatureQuery.FieldBoost
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            FieldBoost.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return FieldBoost;
                        })();

                        return FeatureQuery;
                    })();

                    return SearchRequest;
                })();

                v1.Transform = (function() {

                    /**
                     * Properties of a Transform.
                     * @memberof sajari.engine.query.v1
                     * @interface ITransform
                     * @property {string|null} [identifier] Transform identifier
                     */

                    /**
                     * Constructs a new Transform.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Transform.
                     * @implements ITransform
                     * @constructor
                     * @param {sajari.engine.query.v1.ITransform=} [properties] Properties to set
                     */
                    function Transform(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Transform identifier.
                     * @member {string} identifier
                     * @memberof sajari.engine.query.v1.Transform
                     * @instance
                     */
                    Transform.prototype.identifier = "";

                    /**
                     * Creates a new Transform instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {sajari.engine.query.v1.ITransform=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Transform} Transform instance
                     */
                    Transform.create = function create(properties) {
                        return new Transform(properties);
                    };

                    /**
                     * Encodes the specified Transform message. Does not implicitly {@link sajari.engine.query.v1.Transform.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {sajari.engine.query.v1.ITransform} message Transform message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transform.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Transform message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Transform.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {sajari.engine.query.v1.ITransform} message Transform message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transform.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Transform message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Transform} Transform
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transform.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Transform();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Transform message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Transform} Transform
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transform.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Transform message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transform.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            if (!$util.isString(message.identifier))
                                return "identifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Transform message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Transform} Transform
                     */
                    Transform.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Transform)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Transform();
                        if (object.identifier != null)
                            message.identifier = String(object.identifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Transform message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Transform
                     * @static
                     * @param {sajari.engine.query.v1.Transform} message Transform
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transform.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.identifier = "";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            object.identifier = message.identifier;
                        return object;
                    };

                    /**
                     * Converts this Transform to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Transform
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transform.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Transform;
                })();

                v1.Term = (function() {

                    /**
                     * Properties of a Term.
                     * @memberof sajari.engine.query.v1
                     * @interface ITerm
                     * @property {string|null} [value] Term value
                     * @property {string|null} [field] Term field
                     * @property {number|null} [pos] Term pos
                     * @property {number|null} [neg] Term neg
                     * @property {number|null} [weight] Term weight
                     * @property {number|null} [wordOffset] Term wordOffset
                     * @property {number|null} [paraOffset] Term paraOffset
                     */

                    /**
                     * Constructs a new Term.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Term.
                     * @implements ITerm
                     * @constructor
                     * @param {sajari.engine.query.v1.ITerm=} [properties] Properties to set
                     */
                    function Term(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Term value.
                     * @member {string} value
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.value = "";

                    /**
                     * Term field.
                     * @member {string} field
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.field = "";

                    /**
                     * Term pos.
                     * @member {number} pos
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.pos = 0;

                    /**
                     * Term neg.
                     * @member {number} neg
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.neg = 0;

                    /**
                     * Term weight.
                     * @member {number} weight
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.weight = 0;

                    /**
                     * Term wordOffset.
                     * @member {number} wordOffset
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.wordOffset = 0;

                    /**
                     * Term paraOffset.
                     * @member {number} paraOffset
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     */
                    Term.prototype.paraOffset = 0;

                    /**
                     * Creates a new Term instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {sajari.engine.query.v1.ITerm=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Term} Term instance
                     */
                    Term.create = function create(properties) {
                        return new Term(properties);
                    };

                    /**
                     * Encodes the specified Term message. Does not implicitly {@link sajari.engine.query.v1.Term.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {sajari.engine.query.v1.ITerm} message Term message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Term.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.value != null && message.hasOwnProperty("value"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                        if (message.field != null && message.hasOwnProperty("field"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.field);
                        if (message.pos != null && message.hasOwnProperty("pos"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.pos);
                        if (message.neg != null && message.hasOwnProperty("neg"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.neg);
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.weight);
                        if (message.wordOffset != null && message.hasOwnProperty("wordOffset"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.wordOffset);
                        if (message.paraOffset != null && message.hasOwnProperty("paraOffset"))
                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.paraOffset);
                        return writer;
                    };

                    /**
                     * Encodes the specified Term message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Term.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {sajari.engine.query.v1.ITerm} message Term message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Term.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Term message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Term} Term
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Term.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Term();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.value = reader.string();
                                break;
                            case 2:
                                message.field = reader.string();
                                break;
                            case 3:
                                message.pos = reader.uint32();
                                break;
                            case 4:
                                message.neg = reader.uint32();
                                break;
                            case 5:
                                message.weight = reader.double();
                                break;
                            case 6:
                                message.wordOffset = reader.uint32();
                                break;
                            case 7:
                                message.paraOffset = reader.uint32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Term message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Term} Term
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Term.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Term message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Term.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!$util.isString(message.value))
                                return "value: string expected";
                        if (message.field != null && message.hasOwnProperty("field"))
                            if (!$util.isString(message.field))
                                return "field: string expected";
                        if (message.pos != null && message.hasOwnProperty("pos"))
                            if (!$util.isInteger(message.pos))
                                return "pos: integer expected";
                        if (message.neg != null && message.hasOwnProperty("neg"))
                            if (!$util.isInteger(message.neg))
                                return "neg: integer expected";
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            if (typeof message.weight !== "number")
                                return "weight: number expected";
                        if (message.wordOffset != null && message.hasOwnProperty("wordOffset"))
                            if (!$util.isInteger(message.wordOffset))
                                return "wordOffset: integer expected";
                        if (message.paraOffset != null && message.hasOwnProperty("paraOffset"))
                            if (!$util.isInteger(message.paraOffset))
                                return "paraOffset: integer expected";
                        return null;
                    };

                    /**
                     * Creates a Term message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Term} Term
                     */
                    Term.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Term)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Term();
                        if (object.value != null)
                            message.value = String(object.value);
                        if (object.field != null)
                            message.field = String(object.field);
                        if (object.pos != null)
                            message.pos = object.pos >>> 0;
                        if (object.neg != null)
                            message.neg = object.neg >>> 0;
                        if (object.weight != null)
                            message.weight = Number(object.weight);
                        if (object.wordOffset != null)
                            message.wordOffset = object.wordOffset >>> 0;
                        if (object.paraOffset != null)
                            message.paraOffset = object.paraOffset >>> 0;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Term message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Term
                     * @static
                     * @param {sajari.engine.query.v1.Term} message Term
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Term.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.value = "";
                            object.field = "";
                            object.pos = 0;
                            object.neg = 0;
                            object.weight = 0;
                            object.wordOffset = 0;
                            object.paraOffset = 0;
                        }
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = message.value;
                        if (message.field != null && message.hasOwnProperty("field"))
                            object.field = message.field;
                        if (message.pos != null && message.hasOwnProperty("pos"))
                            object.pos = message.pos;
                        if (message.neg != null && message.hasOwnProperty("neg"))
                            object.neg = message.neg;
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            object.weight = options.json && !isFinite(message.weight) ? String(message.weight) : message.weight;
                        if (message.wordOffset != null && message.hasOwnProperty("wordOffset"))
                            object.wordOffset = message.wordOffset;
                        if (message.paraOffset != null && message.hasOwnProperty("paraOffset"))
                            object.paraOffset = message.paraOffset;
                        return object;
                    };

                    /**
                     * Converts this Term to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Term
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Term.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Term;
                })();

                v1.EvaluateRequest = (function() {

                    /**
                     * Properties of an EvaluateRequest.
                     * @memberof sajari.engine.query.v1
                     * @interface IEvaluateRequest
                     * @property {sajari.engine.query.v1.ISearchRequest|null} [searchRequest] EvaluateRequest searchRequest
                     * @property {Object.<string,sajari.engine.IValue>|null} [record] EvaluateRequest record
                     */

                    /**
                     * Constructs a new EvaluateRequest.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an EvaluateRequest.
                     * @implements IEvaluateRequest
                     * @constructor
                     * @param {sajari.engine.query.v1.IEvaluateRequest=} [properties] Properties to set
                     */
                    function EvaluateRequest(properties) {
                        this.record = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * EvaluateRequest searchRequest.
                     * @member {sajari.engine.query.v1.ISearchRequest|null|undefined} searchRequest
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @instance
                     */
                    EvaluateRequest.prototype.searchRequest = null;

                    /**
                     * EvaluateRequest record.
                     * @member {Object.<string,sajari.engine.IValue>} record
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @instance
                     */
                    EvaluateRequest.prototype.record = $util.emptyObject;

                    /**
                     * Creates a new EvaluateRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {sajari.engine.query.v1.IEvaluateRequest=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.EvaluateRequest} EvaluateRequest instance
                     */
                    EvaluateRequest.create = function create(properties) {
                        return new EvaluateRequest(properties);
                    };

                    /**
                     * Encodes the specified EvaluateRequest message. Does not implicitly {@link sajari.engine.query.v1.EvaluateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {sajari.engine.query.v1.IEvaluateRequest} message EvaluateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvaluateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            $root.sajari.engine.query.v1.SearchRequest.encode(message.searchRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.record != null && message.hasOwnProperty("record"))
                            for (var keys = Object.keys(message.record), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.Value.encode(message.record[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        return writer;
                    };

                    /**
                     * Encodes the specified EvaluateRequest message, length delimited. Does not implicitly {@link sajari.engine.query.v1.EvaluateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {sajari.engine.query.v1.IEvaluateRequest} message EvaluateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EvaluateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an EvaluateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.EvaluateRequest} EvaluateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvaluateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.EvaluateRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.decode(reader, reader.uint32());
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.record === $util.emptyObject)
                                    message.record = {};
                                key = reader.string();
                                reader.pos++;
                                message.record[key] = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an EvaluateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.EvaluateRequest} EvaluateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EvaluateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an EvaluateRequest message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EvaluateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest")) {
                            var error = $root.sajari.engine.query.v1.SearchRequest.verify(message.searchRequest);
                            if (error)
                                return "searchRequest." + error;
                        }
                        if (message.record != null && message.hasOwnProperty("record")) {
                            if (!$util.isObject(message.record))
                                return "record: object expected";
                            var key = Object.keys(message.record);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.Value.verify(message.record[key[i]]);
                                if (error)
                                    return "record." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an EvaluateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.EvaluateRequest} EvaluateRequest
                     */
                    EvaluateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.EvaluateRequest)
                            return object;
                        var message = new $root.sajari.engine.query.v1.EvaluateRequest();
                        if (object.searchRequest != null) {
                            if (typeof object.searchRequest !== "object")
                                throw TypeError(".sajari.engine.query.v1.EvaluateRequest.searchRequest: object expected");
                            message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.fromObject(object.searchRequest);
                        }
                        if (object.record) {
                            if (typeof object.record !== "object")
                                throw TypeError(".sajari.engine.query.v1.EvaluateRequest.record: object expected");
                            message.record = {};
                            for (var keys = Object.keys(object.record), i = 0; i < keys.length; ++i) {
                                if (typeof object.record[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.EvaluateRequest.record: object expected");
                                message.record[keys[i]] = $root.sajari.engine.Value.fromObject(object.record[keys[i]]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an EvaluateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @static
                     * @param {sajari.engine.query.v1.EvaluateRequest} message EvaluateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EvaluateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.record = {};
                        if (options.defaults)
                            object.searchRequest = null;
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            object.searchRequest = $root.sajari.engine.query.v1.SearchRequest.toObject(message.searchRequest, options);
                        var keys2;
                        if (message.record && (keys2 = Object.keys(message.record)).length) {
                            object.record = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.record[keys2[j]] = $root.sajari.engine.Value.toObject(message.record[keys2[j]], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this EvaluateRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.EvaluateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EvaluateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return EvaluateRequest;
                })();

                v1.SubstituteRequest = (function() {

                    /**
                     * Properties of a SubstituteRequest.
                     * @memberof sajari.engine.query.v1
                     * @interface ISubstituteRequest
                     * @property {sajari.engine.query.v1.ISearchRequest|null} [searchRequest] SubstituteRequest searchRequest
                     * @property {Object.<string,sajari.engine.IValue>|null} [record] SubstituteRequest record
                     */

                    /**
                     * Constructs a new SubstituteRequest.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a SubstituteRequest.
                     * @implements ISubstituteRequest
                     * @constructor
                     * @param {sajari.engine.query.v1.ISubstituteRequest=} [properties] Properties to set
                     */
                    function SubstituteRequest(properties) {
                        this.record = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SubstituteRequest searchRequest.
                     * @member {sajari.engine.query.v1.ISearchRequest|null|undefined} searchRequest
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @instance
                     */
                    SubstituteRequest.prototype.searchRequest = null;

                    /**
                     * SubstituteRequest record.
                     * @member {Object.<string,sajari.engine.IValue>} record
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @instance
                     */
                    SubstituteRequest.prototype.record = $util.emptyObject;

                    /**
                     * Creates a new SubstituteRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISubstituteRequest=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.SubstituteRequest} SubstituteRequest instance
                     */
                    SubstituteRequest.create = function create(properties) {
                        return new SubstituteRequest(properties);
                    };

                    /**
                     * Encodes the specified SubstituteRequest message. Does not implicitly {@link sajari.engine.query.v1.SubstituteRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISubstituteRequest} message SubstituteRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SubstituteRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            $root.sajari.engine.query.v1.SearchRequest.encode(message.searchRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.record != null && message.hasOwnProperty("record"))
                            for (var keys = Object.keys(message.record), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.Value.encode(message.record[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        return writer;
                    };

                    /**
                     * Encodes the specified SubstituteRequest message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SubstituteRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {sajari.engine.query.v1.ISubstituteRequest} message SubstituteRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SubstituteRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SubstituteRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.SubstituteRequest} SubstituteRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SubstituteRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SubstituteRequest(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.decode(reader, reader.uint32());
                                break;
                            case 2:
                                reader.skip().pos++;
                                if (message.record === $util.emptyObject)
                                    message.record = {};
                                key = reader.string();
                                reader.pos++;
                                message.record[key] = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SubstituteRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.SubstituteRequest} SubstituteRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SubstituteRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SubstituteRequest message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SubstituteRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest")) {
                            var error = $root.sajari.engine.query.v1.SearchRequest.verify(message.searchRequest);
                            if (error)
                                return "searchRequest." + error;
                        }
                        if (message.record != null && message.hasOwnProperty("record")) {
                            if (!$util.isObject(message.record))
                                return "record: object expected";
                            var key = Object.keys(message.record);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.Value.verify(message.record[key[i]]);
                                if (error)
                                    return "record." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SubstituteRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.SubstituteRequest} SubstituteRequest
                     */
                    SubstituteRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.SubstituteRequest)
                            return object;
                        var message = new $root.sajari.engine.query.v1.SubstituteRequest();
                        if (object.searchRequest != null) {
                            if (typeof object.searchRequest !== "object")
                                throw TypeError(".sajari.engine.query.v1.SubstituteRequest.searchRequest: object expected");
                            message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.fromObject(object.searchRequest);
                        }
                        if (object.record) {
                            if (typeof object.record !== "object")
                                throw TypeError(".sajari.engine.query.v1.SubstituteRequest.record: object expected");
                            message.record = {};
                            for (var keys = Object.keys(object.record), i = 0; i < keys.length; ++i) {
                                if (typeof object.record[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SubstituteRequest.record: object expected");
                                message.record[keys[i]] = $root.sajari.engine.Value.fromObject(object.record[keys[i]]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SubstituteRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @static
                     * @param {sajari.engine.query.v1.SubstituteRequest} message SubstituteRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SubstituteRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.record = {};
                        if (options.defaults)
                            object.searchRequest = null;
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            object.searchRequest = $root.sajari.engine.query.v1.SearchRequest.toObject(message.searchRequest, options);
                        var keys2;
                        if (message.record && (keys2 = Object.keys(message.record)).length) {
                            object.record = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.record[keys2[j]] = $root.sajari.engine.Value.toObject(message.record[keys2[j]], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this SubstituteRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.SubstituteRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SubstituteRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SubstituteRequest;
                })();

                v1.Body = (function() {

                    /**
                     * Properties of a Body.
                     * @memberof sajari.engine.query.v1
                     * @interface IBody
                     * @property {string|null} [text] Body text
                     * @property {number|null} [weight] Body weight
                     */

                    /**
                     * Constructs a new Body.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Body.
                     * @implements IBody
                     * @constructor
                     * @param {sajari.engine.query.v1.IBody=} [properties] Properties to set
                     */
                    function Body(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Body text.
                     * @member {string} text
                     * @memberof sajari.engine.query.v1.Body
                     * @instance
                     */
                    Body.prototype.text = "";

                    /**
                     * Body weight.
                     * @member {number} weight
                     * @memberof sajari.engine.query.v1.Body
                     * @instance
                     */
                    Body.prototype.weight = 0;

                    /**
                     * Creates a new Body instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {sajari.engine.query.v1.IBody=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Body} Body instance
                     */
                    Body.create = function create(properties) {
                        return new Body(properties);
                    };

                    /**
                     * Encodes the specified Body message. Does not implicitly {@link sajari.engine.query.v1.Body.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {sajari.engine.query.v1.IBody} message Body message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Body.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.text != null && message.hasOwnProperty("text"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.weight);
                        return writer;
                    };

                    /**
                     * Encodes the specified Body message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Body.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {sajari.engine.query.v1.IBody} message Body message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Body.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Body message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Body} Body
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Body.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Body();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.text = reader.string();
                                break;
                            case 2:
                                message.weight = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Body message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Body} Body
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Body.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Body message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Body.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.text != null && message.hasOwnProperty("text"))
                            if (!$util.isString(message.text))
                                return "text: string expected";
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            if (typeof message.weight !== "number")
                                return "weight: number expected";
                        return null;
                    };

                    /**
                     * Creates a Body message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Body} Body
                     */
                    Body.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Body)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Body();
                        if (object.text != null)
                            message.text = String(object.text);
                        if (object.weight != null)
                            message.weight = Number(object.weight);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Body message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Body
                     * @static
                     * @param {sajari.engine.query.v1.Body} message Body
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Body.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.text = "";
                            object.weight = 0;
                        }
                        if (message.text != null && message.hasOwnProperty("text"))
                            object.text = message.text;
                        if (message.weight != null && message.hasOwnProperty("weight"))
                            object.weight = options.json && !isFinite(message.weight) ? String(message.weight) : message.weight;
                        return object;
                    };

                    /**
                     * Converts this Body to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Body
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Body.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Body;
                })();

                v1.Aggregate = (function() {

                    /**
                     * Properties of an Aggregate.
                     * @memberof sajari.engine.query.v1
                     * @interface IAggregate
                     * @property {sajari.engine.query.v1.Aggregate.IMetric|null} [metric] Aggregate metric
                     * @property {sajari.engine.query.v1.Aggregate.ICount|null} [count] Aggregate count
                     * @property {sajari.engine.query.v1.Aggregate.IBucket|null} [bucket] Aggregate bucket
                     */

                    /**
                     * Constructs a new Aggregate.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an Aggregate.
                     * @implements IAggregate
                     * @constructor
                     * @param {sajari.engine.query.v1.IAggregate=} [properties] Properties to set
                     */
                    function Aggregate(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Aggregate metric.
                     * @member {sajari.engine.query.v1.Aggregate.IMetric|null|undefined} metric
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @instance
                     */
                    Aggregate.prototype.metric = null;

                    /**
                     * Aggregate count.
                     * @member {sajari.engine.query.v1.Aggregate.ICount|null|undefined} count
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @instance
                     */
                    Aggregate.prototype.count = null;

                    /**
                     * Aggregate bucket.
                     * @member {sajari.engine.query.v1.Aggregate.IBucket|null|undefined} bucket
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @instance
                     */
                    Aggregate.prototype.bucket = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Aggregate aggregate.
                     * @member {"metric"|"count"|"bucket"|undefined} aggregate
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @instance
                     */
                    Object.defineProperty(Aggregate.prototype, "aggregate", {
                        get: $util.oneOfGetter($oneOfFields = ["metric", "count", "bucket"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new Aggregate instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {sajari.engine.query.v1.IAggregate=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Aggregate} Aggregate instance
                     */
                    Aggregate.create = function create(properties) {
                        return new Aggregate(properties);
                    };

                    /**
                     * Encodes the specified Aggregate message. Does not implicitly {@link sajari.engine.query.v1.Aggregate.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {sajari.engine.query.v1.IAggregate} message Aggregate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Aggregate.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.metric != null && message.hasOwnProperty("metric"))
                            $root.sajari.engine.query.v1.Aggregate.Metric.encode(message.metric, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.count != null && message.hasOwnProperty("count"))
                            $root.sajari.engine.query.v1.Aggregate.Count.encode(message.count, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.bucket != null && message.hasOwnProperty("bucket"))
                            $root.sajari.engine.query.v1.Aggregate.Bucket.encode(message.bucket, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Aggregate message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Aggregate.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {sajari.engine.query.v1.IAggregate} message Aggregate message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Aggregate.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Aggregate message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Aggregate} Aggregate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Aggregate.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Aggregate();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.metric = $root.sajari.engine.query.v1.Aggregate.Metric.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.count = $root.sajari.engine.query.v1.Aggregate.Count.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.bucket = $root.sajari.engine.query.v1.Aggregate.Bucket.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Aggregate message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Aggregate} Aggregate
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Aggregate.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Aggregate message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Aggregate.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.metric != null && message.hasOwnProperty("metric")) {
                            properties.aggregate = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Aggregate.Metric.verify(message.metric);
                                if (error)
                                    return "metric." + error;
                            }
                        }
                        if (message.count != null && message.hasOwnProperty("count")) {
                            if (properties.aggregate === 1)
                                return "aggregate: multiple values";
                            properties.aggregate = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Aggregate.Count.verify(message.count);
                                if (error)
                                    return "count." + error;
                            }
                        }
                        if (message.bucket != null && message.hasOwnProperty("bucket")) {
                            if (properties.aggregate === 1)
                                return "aggregate: multiple values";
                            properties.aggregate = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Aggregate.Bucket.verify(message.bucket);
                                if (error)
                                    return "bucket." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an Aggregate message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Aggregate} Aggregate
                     */
                    Aggregate.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Aggregate)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Aggregate();
                        if (object.metric != null) {
                            if (typeof object.metric !== "object")
                                throw TypeError(".sajari.engine.query.v1.Aggregate.metric: object expected");
                            message.metric = $root.sajari.engine.query.v1.Aggregate.Metric.fromObject(object.metric);
                        }
                        if (object.count != null) {
                            if (typeof object.count !== "object")
                                throw TypeError(".sajari.engine.query.v1.Aggregate.count: object expected");
                            message.count = $root.sajari.engine.query.v1.Aggregate.Count.fromObject(object.count);
                        }
                        if (object.bucket != null) {
                            if (typeof object.bucket !== "object")
                                throw TypeError(".sajari.engine.query.v1.Aggregate.bucket: object expected");
                            message.bucket = $root.sajari.engine.query.v1.Aggregate.Bucket.fromObject(object.bucket);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an Aggregate message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @static
                     * @param {sajari.engine.query.v1.Aggregate} message Aggregate
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Aggregate.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.metric != null && message.hasOwnProperty("metric")) {
                            object.metric = $root.sajari.engine.query.v1.Aggregate.Metric.toObject(message.metric, options);
                            if (options.oneofs)
                                object.aggregate = "metric";
                        }
                        if (message.count != null && message.hasOwnProperty("count")) {
                            object.count = $root.sajari.engine.query.v1.Aggregate.Count.toObject(message.count, options);
                            if (options.oneofs)
                                object.aggregate = "count";
                        }
                        if (message.bucket != null && message.hasOwnProperty("bucket")) {
                            object.bucket = $root.sajari.engine.query.v1.Aggregate.Bucket.toObject(message.bucket, options);
                            if (options.oneofs)
                                object.aggregate = "bucket";
                        }
                        return object;
                    };

                    /**
                     * Converts this Aggregate to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Aggregate
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Aggregate.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Aggregate.Metric = (function() {

                        /**
                         * Properties of a Metric.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @interface IMetric
                         * @property {string|null} [field] Metric field
                         * @property {sajari.engine.query.v1.Aggregate.Metric.Type|null} [type] Metric type
                         */

                        /**
                         * Constructs a new Metric.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @classdesc Represents a Metric.
                         * @implements IMetric
                         * @constructor
                         * @param {sajari.engine.query.v1.Aggregate.IMetric=} [properties] Properties to set
                         */
                        function Metric(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Metric field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @instance
                         */
                        Metric.prototype.field = "";

                        /**
                         * Metric type.
                         * @member {sajari.engine.query.v1.Aggregate.Metric.Type} type
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @instance
                         */
                        Metric.prototype.type = 0;

                        /**
                         * Creates a new Metric instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IMetric=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Aggregate.Metric} Metric instance
                         */
                        Metric.create = function create(properties) {
                            return new Metric(properties);
                        };

                        /**
                         * Encodes the specified Metric message. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Metric.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IMetric} message Metric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metric.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.type != null && message.hasOwnProperty("type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            return writer;
                        };

                        /**
                         * Encodes the specified Metric message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Metric.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IMetric} message Metric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metric.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Metric message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Aggregate.Metric} Metric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metric.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Aggregate.Metric();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 2:
                                    message.type = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Metric message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Aggregate.Metric} Metric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metric.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Metric message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Metric.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a Metric message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Aggregate.Metric} Metric
                         */
                        Metric.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Aggregate.Metric)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Aggregate.Metric();
                            if (object.field != null)
                                message.field = String(object.field);
                            switch (object.type) {
                            case "AVG":
                            case 0:
                                message.type = 0;
                                break;
                            case "MIN":
                            case 1:
                                message.type = 1;
                                break;
                            case "MAX":
                            case 2:
                                message.type = 2;
                                break;
                            case "SUM":
                            case 3:
                                message.type = 3;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Metric message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.Metric} message Metric
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Metric.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.field = "";
                                object.type = options.enums === String ? "AVG" : 0;
                            }
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.sajari.engine.query.v1.Aggregate.Metric.Type[message.type] : message.type;
                            return object;
                        };

                        /**
                         * Converts this Metric to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Aggregate.Metric
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Metric.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Type enum.
                         * @name sajari.engine.query.v1.Aggregate.Metric.Type
                         * @enum {string}
                         * @property {number} AVG=0 AVG value
                         * @property {number} MIN=1 MIN value
                         * @property {number} MAX=2 MAX value
                         * @property {number} SUM=3 SUM value
                         */
                        Metric.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "AVG"] = 0;
                            values[valuesById[1] = "MIN"] = 1;
                            values[valuesById[2] = "MAX"] = 2;
                            values[valuesById[3] = "SUM"] = 3;
                            return values;
                        })();

                        return Metric;
                    })();

                    Aggregate.Count = (function() {

                        /**
                         * Properties of a Count.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @interface ICount
                         * @property {string|null} [field] Count field
                         * @property {number|null} [min] Count min
                         */

                        /**
                         * Constructs a new Count.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @classdesc Represents a Count.
                         * @implements ICount
                         * @constructor
                         * @param {sajari.engine.query.v1.Aggregate.ICount=} [properties] Properties to set
                         */
                        function Count(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Count field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @instance
                         */
                        Count.prototype.field = "";

                        /**
                         * Count min.
                         * @member {number} min
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @instance
                         */
                        Count.prototype.min = 0;

                        /**
                         * Creates a new Count instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.ICount=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Aggregate.Count} Count instance
                         */
                        Count.create = function create(properties) {
                            return new Count(properties);
                        };

                        /**
                         * Encodes the specified Count message. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Count.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.ICount} message Count message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Count.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.min != null && message.hasOwnProperty("min"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.min);
                            return writer;
                        };

                        /**
                         * Encodes the specified Count message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Count.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.ICount} message Count message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Count.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Count message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Aggregate.Count} Count
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Count.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Aggregate.Count();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 2:
                                    message.min = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Count message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Aggregate.Count} Count
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Count.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Count message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Count.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.min != null && message.hasOwnProperty("min"))
                                if (!$util.isInteger(message.min))
                                    return "min: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Count message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Aggregate.Count} Count
                         */
                        Count.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Aggregate.Count)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Aggregate.Count();
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.min != null)
                                message.min = object.min | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Count message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.Count} message Count
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Count.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.field = "";
                                object.min = 0;
                            }
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.min != null && message.hasOwnProperty("min"))
                                object.min = message.min;
                            return object;
                        };

                        /**
                         * Converts this Count to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Aggregate.Count
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Count.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Count;
                    })();

                    Aggregate.Bucket = (function() {

                        /**
                         * Properties of a Bucket.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @interface IBucket
                         * @property {Array.<sajari.engine.query.v1.Aggregate.Bucket.IBucket>|null} [buckets] Bucket buckets
                         */

                        /**
                         * Constructs a new Bucket.
                         * @memberof sajari.engine.query.v1.Aggregate
                         * @classdesc Represents a Bucket.
                         * @implements IBucket
                         * @constructor
                         * @param {sajari.engine.query.v1.Aggregate.IBucket=} [properties] Properties to set
                         */
                        function Bucket(properties) {
                            this.buckets = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Bucket buckets.
                         * @member {Array.<sajari.engine.query.v1.Aggregate.Bucket.IBucket>} buckets
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @instance
                         */
                        Bucket.prototype.buckets = $util.emptyArray;

                        /**
                         * Creates a new Bucket instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IBucket=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Aggregate.Bucket} Bucket instance
                         */
                        Bucket.create = function create(properties) {
                            return new Bucket(properties);
                        };

                        /**
                         * Encodes the specified Bucket message. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Bucket.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IBucket} message Bucket message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Bucket.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.buckets != null && message.buckets.length)
                                for (var i = 0; i < message.buckets.length; ++i)
                                    $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket.encode(message.buckets[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Bucket message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Bucket.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.IBucket} message Bucket message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Bucket.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Bucket message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Aggregate.Bucket} Bucket
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Bucket.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Aggregate.Bucket();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.buckets && message.buckets.length))
                                        message.buckets = [];
                                    message.buckets.push($root.sajari.engine.query.v1.Aggregate.Bucket.Bucket.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Bucket message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Aggregate.Bucket} Bucket
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Bucket.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Bucket message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Bucket.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                if (!Array.isArray(message.buckets))
                                    return "buckets: array expected";
                                for (var i = 0; i < message.buckets.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket.verify(message.buckets[i]);
                                    if (error)
                                        return "buckets." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Aggregate.Bucket} Bucket
                         */
                        Bucket.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Aggregate.Bucket)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Aggregate.Bucket();
                            if (object.buckets) {
                                if (!Array.isArray(object.buckets))
                                    throw TypeError(".sajari.engine.query.v1.Aggregate.Bucket.buckets: array expected");
                                message.buckets = [];
                                for (var i = 0; i < object.buckets.length; ++i) {
                                    if (typeof object.buckets[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.Aggregate.Bucket.buckets: object expected");
                                    message.buckets[i] = $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket.fromObject(object.buckets[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @static
                         * @param {sajari.engine.query.v1.Aggregate.Bucket} message Bucket
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Bucket.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.buckets = [];
                            if (message.buckets && message.buckets.length) {
                                object.buckets = [];
                                for (var j = 0; j < message.buckets.length; ++j)
                                    object.buckets[j] = $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket.toObject(message.buckets[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Bucket to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Aggregate.Bucket
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Bucket.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        Bucket.Bucket = (function() {

                            /**
                             * Properties of a Bucket.
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket
                             * @interface IBucket
                             * @property {string|null} [name] Bucket name
                             * @property {sajari.engine.query.v1.IFilter|null} [filter] Bucket filter
                             */

                            /**
                             * Constructs a new Bucket.
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket
                             * @classdesc Represents a Bucket.
                             * @implements IBucket
                             * @constructor
                             * @param {sajari.engine.query.v1.Aggregate.Bucket.IBucket=} [properties] Properties to set
                             */
                            function Bucket(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Bucket name.
                             * @member {string} name
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @instance
                             */
                            Bucket.prototype.name = "";

                            /**
                             * Bucket filter.
                             * @member {sajari.engine.query.v1.IFilter|null|undefined} filter
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @instance
                             */
                            Bucket.prototype.filter = null;

                            /**
                             * Creates a new Bucket instance using the specified properties.
                             * @function create
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.Aggregate.Bucket.IBucket=} [properties] Properties to set
                             * @returns {sajari.engine.query.v1.Aggregate.Bucket.Bucket} Bucket instance
                             */
                            Bucket.create = function create(properties) {
                                return new Bucket(properties);
                            };

                            /**
                             * Encodes the specified Bucket message. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Bucket.Bucket.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.Aggregate.Bucket.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && message.hasOwnProperty("name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    $root.sajari.engine.query.v1.Filter.encode(message.filter, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };

                            /**
                             * Encodes the specified Bucket message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Aggregate.Bucket.Bucket.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.Aggregate.Bucket.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Bucket message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.engine.query.v1.Aggregate.Bucket.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.filter = $root.sajari.engine.query.v1.Filter.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Bucket message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.engine.query.v1.Aggregate.Bucket.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Bucket message.
                             * @function verify
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Bucket.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.filter != null && message.hasOwnProperty("filter")) {
                                    var error = $root.sajari.engine.query.v1.Filter.verify(message.filter);
                                    if (error)
                                        return "filter." + error;
                                }
                                return null;
                            };

                            /**
                             * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.engine.query.v1.Aggregate.Bucket.Bucket} Bucket
                             */
                            Bucket.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket)
                                    return object;
                                var message = new $root.sajari.engine.query.v1.Aggregate.Bucket.Bucket();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.filter != null) {
                                    if (typeof object.filter !== "object")
                                        throw TypeError(".sajari.engine.query.v1.Aggregate.Bucket.Bucket.filter: object expected");
                                    message.filter = $root.sajari.engine.query.v1.Filter.fromObject(object.filter);
                                }
                                return message;
                            };

                            /**
                             * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.Aggregate.Bucket.Bucket} message Bucket
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Bucket.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.filter = null;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.filter != null && message.hasOwnProperty("filter"))
                                    object.filter = $root.sajari.engine.query.v1.Filter.toObject(message.filter, options);
                                return object;
                            };

                            /**
                             * Converts this Bucket to JSON.
                             * @function toJSON
                             * @memberof sajari.engine.query.v1.Aggregate.Bucket.Bucket
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Bucket.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Bucket;
                        })();

                        return Bucket;
                    })();

                    return Aggregate;
                })();

                v1.Sort = (function() {

                    /**
                     * Properties of a Sort.
                     * @memberof sajari.engine.query.v1
                     * @interface ISort
                     * @property {boolean|null} [score] Sort score
                     * @property {boolean|null} [queryScore] Sort queryScore
                     * @property {boolean|null} [featureScore] Sort featureScore
                     * @property {string|null} [field] Sort field
                     * @property {sajari.engine.query.v1.Sort.Order|null} [order] Sort order
                     */

                    /**
                     * Constructs a new Sort.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Sort.
                     * @implements ISort
                     * @constructor
                     * @param {sajari.engine.query.v1.ISort=} [properties] Properties to set
                     */
                    function Sort(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Sort score.
                     * @member {boolean} score
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Sort.prototype.score = false;

                    /**
                     * Sort queryScore.
                     * @member {boolean} queryScore
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Sort.prototype.queryScore = false;

                    /**
                     * Sort featureScore.
                     * @member {boolean} featureScore
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Sort.prototype.featureScore = false;

                    /**
                     * Sort field.
                     * @member {string} field
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Sort.prototype.field = "";

                    /**
                     * Sort order.
                     * @member {sajari.engine.query.v1.Sort.Order} order
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Sort.prototype.order = 0;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Sort type.
                     * @member {"score"|"queryScore"|"featureScore"|"field"|undefined} type
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     */
                    Object.defineProperty(Sort.prototype, "type", {
                        get: $util.oneOfGetter($oneOfFields = ["score", "queryScore", "featureScore", "field"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new Sort instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {sajari.engine.query.v1.ISort=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Sort} Sort instance
                     */
                    Sort.create = function create(properties) {
                        return new Sort(properties);
                    };

                    /**
                     * Encodes the specified Sort message. Does not implicitly {@link sajari.engine.query.v1.Sort.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {sajari.engine.query.v1.ISort} message Sort message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Sort.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.score != null && message.hasOwnProperty("score"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.score);
                        if (message.queryScore != null && message.hasOwnProperty("queryScore"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.queryScore);
                        if (message.featureScore != null && message.hasOwnProperty("featureScore"))
                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.featureScore);
                        if (message.field != null && message.hasOwnProperty("field"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.field);
                        if (message.order != null && message.hasOwnProperty("order"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.order);
                        return writer;
                    };

                    /**
                     * Encodes the specified Sort message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Sort.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {sajari.engine.query.v1.ISort} message Sort message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Sort.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Sort message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Sort} Sort
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Sort.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Sort();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.score = reader.bool();
                                break;
                            case 2:
                                message.queryScore = reader.bool();
                                break;
                            case 3:
                                message.featureScore = reader.bool();
                                break;
                            case 4:
                                message.field = reader.string();
                                break;
                            case 5:
                                message.order = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Sort message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Sort} Sort
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Sort.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Sort message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Sort.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.score != null && message.hasOwnProperty("score")) {
                            properties.type = 1;
                            if (typeof message.score !== "boolean")
                                return "score: boolean expected";
                        }
                        if (message.queryScore != null && message.hasOwnProperty("queryScore")) {
                            if (properties.type === 1)
                                return "type: multiple values";
                            properties.type = 1;
                            if (typeof message.queryScore !== "boolean")
                                return "queryScore: boolean expected";
                        }
                        if (message.featureScore != null && message.hasOwnProperty("featureScore")) {
                            if (properties.type === 1)
                                return "type: multiple values";
                            properties.type = 1;
                            if (typeof message.featureScore !== "boolean")
                                return "featureScore: boolean expected";
                        }
                        if (message.field != null && message.hasOwnProperty("field")) {
                            if (properties.type === 1)
                                return "type: multiple values";
                            properties.type = 1;
                            if (!$util.isString(message.field))
                                return "field: string expected";
                        }
                        if (message.order != null && message.hasOwnProperty("order"))
                            switch (message.order) {
                            default:
                                return "order: enum value expected";
                            case 0:
                            case 1:
                                break;
                            }
                        return null;
                    };

                    /**
                     * Creates a Sort message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Sort} Sort
                     */
                    Sort.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Sort)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Sort();
                        if (object.score != null)
                            message.score = Boolean(object.score);
                        if (object.queryScore != null)
                            message.queryScore = Boolean(object.queryScore);
                        if (object.featureScore != null)
                            message.featureScore = Boolean(object.featureScore);
                        if (object.field != null)
                            message.field = String(object.field);
                        switch (object.order) {
                        case "ASC":
                        case 0:
                            message.order = 0;
                            break;
                        case "DESC":
                        case 1:
                            message.order = 1;
                            break;
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Sort message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Sort
                     * @static
                     * @param {sajari.engine.query.v1.Sort} message Sort
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Sort.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.order = options.enums === String ? "ASC" : 0;
                        if (message.score != null && message.hasOwnProperty("score")) {
                            object.score = message.score;
                            if (options.oneofs)
                                object.type = "score";
                        }
                        if (message.queryScore != null && message.hasOwnProperty("queryScore")) {
                            object.queryScore = message.queryScore;
                            if (options.oneofs)
                                object.type = "queryScore";
                        }
                        if (message.featureScore != null && message.hasOwnProperty("featureScore")) {
                            object.featureScore = message.featureScore;
                            if (options.oneofs)
                                object.type = "featureScore";
                        }
                        if (message.field != null && message.hasOwnProperty("field")) {
                            object.field = message.field;
                            if (options.oneofs)
                                object.type = "field";
                        }
                        if (message.order != null && message.hasOwnProperty("order"))
                            object.order = options.enums === String ? $root.sajari.engine.query.v1.Sort.Order[message.order] : message.order;
                        return object;
                    };

                    /**
                     * Converts this Sort to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Sort
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Sort.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Order enum.
                     * @name sajari.engine.query.v1.Sort.Order
                     * @enum {string}
                     * @property {number} ASC=0 ASC value
                     * @property {number} DESC=1 DESC value
                     */
                    Sort.Order = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ASC"] = 0;
                        values[valuesById[1] = "DESC"] = 1;
                        return values;
                    })();

                    return Sort;
                })();

                v1.Filter = (function() {

                    /**
                     * Properties of a Filter.
                     * @memberof sajari.engine.query.v1
                     * @interface IFilter
                     * @property {sajari.engine.query.v1.Filter.ICombinator|null} [combinator] Filter combinator
                     * @property {sajari.engine.query.v1.Filter.IField|null} [field] Filter field
                     * @property {sajari.engine.query.v1.Filter.IGeo|null} [geo] Filter geo
                     */

                    /**
                     * Constructs a new Filter.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Filter.
                     * @implements IFilter
                     * @constructor
                     * @param {sajari.engine.query.v1.IFilter=} [properties] Properties to set
                     */
                    function Filter(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Filter combinator.
                     * @member {sajari.engine.query.v1.Filter.ICombinator|null|undefined} combinator
                     * @memberof sajari.engine.query.v1.Filter
                     * @instance
                     */
                    Filter.prototype.combinator = null;

                    /**
                     * Filter field.
                     * @member {sajari.engine.query.v1.Filter.IField|null|undefined} field
                     * @memberof sajari.engine.query.v1.Filter
                     * @instance
                     */
                    Filter.prototype.field = null;

                    /**
                     * Filter geo.
                     * @member {sajari.engine.query.v1.Filter.IGeo|null|undefined} geo
                     * @memberof sajari.engine.query.v1.Filter
                     * @instance
                     */
                    Filter.prototype.geo = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * Filter filter.
                     * @member {"combinator"|"field"|"geo"|undefined} filter
                     * @memberof sajari.engine.query.v1.Filter
                     * @instance
                     */
                    Object.defineProperty(Filter.prototype, "filter", {
                        get: $util.oneOfGetter($oneOfFields = ["combinator", "field", "geo"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new Filter instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {sajari.engine.query.v1.IFilter=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Filter} Filter instance
                     */
                    Filter.create = function create(properties) {
                        return new Filter(properties);
                    };

                    /**
                     * Encodes the specified Filter message. Does not implicitly {@link sajari.engine.query.v1.Filter.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {sajari.engine.query.v1.IFilter} message Filter message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Filter.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.combinator != null && message.hasOwnProperty("combinator"))
                            $root.sajari.engine.query.v1.Filter.Combinator.encode(message.combinator, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.field != null && message.hasOwnProperty("field"))
                            $root.sajari.engine.query.v1.Filter.Field.encode(message.field, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.geo != null && message.hasOwnProperty("geo"))
                            $root.sajari.engine.query.v1.Filter.Geo.encode(message.geo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Filter message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Filter.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {sajari.engine.query.v1.IFilter} message Filter message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Filter.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Filter message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Filter} Filter
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Filter.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Filter();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.combinator = $root.sajari.engine.query.v1.Filter.Combinator.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.field = $root.sajari.engine.query.v1.Filter.Field.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.geo = $root.sajari.engine.query.v1.Filter.Geo.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Filter message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Filter} Filter
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Filter.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Filter message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Filter.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.combinator != null && message.hasOwnProperty("combinator")) {
                            properties.filter = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Filter.Combinator.verify(message.combinator);
                                if (error)
                                    return "combinator." + error;
                            }
                        }
                        if (message.field != null && message.hasOwnProperty("field")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Filter.Field.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                        }
                        if (message.geo != null && message.hasOwnProperty("geo")) {
                            if (properties.filter === 1)
                                return "filter: multiple values";
                            properties.filter = 1;
                            {
                                var error = $root.sajari.engine.query.v1.Filter.Geo.verify(message.geo);
                                if (error)
                                    return "geo." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a Filter message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Filter} Filter
                     */
                    Filter.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Filter)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Filter();
                        if (object.combinator != null) {
                            if (typeof object.combinator !== "object")
                                throw TypeError(".sajari.engine.query.v1.Filter.combinator: object expected");
                            message.combinator = $root.sajari.engine.query.v1.Filter.Combinator.fromObject(object.combinator);
                        }
                        if (object.field != null) {
                            if (typeof object.field !== "object")
                                throw TypeError(".sajari.engine.query.v1.Filter.field: object expected");
                            message.field = $root.sajari.engine.query.v1.Filter.Field.fromObject(object.field);
                        }
                        if (object.geo != null) {
                            if (typeof object.geo !== "object")
                                throw TypeError(".sajari.engine.query.v1.Filter.geo: object expected");
                            message.geo = $root.sajari.engine.query.v1.Filter.Geo.fromObject(object.geo);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Filter message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Filter
                     * @static
                     * @param {sajari.engine.query.v1.Filter} message Filter
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Filter.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.combinator != null && message.hasOwnProperty("combinator")) {
                            object.combinator = $root.sajari.engine.query.v1.Filter.Combinator.toObject(message.combinator, options);
                            if (options.oneofs)
                                object.filter = "combinator";
                        }
                        if (message.field != null && message.hasOwnProperty("field")) {
                            object.field = $root.sajari.engine.query.v1.Filter.Field.toObject(message.field, options);
                            if (options.oneofs)
                                object.filter = "field";
                        }
                        if (message.geo != null && message.hasOwnProperty("geo")) {
                            object.geo = $root.sajari.engine.query.v1.Filter.Geo.toObject(message.geo, options);
                            if (options.oneofs)
                                object.filter = "geo";
                        }
                        return object;
                    };

                    /**
                     * Converts this Filter to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Filter
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Filter.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    Filter.Field = (function() {

                        /**
                         * Properties of a Field.
                         * @memberof sajari.engine.query.v1.Filter
                         * @interface IField
                         * @property {sajari.engine.query.v1.Filter.Field.Operator|null} [operator] Field operator
                         * @property {string|null} [field] Field field
                         * @property {sajari.engine.IValue|null} [value] Field value
                         */

                        /**
                         * Constructs a new Field.
                         * @memberof sajari.engine.query.v1.Filter
                         * @classdesc Represents a Field.
                         * @implements IField
                         * @constructor
                         * @param {sajari.engine.query.v1.Filter.IField=} [properties] Properties to set
                         */
                        function Field(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Field operator.
                         * @member {sajari.engine.query.v1.Filter.Field.Operator} operator
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @instance
                         */
                        Field.prototype.operator = 0;

                        /**
                         * Field field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @instance
                         */
                        Field.prototype.field = "";

                        /**
                         * Field value.
                         * @member {sajari.engine.IValue|null|undefined} value
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @instance
                         */
                        Field.prototype.value = null;

                        /**
                         * Creates a new Field instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IField=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Filter.Field} Field instance
                         */
                        Field.create = function create(properties) {
                            return new Field(properties);
                        };

                        /**
                         * Encodes the specified Field message. Does not implicitly {@link sajari.engine.query.v1.Filter.Field.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operator);
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.field);
                            if (message.value != null && message.hasOwnProperty("value"))
                                $root.sajari.engine.Value.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Field message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Filter.Field.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Field message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Filter.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Filter.Field();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.operator = reader.int32();
                                    break;
                                case 2:
                                    message.field = reader.string();
                                    break;
                                case 3:
                                    message.value = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Field message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Filter.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Field message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Field.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                switch (message.operator) {
                                default:
                                    return "operator: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                case 7:
                                case 8:
                                case 9:
                                    break;
                                }
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.value != null && message.hasOwnProperty("value")) {
                                var error = $root.sajari.engine.Value.verify(message.value);
                                if (error)
                                    return "value." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Field message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Filter.Field} Field
                         */
                        Field.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Filter.Field)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Filter.Field();
                            switch (object.operator) {
                            case "EQUAL_TO":
                            case 0:
                                message.operator = 0;
                                break;
                            case "NOT_EQUAL_TO":
                            case 1:
                                message.operator = 1;
                                break;
                            case "GREATER_THAN":
                            case 2:
                                message.operator = 2;
                                break;
                            case "GREATER_THAN_OR_EQUAL_TO":
                            case 3:
                                message.operator = 3;
                                break;
                            case "LESS_THAN":
                            case 4:
                                message.operator = 4;
                                break;
                            case "LESS_THAN_OR_EQUAL_TO":
                            case 5:
                                message.operator = 5;
                                break;
                            case "CONTAINS":
                            case 6:
                                message.operator = 6;
                                break;
                            case "DOES_NOT_CONTAIN":
                            case 7:
                                message.operator = 7;
                                break;
                            case "HAS_SUFFIX":
                            case 8:
                                message.operator = 8;
                                break;
                            case "HAS_PREFIX":
                            case 9:
                                message.operator = 9;
                                break;
                            }
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.value != null) {
                                if (typeof object.value !== "object")
                                    throw TypeError(".sajari.engine.query.v1.Filter.Field.value: object expected");
                                message.value = $root.sajari.engine.Value.fromObject(object.value);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Field message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @static
                         * @param {sajari.engine.query.v1.Filter.Field} message Field
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Field.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.operator = options.enums === String ? "EQUAL_TO" : 0;
                                object.field = "";
                                object.value = null;
                            }
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                object.operator = options.enums === String ? $root.sajari.engine.query.v1.Filter.Field.Operator[message.operator] : message.operator;
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = $root.sajari.engine.Value.toObject(message.value, options);
                            return object;
                        };

                        /**
                         * Converts this Field to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Filter.Field
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Field.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Operator enum.
                         * @name sajari.engine.query.v1.Filter.Field.Operator
                         * @enum {string}
                         * @property {number} EQUAL_TO=0 EQUAL_TO value
                         * @property {number} NOT_EQUAL_TO=1 NOT_EQUAL_TO value
                         * @property {number} GREATER_THAN=2 GREATER_THAN value
                         * @property {number} GREATER_THAN_OR_EQUAL_TO=3 GREATER_THAN_OR_EQUAL_TO value
                         * @property {number} LESS_THAN=4 LESS_THAN value
                         * @property {number} LESS_THAN_OR_EQUAL_TO=5 LESS_THAN_OR_EQUAL_TO value
                         * @property {number} CONTAINS=6 CONTAINS value
                         * @property {number} DOES_NOT_CONTAIN=7 DOES_NOT_CONTAIN value
                         * @property {number} HAS_SUFFIX=8 HAS_SUFFIX value
                         * @property {number} HAS_PREFIX=9 HAS_PREFIX value
                         */
                        Field.Operator = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "EQUAL_TO"] = 0;
                            values[valuesById[1] = "NOT_EQUAL_TO"] = 1;
                            values[valuesById[2] = "GREATER_THAN"] = 2;
                            values[valuesById[3] = "GREATER_THAN_OR_EQUAL_TO"] = 3;
                            values[valuesById[4] = "LESS_THAN"] = 4;
                            values[valuesById[5] = "LESS_THAN_OR_EQUAL_TO"] = 5;
                            values[valuesById[6] = "CONTAINS"] = 6;
                            values[valuesById[7] = "DOES_NOT_CONTAIN"] = 7;
                            values[valuesById[8] = "HAS_SUFFIX"] = 8;
                            values[valuesById[9] = "HAS_PREFIX"] = 9;
                            return values;
                        })();

                        return Field;
                    })();

                    Filter.Geo = (function() {

                        /**
                         * Properties of a Geo.
                         * @memberof sajari.engine.query.v1.Filter
                         * @interface IGeo
                         * @property {string|null} [fieldLat] Geo fieldLat
                         * @property {string|null} [fieldLng] Geo fieldLng
                         * @property {number|null} [lat] Geo lat
                         * @property {number|null} [lng] Geo lng
                         * @property {number|null} [radius] Geo radius
                         * @property {sajari.engine.query.v1.Filter.Geo.Region|null} [region] Geo region
                         */

                        /**
                         * Constructs a new Geo.
                         * @memberof sajari.engine.query.v1.Filter
                         * @classdesc Represents a Geo.
                         * @implements IGeo
                         * @constructor
                         * @param {sajari.engine.query.v1.Filter.IGeo=} [properties] Properties to set
                         */
                        function Geo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Geo fieldLat.
                         * @member {string} fieldLat
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.fieldLat = "";

                        /**
                         * Geo fieldLng.
                         * @member {string} fieldLng
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.fieldLng = "";

                        /**
                         * Geo lat.
                         * @member {number} lat
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.lat = 0;

                        /**
                         * Geo lng.
                         * @member {number} lng
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.lng = 0;

                        /**
                         * Geo radius.
                         * @member {number} radius
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.radius = 0;

                        /**
                         * Geo region.
                         * @member {sajari.engine.query.v1.Filter.Geo.Region} region
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         */
                        Geo.prototype.region = 0;

                        /**
                         * Creates a new Geo instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IGeo=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Filter.Geo} Geo instance
                         */
                        Geo.create = function create(properties) {
                            return new Geo(properties);
                        };

                        /**
                         * Encodes the specified Geo message. Does not implicitly {@link sajari.engine.query.v1.Filter.Geo.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IGeo} message Geo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Geo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.fieldLat != null && message.hasOwnProperty("fieldLat"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldLat);
                            if (message.fieldLng != null && message.hasOwnProperty("fieldLng"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.fieldLng);
                            if (message.lat != null && message.hasOwnProperty("lat"))
                                writer.uint32(/* id 3, wireType 1 =*/25).double(message.lat);
                            if (message.lng != null && message.hasOwnProperty("lng"))
                                writer.uint32(/* id 4, wireType 1 =*/33).double(message.lng);
                            if (message.radius != null && message.hasOwnProperty("radius"))
                                writer.uint32(/* id 5, wireType 1 =*/41).double(message.radius);
                            if (message.region != null && message.hasOwnProperty("region"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.region);
                            return writer;
                        };

                        /**
                         * Encodes the specified Geo message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Filter.Geo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {sajari.engine.query.v1.Filter.IGeo} message Geo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Geo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Geo message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Filter.Geo} Geo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Geo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Filter.Geo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.fieldLat = reader.string();
                                    break;
                                case 2:
                                    message.fieldLng = reader.string();
                                    break;
                                case 3:
                                    message.lat = reader.double();
                                    break;
                                case 4:
                                    message.lng = reader.double();
                                    break;
                                case 5:
                                    message.radius = reader.double();
                                    break;
                                case 6:
                                    message.region = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Geo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Filter.Geo} Geo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Geo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Geo message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Geo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.fieldLat != null && message.hasOwnProperty("fieldLat"))
                                if (!$util.isString(message.fieldLat))
                                    return "fieldLat: string expected";
                            if (message.fieldLng != null && message.hasOwnProperty("fieldLng"))
                                if (!$util.isString(message.fieldLng))
                                    return "fieldLng: string expected";
                            if (message.lat != null && message.hasOwnProperty("lat"))
                                if (typeof message.lat !== "number")
                                    return "lat: number expected";
                            if (message.lng != null && message.hasOwnProperty("lng"))
                                if (typeof message.lng !== "number")
                                    return "lng: number expected";
                            if (message.radius != null && message.hasOwnProperty("radius"))
                                if (typeof message.radius !== "number")
                                    return "radius: number expected";
                            if (message.region != null && message.hasOwnProperty("region"))
                                switch (message.region) {
                                default:
                                    return "region: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a Geo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Filter.Geo} Geo
                         */
                        Geo.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Filter.Geo)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Filter.Geo();
                            if (object.fieldLat != null)
                                message.fieldLat = String(object.fieldLat);
                            if (object.fieldLng != null)
                                message.fieldLng = String(object.fieldLng);
                            if (object.lat != null)
                                message.lat = Number(object.lat);
                            if (object.lng != null)
                                message.lng = Number(object.lng);
                            if (object.radius != null)
                                message.radius = Number(object.radius);
                            switch (object.region) {
                            case "INSIDE":
                            case 0:
                                message.region = 0;
                                break;
                            case "OUTSIDE":
                            case 1:
                                message.region = 1;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Geo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @static
                         * @param {sajari.engine.query.v1.Filter.Geo} message Geo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Geo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.fieldLat = "";
                                object.fieldLng = "";
                                object.lat = 0;
                                object.lng = 0;
                                object.radius = 0;
                                object.region = options.enums === String ? "INSIDE" : 0;
                            }
                            if (message.fieldLat != null && message.hasOwnProperty("fieldLat"))
                                object.fieldLat = message.fieldLat;
                            if (message.fieldLng != null && message.hasOwnProperty("fieldLng"))
                                object.fieldLng = message.fieldLng;
                            if (message.lat != null && message.hasOwnProperty("lat"))
                                object.lat = options.json && !isFinite(message.lat) ? String(message.lat) : message.lat;
                            if (message.lng != null && message.hasOwnProperty("lng"))
                                object.lng = options.json && !isFinite(message.lng) ? String(message.lng) : message.lng;
                            if (message.radius != null && message.hasOwnProperty("radius"))
                                object.radius = options.json && !isFinite(message.radius) ? String(message.radius) : message.radius;
                            if (message.region != null && message.hasOwnProperty("region"))
                                object.region = options.enums === String ? $root.sajari.engine.query.v1.Filter.Geo.Region[message.region] : message.region;
                            return object;
                        };

                        /**
                         * Converts this Geo to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Filter.Geo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Geo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Region enum.
                         * @name sajari.engine.query.v1.Filter.Geo.Region
                         * @enum {string}
                         * @property {number} INSIDE=0 INSIDE value
                         * @property {number} OUTSIDE=1 OUTSIDE value
                         */
                        Geo.Region = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "INSIDE"] = 0;
                            values[valuesById[1] = "OUTSIDE"] = 1;
                            return values;
                        })();

                        return Geo;
                    })();

                    Filter.Combinator = (function() {

                        /**
                         * Properties of a Combinator.
                         * @memberof sajari.engine.query.v1.Filter
                         * @interface ICombinator
                         * @property {sajari.engine.query.v1.Filter.Combinator.Operator|null} [operator] Combinator operator
                         * @property {Array.<sajari.engine.query.v1.IFilter>|null} [filters] Combinator filters
                         */

                        /**
                         * Constructs a new Combinator.
                         * @memberof sajari.engine.query.v1.Filter
                         * @classdesc Represents a Combinator.
                         * @implements ICombinator
                         * @constructor
                         * @param {sajari.engine.query.v1.Filter.ICombinator=} [properties] Properties to set
                         */
                        function Combinator(properties) {
                            this.filters = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Combinator operator.
                         * @member {sajari.engine.query.v1.Filter.Combinator.Operator} operator
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @instance
                         */
                        Combinator.prototype.operator = 0;

                        /**
                         * Combinator filters.
                         * @member {Array.<sajari.engine.query.v1.IFilter>} filters
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @instance
                         */
                        Combinator.prototype.filters = $util.emptyArray;

                        /**
                         * Creates a new Combinator instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {sajari.engine.query.v1.Filter.ICombinator=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.Filter.Combinator} Combinator instance
                         */
                        Combinator.create = function create(properties) {
                            return new Combinator(properties);
                        };

                        /**
                         * Encodes the specified Combinator message. Does not implicitly {@link sajari.engine.query.v1.Filter.Combinator.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {sajari.engine.query.v1.Filter.ICombinator} message Combinator message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Combinator.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.operator);
                            if (message.filters != null && message.filters.length)
                                for (var i = 0; i < message.filters.length; ++i)
                                    $root.sajari.engine.query.v1.Filter.encode(message.filters[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Combinator message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Filter.Combinator.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {sajari.engine.query.v1.Filter.ICombinator} message Combinator message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Combinator.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Combinator message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.Filter.Combinator} Combinator
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Combinator.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Filter.Combinator();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.operator = reader.int32();
                                    break;
                                case 2:
                                    if (!(message.filters && message.filters.length))
                                        message.filters = [];
                                    message.filters.push($root.sajari.engine.query.v1.Filter.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Combinator message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.Filter.Combinator} Combinator
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Combinator.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Combinator message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Combinator.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                switch (message.operator) {
                                default:
                                    return "operator: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.filters != null && message.hasOwnProperty("filters")) {
                                if (!Array.isArray(message.filters))
                                    return "filters: array expected";
                                for (var i = 0; i < message.filters.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.Filter.verify(message.filters[i]);
                                    if (error)
                                        return "filters." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a Combinator message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.Filter.Combinator} Combinator
                         */
                        Combinator.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.Filter.Combinator)
                                return object;
                            var message = new $root.sajari.engine.query.v1.Filter.Combinator();
                            switch (object.operator) {
                            case "ALL":
                            case 0:
                                message.operator = 0;
                                break;
                            case "ANY":
                            case 1:
                                message.operator = 1;
                                break;
                            case "ONE":
                            case 2:
                                message.operator = 2;
                                break;
                            case "NONE":
                            case 3:
                                message.operator = 3;
                                break;
                            }
                            if (object.filters) {
                                if (!Array.isArray(object.filters))
                                    throw TypeError(".sajari.engine.query.v1.Filter.Combinator.filters: array expected");
                                message.filters = [];
                                for (var i = 0; i < object.filters.length; ++i) {
                                    if (typeof object.filters[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.Filter.Combinator.filters: object expected");
                                    message.filters[i] = $root.sajari.engine.query.v1.Filter.fromObject(object.filters[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Combinator message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @static
                         * @param {sajari.engine.query.v1.Filter.Combinator} message Combinator
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Combinator.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.filters = [];
                            if (options.defaults)
                                object.operator = options.enums === String ? "ALL" : 0;
                            if (message.operator != null && message.hasOwnProperty("operator"))
                                object.operator = options.enums === String ? $root.sajari.engine.query.v1.Filter.Combinator.Operator[message.operator] : message.operator;
                            if (message.filters && message.filters.length) {
                                object.filters = [];
                                for (var j = 0; j < message.filters.length; ++j)
                                    object.filters[j] = $root.sajari.engine.query.v1.Filter.toObject(message.filters[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Combinator to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.Filter.Combinator
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Combinator.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Operator enum.
                         * @name sajari.engine.query.v1.Filter.Combinator.Operator
                         * @enum {string}
                         * @property {number} ALL=0 ALL value
                         * @property {number} ANY=1 ANY value
                         * @property {number} ONE=2 ONE value
                         * @property {number} NONE=3 NONE value
                         */
                        Combinator.Operator = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ALL"] = 0;
                            values[valuesById[1] = "ANY"] = 1;
                            values[valuesById[2] = "ONE"] = 2;
                            values[valuesById[3] = "NONE"] = 3;
                            return values;
                        })();

                        return Combinator;
                    })();

                    return Filter;
                })();

                v1.FieldBoost = (function() {

                    /**
                     * Properties of a FieldBoost.
                     * @memberof sajari.engine.query.v1
                     * @interface IFieldBoost
                     * @property {sajari.engine.query.v1.FieldBoost.IFilter|null} [filter] FieldBoost filter
                     * @property {sajari.engine.query.v1.FieldBoost.IInterval|null} [interval] FieldBoost interval
                     * @property {sajari.engine.query.v1.FieldBoost.IElement|null} [element] FieldBoost element
                     * @property {sajari.engine.query.v1.FieldBoost.IText|null} [text] FieldBoost text
                     */

                    /**
                     * Constructs a new FieldBoost.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a FieldBoost.
                     * @implements IFieldBoost
                     * @constructor
                     * @param {sajari.engine.query.v1.IFieldBoost=} [properties] Properties to set
                     */
                    function FieldBoost(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * FieldBoost filter.
                     * @member {sajari.engine.query.v1.FieldBoost.IFilter|null|undefined} filter
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     */
                    FieldBoost.prototype.filter = null;

                    /**
                     * FieldBoost interval.
                     * @member {sajari.engine.query.v1.FieldBoost.IInterval|null|undefined} interval
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     */
                    FieldBoost.prototype.interval = null;

                    /**
                     * FieldBoost element.
                     * @member {sajari.engine.query.v1.FieldBoost.IElement|null|undefined} element
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     */
                    FieldBoost.prototype.element = null;

                    /**
                     * FieldBoost text.
                     * @member {sajari.engine.query.v1.FieldBoost.IText|null|undefined} text
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     */
                    FieldBoost.prototype.text = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * FieldBoost fieldBoost.
                     * @member {"filter"|"interval"|"element"|"text"|undefined} fieldBoost
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     */
                    Object.defineProperty(FieldBoost.prototype, "fieldBoost", {
                        get: $util.oneOfGetter($oneOfFields = ["filter", "interval", "element", "text"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new FieldBoost instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {sajari.engine.query.v1.IFieldBoost=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.FieldBoost} FieldBoost instance
                     */
                    FieldBoost.create = function create(properties) {
                        return new FieldBoost(properties);
                    };

                    /**
                     * Encodes the specified FieldBoost message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {sajari.engine.query.v1.IFieldBoost} message FieldBoost message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldBoost.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.filter != null && message.hasOwnProperty("filter"))
                            $root.sajari.engine.query.v1.FieldBoost.Filter.encode(message.filter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.interval != null && message.hasOwnProperty("interval"))
                            $root.sajari.engine.query.v1.FieldBoost.Interval.encode(message.interval, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.element != null && message.hasOwnProperty("element"))
                            $root.sajari.engine.query.v1.FieldBoost.Element.encode(message.element, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.text != null && message.hasOwnProperty("text"))
                            $root.sajari.engine.query.v1.FieldBoost.Text.encode(message.text, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified FieldBoost message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {sajari.engine.query.v1.IFieldBoost} message FieldBoost message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FieldBoost.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a FieldBoost message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.FieldBoost} FieldBoost
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldBoost.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.filter = $root.sajari.engine.query.v1.FieldBoost.Filter.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.interval = $root.sajari.engine.query.v1.FieldBoost.Interval.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.element = $root.sajari.engine.query.v1.FieldBoost.Element.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.text = $root.sajari.engine.query.v1.FieldBoost.Text.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a FieldBoost message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.FieldBoost} FieldBoost
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FieldBoost.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a FieldBoost message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FieldBoost.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.filter != null && message.hasOwnProperty("filter")) {
                            properties.fieldBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.FieldBoost.Filter.verify(message.filter);
                                if (error)
                                    return "filter." + error;
                            }
                        }
                        if (message.interval != null && message.hasOwnProperty("interval")) {
                            if (properties.fieldBoost === 1)
                                return "fieldBoost: multiple values";
                            properties.fieldBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.FieldBoost.Interval.verify(message.interval);
                                if (error)
                                    return "interval." + error;
                            }
                        }
                        if (message.element != null && message.hasOwnProperty("element")) {
                            if (properties.fieldBoost === 1)
                                return "fieldBoost: multiple values";
                            properties.fieldBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.FieldBoost.Element.verify(message.element);
                                if (error)
                                    return "element." + error;
                            }
                        }
                        if (message.text != null && message.hasOwnProperty("text")) {
                            if (properties.fieldBoost === 1)
                                return "fieldBoost: multiple values";
                            properties.fieldBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.FieldBoost.Text.verify(message.text);
                                if (error)
                                    return "text." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a FieldBoost message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.FieldBoost} FieldBoost
                     */
                    FieldBoost.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.FieldBoost)
                            return object;
                        var message = new $root.sajari.engine.query.v1.FieldBoost();
                        if (object.filter != null) {
                            if (typeof object.filter !== "object")
                                throw TypeError(".sajari.engine.query.v1.FieldBoost.filter: object expected");
                            message.filter = $root.sajari.engine.query.v1.FieldBoost.Filter.fromObject(object.filter);
                        }
                        if (object.interval != null) {
                            if (typeof object.interval !== "object")
                                throw TypeError(".sajari.engine.query.v1.FieldBoost.interval: object expected");
                            message.interval = $root.sajari.engine.query.v1.FieldBoost.Interval.fromObject(object.interval);
                        }
                        if (object.element != null) {
                            if (typeof object.element !== "object")
                                throw TypeError(".sajari.engine.query.v1.FieldBoost.element: object expected");
                            message.element = $root.sajari.engine.query.v1.FieldBoost.Element.fromObject(object.element);
                        }
                        if (object.text != null) {
                            if (typeof object.text !== "object")
                                throw TypeError(".sajari.engine.query.v1.FieldBoost.text: object expected");
                            message.text = $root.sajari.engine.query.v1.FieldBoost.Text.fromObject(object.text);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a FieldBoost message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @static
                     * @param {sajari.engine.query.v1.FieldBoost} message FieldBoost
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FieldBoost.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.filter != null && message.hasOwnProperty("filter")) {
                            object.filter = $root.sajari.engine.query.v1.FieldBoost.Filter.toObject(message.filter, options);
                            if (options.oneofs)
                                object.fieldBoost = "filter";
                        }
                        if (message.interval != null && message.hasOwnProperty("interval")) {
                            object.interval = $root.sajari.engine.query.v1.FieldBoost.Interval.toObject(message.interval, options);
                            if (options.oneofs)
                                object.fieldBoost = "interval";
                        }
                        if (message.element != null && message.hasOwnProperty("element")) {
                            object.element = $root.sajari.engine.query.v1.FieldBoost.Element.toObject(message.element, options);
                            if (options.oneofs)
                                object.fieldBoost = "element";
                        }
                        if (message.text != null && message.hasOwnProperty("text")) {
                            object.text = $root.sajari.engine.query.v1.FieldBoost.Text.toObject(message.text, options);
                            if (options.oneofs)
                                object.fieldBoost = "text";
                        }
                        return object;
                    };

                    /**
                     * Converts this FieldBoost to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.FieldBoost
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FieldBoost.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    FieldBoost.Filter = (function() {

                        /**
                         * Properties of a Filter.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @interface IFilter
                         * @property {sajari.engine.query.v1.IFilter|null} [filter] Filter filter
                         * @property {number|null} [value] Filter value
                         */

                        /**
                         * Constructs a new Filter.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @classdesc Represents a Filter.
                         * @implements IFilter
                         * @constructor
                         * @param {sajari.engine.query.v1.FieldBoost.IFilter=} [properties] Properties to set
                         */
                        function Filter(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Filter filter.
                         * @member {sajari.engine.query.v1.IFilter|null|undefined} filter
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @instance
                         */
                        Filter.prototype.filter = null;

                        /**
                         * Filter value.
                         * @member {number} value
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @instance
                         */
                        Filter.prototype.value = 0;

                        /**
                         * Creates a new Filter instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IFilter=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.FieldBoost.Filter} Filter instance
                         */
                        Filter.create = function create(properties) {
                            return new Filter(properties);
                        };

                        /**
                         * Encodes the specified Filter message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Filter.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IFilter} message Filter message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Filter.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                $root.sajari.engine.query.v1.Filter.encode(message.filter, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified Filter message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Filter.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IFilter} message Filter message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Filter.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Filter message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.FieldBoost.Filter} Filter
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Filter.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost.Filter();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.filter = $root.sajari.engine.query.v1.Filter.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.value = reader.double();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Filter message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.FieldBoost.Filter} Filter
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Filter.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Filter message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Filter.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.filter != null && message.hasOwnProperty("filter")) {
                                var error = $root.sajari.engine.query.v1.Filter.verify(message.filter);
                                if (error)
                                    return "filter." + error;
                            }
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a Filter message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.FieldBoost.Filter} Filter
                         */
                        Filter.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.FieldBoost.Filter)
                                return object;
                            var message = new $root.sajari.engine.query.v1.FieldBoost.Filter();
                            if (object.filter != null) {
                                if (typeof object.filter !== "object")
                                    throw TypeError(".sajari.engine.query.v1.FieldBoost.Filter.filter: object expected");
                                message.filter = $root.sajari.engine.query.v1.Filter.fromObject(object.filter);
                            }
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Filter message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.Filter} message Filter
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Filter.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.filter = null;
                                object.value = 0;
                            }
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = $root.sajari.engine.query.v1.Filter.toObject(message.filter, options);
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this Filter to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.FieldBoost.Filter
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Filter.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Filter;
                    })();

                    FieldBoost.Interval = (function() {

                        /**
                         * Properties of an Interval.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @interface IInterval
                         * @property {string|null} [field] Interval field
                         * @property {Array.<sajari.engine.query.v1.FieldBoost.Interval.IPoint>|null} [points] Interval points
                         */

                        /**
                         * Constructs a new Interval.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @classdesc Represents an Interval.
                         * @implements IInterval
                         * @constructor
                         * @param {sajari.engine.query.v1.FieldBoost.IInterval=} [properties] Properties to set
                         */
                        function Interval(properties) {
                            this.points = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Interval field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @instance
                         */
                        Interval.prototype.field = "";

                        /**
                         * Interval points.
                         * @member {Array.<sajari.engine.query.v1.FieldBoost.Interval.IPoint>} points
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @instance
                         */
                        Interval.prototype.points = $util.emptyArray;

                        /**
                         * Creates a new Interval instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IInterval=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.FieldBoost.Interval} Interval instance
                         */
                        Interval.create = function create(properties) {
                            return new Interval(properties);
                        };

                        /**
                         * Encodes the specified Interval message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Interval.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IInterval} message Interval message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Interval.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.points != null && message.points.length)
                                for (var i = 0; i < message.points.length; ++i)
                                    $root.sajari.engine.query.v1.FieldBoost.Interval.Point.encode(message.points[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Interval message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Interval.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IInterval} message Interval message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Interval.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Interval message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.FieldBoost.Interval} Interval
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Interval.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost.Interval();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 2:
                                    if (!(message.points && message.points.length))
                                        message.points = [];
                                    message.points.push($root.sajari.engine.query.v1.FieldBoost.Interval.Point.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Interval message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.FieldBoost.Interval} Interval
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Interval.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Interval message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Interval.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.points != null && message.hasOwnProperty("points")) {
                                if (!Array.isArray(message.points))
                                    return "points: array expected";
                                for (var i = 0; i < message.points.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.FieldBoost.Interval.Point.verify(message.points[i]);
                                    if (error)
                                        return "points." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an Interval message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.FieldBoost.Interval} Interval
                         */
                        Interval.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.FieldBoost.Interval)
                                return object;
                            var message = new $root.sajari.engine.query.v1.FieldBoost.Interval();
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.points) {
                                if (!Array.isArray(object.points))
                                    throw TypeError(".sajari.engine.query.v1.FieldBoost.Interval.points: array expected");
                                message.points = [];
                                for (var i = 0; i < object.points.length; ++i) {
                                    if (typeof object.points[i] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.FieldBoost.Interval.points: object expected");
                                    message.points[i] = $root.sajari.engine.query.v1.FieldBoost.Interval.Point.fromObject(object.points[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an Interval message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.Interval} message Interval
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Interval.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.points = [];
                            if (options.defaults)
                                object.field = "";
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.points && message.points.length) {
                                object.points = [];
                                for (var j = 0; j < message.points.length; ++j)
                                    object.points[j] = $root.sajari.engine.query.v1.FieldBoost.Interval.Point.toObject(message.points[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Interval to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.FieldBoost.Interval
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Interval.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        Interval.Point = (function() {

                            /**
                             * Properties of a Point.
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval
                             * @interface IPoint
                             * @property {number|null} [point] Point point
                             * @property {number|null} [value] Point value
                             */

                            /**
                             * Constructs a new Point.
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval
                             * @classdesc Represents a Point.
                             * @implements IPoint
                             * @constructor
                             * @param {sajari.engine.query.v1.FieldBoost.Interval.IPoint=} [properties] Properties to set
                             */
                            function Point(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Point point.
                             * @member {number} point
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @instance
                             */
                            Point.prototype.point = 0;

                            /**
                             * Point value.
                             * @member {number} value
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @instance
                             */
                            Point.prototype.value = 0;

                            /**
                             * Creates a new Point instance using the specified properties.
                             * @function create
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {sajari.engine.query.v1.FieldBoost.Interval.IPoint=} [properties] Properties to set
                             * @returns {sajari.engine.query.v1.FieldBoost.Interval.Point} Point instance
                             */
                            Point.create = function create(properties) {
                                return new Point(properties);
                            };

                            /**
                             * Encodes the specified Point message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Interval.Point.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {sajari.engine.query.v1.FieldBoost.Interval.IPoint} message Point message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Point.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.point != null && message.hasOwnProperty("point"))
                                    writer.uint32(/* id 1, wireType 1 =*/9).double(message.point);
                                if (message.value != null && message.hasOwnProperty("value"))
                                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                                return writer;
                            };

                            /**
                             * Encodes the specified Point message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Interval.Point.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {sajari.engine.query.v1.FieldBoost.Interval.IPoint} message Point message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Point.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Point message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.engine.query.v1.FieldBoost.Interval.Point} Point
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Point.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost.Interval.Point();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.point = reader.double();
                                        break;
                                    case 2:
                                        message.value = reader.double();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Point message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.engine.query.v1.FieldBoost.Interval.Point} Point
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Point.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Point message.
                             * @function verify
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Point.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.point != null && message.hasOwnProperty("point"))
                                    if (typeof message.point !== "number")
                                        return "point: number expected";
                                if (message.value != null && message.hasOwnProperty("value"))
                                    if (typeof message.value !== "number")
                                        return "value: number expected";
                                return null;
                            };

                            /**
                             * Creates a Point message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.engine.query.v1.FieldBoost.Interval.Point} Point
                             */
                            Point.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.engine.query.v1.FieldBoost.Interval.Point)
                                    return object;
                                var message = new $root.sajari.engine.query.v1.FieldBoost.Interval.Point();
                                if (object.point != null)
                                    message.point = Number(object.point);
                                if (object.value != null)
                                    message.value = Number(object.value);
                                return message;
                            };

                            /**
                             * Creates a plain object from a Point message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @static
                             * @param {sajari.engine.query.v1.FieldBoost.Interval.Point} message Point
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Point.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.point = 0;
                                    object.value = 0;
                                }
                                if (message.point != null && message.hasOwnProperty("point"))
                                    object.point = options.json && !isFinite(message.point) ? String(message.point) : message.point;
                                if (message.value != null && message.hasOwnProperty("value"))
                                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                                return object;
                            };

                            /**
                             * Converts this Point to JSON.
                             * @function toJSON
                             * @memberof sajari.engine.query.v1.FieldBoost.Interval.Point
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Point.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Point;
                        })();

                        return Interval;
                    })();

                    FieldBoost.Element = (function() {

                        /**
                         * Properties of an Element.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @interface IElement
                         * @property {string|null} [field] Element field
                         * @property {Array.<string>|null} [elts] Element elts
                         */

                        /**
                         * Constructs a new Element.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @classdesc Represents an Element.
                         * @implements IElement
                         * @constructor
                         * @param {sajari.engine.query.v1.FieldBoost.IElement=} [properties] Properties to set
                         */
                        function Element(properties) {
                            this.elts = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Element field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @instance
                         */
                        Element.prototype.field = "";

                        /**
                         * Element elts.
                         * @member {Array.<string>} elts
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @instance
                         */
                        Element.prototype.elts = $util.emptyArray;

                        /**
                         * Creates a new Element instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IElement=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.FieldBoost.Element} Element instance
                         */
                        Element.create = function create(properties) {
                            return new Element(properties);
                        };

                        /**
                         * Encodes the specified Element message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Element.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IElement} message Element message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Element.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.elts != null && message.elts.length)
                                for (var i = 0; i < message.elts.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.elts[i]);
                            return writer;
                        };

                        /**
                         * Encodes the specified Element message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Element.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IElement} message Element message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Element.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Element message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.FieldBoost.Element} Element
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Element.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost.Element();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 3:
                                    if (!(message.elts && message.elts.length))
                                        message.elts = [];
                                    message.elts.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Element message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.FieldBoost.Element} Element
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Element.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Element message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Element.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.elts != null && message.hasOwnProperty("elts")) {
                                if (!Array.isArray(message.elts))
                                    return "elts: array expected";
                                for (var i = 0; i < message.elts.length; ++i)
                                    if (!$util.isString(message.elts[i]))
                                        return "elts: string[] expected";
                            }
                            return null;
                        };

                        /**
                         * Creates an Element message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.FieldBoost.Element} Element
                         */
                        Element.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.FieldBoost.Element)
                                return object;
                            var message = new $root.sajari.engine.query.v1.FieldBoost.Element();
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.elts) {
                                if (!Array.isArray(object.elts))
                                    throw TypeError(".sajari.engine.query.v1.FieldBoost.Element.elts: array expected");
                                message.elts = [];
                                for (var i = 0; i < object.elts.length; ++i)
                                    message.elts[i] = String(object.elts[i]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an Element message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.Element} message Element
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Element.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.elts = [];
                            if (options.defaults)
                                object.field = "";
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.elts && message.elts.length) {
                                object.elts = [];
                                for (var j = 0; j < message.elts.length; ++j)
                                    object.elts[j] = message.elts[j];
                            }
                            return object;
                        };

                        /**
                         * Converts this Element to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.FieldBoost.Element
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Element.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Element;
                    })();

                    FieldBoost.Text = (function() {

                        /**
                         * Properties of a Text.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @interface IText
                         * @property {string|null} [field] Text field
                         * @property {string|null} [text] Text text
                         */

                        /**
                         * Constructs a new Text.
                         * @memberof sajari.engine.query.v1.FieldBoost
                         * @classdesc Represents a Text.
                         * @implements IText
                         * @constructor
                         * @param {sajari.engine.query.v1.FieldBoost.IText=} [properties] Properties to set
                         */
                        function Text(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Text field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @instance
                         */
                        Text.prototype.field = "";

                        /**
                         * Text text.
                         * @member {string} text
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @instance
                         */
                        Text.prototype.text = "";

                        /**
                         * Creates a new Text instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IText=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.FieldBoost.Text} Text instance
                         */
                        Text.create = function create(properties) {
                            return new Text(properties);
                        };

                        /**
                         * Encodes the specified Text message. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Text.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IText} message Text message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Text.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.text != null && message.hasOwnProperty("text"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.text);
                            return writer;
                        };

                        /**
                         * Encodes the specified Text message, length delimited. Does not implicitly {@link sajari.engine.query.v1.FieldBoost.Text.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.IText} message Text message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Text.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Text message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.FieldBoost.Text} Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Text.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.FieldBoost.Text();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 3:
                                    message.text = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Text message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.FieldBoost.Text} Text
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Text.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Text message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Text.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            return null;
                        };

                        /**
                         * Creates a Text message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.FieldBoost.Text} Text
                         */
                        Text.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.FieldBoost.Text)
                                return object;
                            var message = new $root.sajari.engine.query.v1.FieldBoost.Text();
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.text != null)
                                message.text = String(object.text);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Text message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @static
                         * @param {sajari.engine.query.v1.FieldBoost.Text} message Text
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Text.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.field = "";
                                object.text = "";
                            }
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            return object;
                        };

                        /**
                         * Converts this Text to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.FieldBoost.Text
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Text.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Text;
                    })();

                    return FieldBoost;
                })();

                v1.InstanceBoost = (function() {

                    /**
                     * Properties of an InstanceBoost.
                     * @memberof sajari.engine.query.v1
                     * @interface IInstanceBoost
                     * @property {sajari.engine.query.v1.InstanceBoost.IField|null} [field] InstanceBoost field
                     * @property {sajari.engine.query.v1.InstanceBoost.IScore|null} [score] InstanceBoost score
                     */

                    /**
                     * Constructs a new InstanceBoost.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an InstanceBoost.
                     * @implements IInstanceBoost
                     * @constructor
                     * @param {sajari.engine.query.v1.IInstanceBoost=} [properties] Properties to set
                     */
                    function InstanceBoost(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * InstanceBoost field.
                     * @member {sajari.engine.query.v1.InstanceBoost.IField|null|undefined} field
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @instance
                     */
                    InstanceBoost.prototype.field = null;

                    /**
                     * InstanceBoost score.
                     * @member {sajari.engine.query.v1.InstanceBoost.IScore|null|undefined} score
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @instance
                     */
                    InstanceBoost.prototype.score = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * InstanceBoost instanceBoost.
                     * @member {"field"|"score"|undefined} instanceBoost
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @instance
                     */
                    Object.defineProperty(InstanceBoost.prototype, "instanceBoost", {
                        get: $util.oneOfGetter($oneOfFields = ["field", "score"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new InstanceBoost instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {sajari.engine.query.v1.IInstanceBoost=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.InstanceBoost} InstanceBoost instance
                     */
                    InstanceBoost.create = function create(properties) {
                        return new InstanceBoost(properties);
                    };

                    /**
                     * Encodes the specified InstanceBoost message. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {sajari.engine.query.v1.IInstanceBoost} message InstanceBoost message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InstanceBoost.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.field != null && message.hasOwnProperty("field"))
                            $root.sajari.engine.query.v1.InstanceBoost.Field.encode(message.field, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.score != null && message.hasOwnProperty("score"))
                            $root.sajari.engine.query.v1.InstanceBoost.Score.encode(message.score, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified InstanceBoost message, length delimited. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {sajari.engine.query.v1.IInstanceBoost} message InstanceBoost message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    InstanceBoost.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an InstanceBoost message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.InstanceBoost} InstanceBoost
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InstanceBoost.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.InstanceBoost();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.field = $root.sajari.engine.query.v1.InstanceBoost.Field.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.score = $root.sajari.engine.query.v1.InstanceBoost.Score.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an InstanceBoost message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.InstanceBoost} InstanceBoost
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    InstanceBoost.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an InstanceBoost message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    InstanceBoost.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.field != null && message.hasOwnProperty("field")) {
                            properties.instanceBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.InstanceBoost.Field.verify(message.field);
                                if (error)
                                    return "field." + error;
                            }
                        }
                        if (message.score != null && message.hasOwnProperty("score")) {
                            if (properties.instanceBoost === 1)
                                return "instanceBoost: multiple values";
                            properties.instanceBoost = 1;
                            {
                                var error = $root.sajari.engine.query.v1.InstanceBoost.Score.verify(message.score);
                                if (error)
                                    return "score." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an InstanceBoost message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.InstanceBoost} InstanceBoost
                     */
                    InstanceBoost.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.InstanceBoost)
                            return object;
                        var message = new $root.sajari.engine.query.v1.InstanceBoost();
                        if (object.field != null) {
                            if (typeof object.field !== "object")
                                throw TypeError(".sajari.engine.query.v1.InstanceBoost.field: object expected");
                            message.field = $root.sajari.engine.query.v1.InstanceBoost.Field.fromObject(object.field);
                        }
                        if (object.score != null) {
                            if (typeof object.score !== "object")
                                throw TypeError(".sajari.engine.query.v1.InstanceBoost.score: object expected");
                            message.score = $root.sajari.engine.query.v1.InstanceBoost.Score.fromObject(object.score);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an InstanceBoost message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @static
                     * @param {sajari.engine.query.v1.InstanceBoost} message InstanceBoost
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    InstanceBoost.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.field != null && message.hasOwnProperty("field")) {
                            object.field = $root.sajari.engine.query.v1.InstanceBoost.Field.toObject(message.field, options);
                            if (options.oneofs)
                                object.instanceBoost = "field";
                        }
                        if (message.score != null && message.hasOwnProperty("score")) {
                            object.score = $root.sajari.engine.query.v1.InstanceBoost.Score.toObject(message.score, options);
                            if (options.oneofs)
                                object.instanceBoost = "score";
                        }
                        return object;
                    };

                    /**
                     * Converts this InstanceBoost to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.InstanceBoost
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    InstanceBoost.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    InstanceBoost.Field = (function() {

                        /**
                         * Properties of a Field.
                         * @memberof sajari.engine.query.v1.InstanceBoost
                         * @interface IField
                         * @property {string|null} [field] Field field
                         * @property {number|null} [value] Field value
                         */

                        /**
                         * Constructs a new Field.
                         * @memberof sajari.engine.query.v1.InstanceBoost
                         * @classdesc Represents a Field.
                         * @implements IField
                         * @constructor
                         * @param {sajari.engine.query.v1.InstanceBoost.IField=} [properties] Properties to set
                         */
                        function Field(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Field field.
                         * @member {string} field
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @instance
                         */
                        Field.prototype.field = "";

                        /**
                         * Field value.
                         * @member {number} value
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @instance
                         */
                        Field.prototype.value = 0;

                        /**
                         * Creates a new Field instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IField=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.InstanceBoost.Field} Field instance
                         */
                        Field.create = function create(properties) {
                            return new Field(properties);
                        };

                        /**
                         * Encodes the specified Field message. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.Field.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.field != null && message.hasOwnProperty("field"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.field);
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified Field message, length delimited. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.Field.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IField} message Field message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Field.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Field message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.InstanceBoost.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.InstanceBoost.Field();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.field = reader.string();
                                    break;
                                case 2:
                                    message.value = reader.double();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Field message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.InstanceBoost.Field} Field
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Field.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Field message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Field.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.field != null && message.hasOwnProperty("field"))
                                if (!$util.isString(message.field))
                                    return "field: string expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a Field message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.InstanceBoost.Field} Field
                         */
                        Field.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.InstanceBoost.Field)
                                return object;
                            var message = new $root.sajari.engine.query.v1.InstanceBoost.Field();
                            if (object.field != null)
                                message.field = String(object.field);
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Field message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.Field} message Field
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Field.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.field = "";
                                object.value = 0;
                            }
                            if (message.field != null && message.hasOwnProperty("field"))
                                object.field = message.field;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this Field to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.InstanceBoost.Field
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Field.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Field;
                    })();

                    InstanceBoost.Score = (function() {

                        /**
                         * Properties of a Score.
                         * @memberof sajari.engine.query.v1.InstanceBoost
                         * @interface IScore
                         * @property {number|null} [threshold] Score threshold
                         * @property {number|null} [minCount] Score minCount
                         */

                        /**
                         * Constructs a new Score.
                         * @memberof sajari.engine.query.v1.InstanceBoost
                         * @classdesc Represents a Score.
                         * @implements IScore
                         * @constructor
                         * @param {sajari.engine.query.v1.InstanceBoost.IScore=} [properties] Properties to set
                         */
                        function Score(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Score threshold.
                         * @member {number} threshold
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @instance
                         */
                        Score.prototype.threshold = 0;

                        /**
                         * Score minCount.
                         * @member {number} minCount
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @instance
                         */
                        Score.prototype.minCount = 0;

                        /**
                         * Creates a new Score instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IScore=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.InstanceBoost.Score} Score instance
                         */
                        Score.create = function create(properties) {
                            return new Score(properties);
                        };

                        /**
                         * Encodes the specified Score message. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.Score.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.threshold != null && message.hasOwnProperty("threshold"))
                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.threshold);
                            if (message.minCount != null && message.hasOwnProperty("minCount"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.minCount);
                            return writer;
                        };

                        /**
                         * Encodes the specified Score message, length delimited. Does not implicitly {@link sajari.engine.query.v1.InstanceBoost.Score.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.IScore} message Score message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Score.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.InstanceBoost.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.InstanceBoost.Score();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.threshold = reader.double();
                                    break;
                                case 2:
                                    message.minCount = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Score message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.InstanceBoost.Score} Score
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Score.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Score message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Score.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.threshold != null && message.hasOwnProperty("threshold"))
                                if (typeof message.threshold !== "number")
                                    return "threshold: number expected";
                            if (message.minCount != null && message.hasOwnProperty("minCount"))
                                if (!$util.isInteger(message.minCount))
                                    return "minCount: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Score message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.InstanceBoost.Score} Score
                         */
                        Score.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.InstanceBoost.Score)
                                return object;
                            var message = new $root.sajari.engine.query.v1.InstanceBoost.Score();
                            if (object.threshold != null)
                                message.threshold = Number(object.threshold);
                            if (object.minCount != null)
                                message.minCount = object.minCount >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Score message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @static
                         * @param {sajari.engine.query.v1.InstanceBoost.Score} message Score
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Score.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.threshold = 0;
                                object.minCount = 0;
                            }
                            if (message.threshold != null && message.hasOwnProperty("threshold"))
                                object.threshold = options.json && !isFinite(message.threshold) ? String(message.threshold) : message.threshold;
                            if (message.minCount != null && message.hasOwnProperty("minCount"))
                                object.minCount = message.minCount;
                            return object;
                        };

                        /**
                         * Converts this Score to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.InstanceBoost.Score
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Score.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Score;
                    })();

                    return InstanceBoost;
                })();

                v1.AggregateResponse = (function() {

                    /**
                     * Properties of an AggregateResponse.
                     * @memberof sajari.engine.query.v1
                     * @interface IAggregateResponse
                     * @property {sajari.engine.query.v1.AggregateResponse.IMetric|null} [metric] AggregateResponse metric
                     * @property {sajari.engine.query.v1.AggregateResponse.ICount|null} [count] AggregateResponse count
                     * @property {sajari.engine.query.v1.AggregateResponse.IBuckets|null} [buckets] AggregateResponse buckets
                     */

                    /**
                     * Constructs a new AggregateResponse.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an AggregateResponse.
                     * @implements IAggregateResponse
                     * @constructor
                     * @param {sajari.engine.query.v1.IAggregateResponse=} [properties] Properties to set
                     */
                    function AggregateResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AggregateResponse metric.
                     * @member {sajari.engine.query.v1.AggregateResponse.IMetric|null|undefined} metric
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @instance
                     */
                    AggregateResponse.prototype.metric = null;

                    /**
                     * AggregateResponse count.
                     * @member {sajari.engine.query.v1.AggregateResponse.ICount|null|undefined} count
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @instance
                     */
                    AggregateResponse.prototype.count = null;

                    /**
                     * AggregateResponse buckets.
                     * @member {sajari.engine.query.v1.AggregateResponse.IBuckets|null|undefined} buckets
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @instance
                     */
                    AggregateResponse.prototype.buckets = null;

                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;

                    /**
                     * AggregateResponse aggregateResponse.
                     * @member {"metric"|"count"|"buckets"|undefined} aggregateResponse
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @instance
                     */
                    Object.defineProperty(AggregateResponse.prototype, "aggregateResponse", {
                        get: $util.oneOfGetter($oneOfFields = ["metric", "count", "buckets"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Creates a new AggregateResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAggregateResponse=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.AggregateResponse} AggregateResponse instance
                     */
                    AggregateResponse.create = function create(properties) {
                        return new AggregateResponse(properties);
                    };

                    /**
                     * Encodes the specified AggregateResponse message. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAggregateResponse} message AggregateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AggregateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.metric != null && message.hasOwnProperty("metric"))
                            $root.sajari.engine.query.v1.AggregateResponse.Metric.encode(message.metric, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.count != null && message.hasOwnProperty("count"))
                            $root.sajari.engine.query.v1.AggregateResponse.Count.encode(message.count, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.buckets != null && message.hasOwnProperty("buckets"))
                            $root.sajari.engine.query.v1.AggregateResponse.Buckets.encode(message.buckets, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AggregateResponse message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAggregateResponse} message AggregateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AggregateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AggregateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.AggregateResponse} AggregateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AggregateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AggregateResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.metric = $root.sajari.engine.query.v1.AggregateResponse.Metric.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.count = $root.sajari.engine.query.v1.AggregateResponse.Count.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.buckets = $root.sajari.engine.query.v1.AggregateResponse.Buckets.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AggregateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.AggregateResponse} AggregateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AggregateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AggregateResponse message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AggregateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.metric != null && message.hasOwnProperty("metric")) {
                            properties.aggregateResponse = 1;
                            {
                                var error = $root.sajari.engine.query.v1.AggregateResponse.Metric.verify(message.metric);
                                if (error)
                                    return "metric." + error;
                            }
                        }
                        if (message.count != null && message.hasOwnProperty("count")) {
                            if (properties.aggregateResponse === 1)
                                return "aggregateResponse: multiple values";
                            properties.aggregateResponse = 1;
                            {
                                var error = $root.sajari.engine.query.v1.AggregateResponse.Count.verify(message.count);
                                if (error)
                                    return "count." + error;
                            }
                        }
                        if (message.buckets != null && message.hasOwnProperty("buckets")) {
                            if (properties.aggregateResponse === 1)
                                return "aggregateResponse: multiple values";
                            properties.aggregateResponse = 1;
                            {
                                var error = $root.sajari.engine.query.v1.AggregateResponse.Buckets.verify(message.buckets);
                                if (error)
                                    return "buckets." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AggregateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.AggregateResponse} AggregateResponse
                     */
                    AggregateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.AggregateResponse)
                            return object;
                        var message = new $root.sajari.engine.query.v1.AggregateResponse();
                        if (object.metric != null) {
                            if (typeof object.metric !== "object")
                                throw TypeError(".sajari.engine.query.v1.AggregateResponse.metric: object expected");
                            message.metric = $root.sajari.engine.query.v1.AggregateResponse.Metric.fromObject(object.metric);
                        }
                        if (object.count != null) {
                            if (typeof object.count !== "object")
                                throw TypeError(".sajari.engine.query.v1.AggregateResponse.count: object expected");
                            message.count = $root.sajari.engine.query.v1.AggregateResponse.Count.fromObject(object.count);
                        }
                        if (object.buckets != null) {
                            if (typeof object.buckets !== "object")
                                throw TypeError(".sajari.engine.query.v1.AggregateResponse.buckets: object expected");
                            message.buckets = $root.sajari.engine.query.v1.AggregateResponse.Buckets.fromObject(object.buckets);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AggregateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @static
                     * @param {sajari.engine.query.v1.AggregateResponse} message AggregateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AggregateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.metric != null && message.hasOwnProperty("metric")) {
                            object.metric = $root.sajari.engine.query.v1.AggregateResponse.Metric.toObject(message.metric, options);
                            if (options.oneofs)
                                object.aggregateResponse = "metric";
                        }
                        if (message.count != null && message.hasOwnProperty("count")) {
                            object.count = $root.sajari.engine.query.v1.AggregateResponse.Count.toObject(message.count, options);
                            if (options.oneofs)
                                object.aggregateResponse = "count";
                        }
                        if (message.buckets != null && message.hasOwnProperty("buckets")) {
                            object.buckets = $root.sajari.engine.query.v1.AggregateResponse.Buckets.toObject(message.buckets, options);
                            if (options.oneofs)
                                object.aggregateResponse = "buckets";
                        }
                        return object;
                    };

                    /**
                     * Converts this AggregateResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.AggregateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AggregateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    AggregateResponse.Metric = (function() {

                        /**
                         * Properties of a Metric.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @interface IMetric
                         * @property {number|null} [value] Metric value
                         */

                        /**
                         * Constructs a new Metric.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @classdesc Represents a Metric.
                         * @implements IMetric
                         * @constructor
                         * @param {sajari.engine.query.v1.AggregateResponse.IMetric=} [properties] Properties to set
                         */
                        function Metric(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Metric value.
                         * @member {number} value
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @instance
                         */
                        Metric.prototype.value = 0;

                        /**
                         * Creates a new Metric instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IMetric=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.AggregateResponse.Metric} Metric instance
                         */
                        Metric.create = function create(properties) {
                            return new Metric(properties);
                        };

                        /**
                         * Encodes the specified Metric message. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Metric.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IMetric} message Metric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metric.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && message.hasOwnProperty("value"))
                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified Metric message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Metric.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IMetric} message Metric message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Metric.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Metric message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.AggregateResponse.Metric} Metric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metric.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AggregateResponse.Metric();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.value = reader.double();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Metric message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.AggregateResponse.Metric} Metric
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Metric.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Metric message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Metric.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a Metric message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.AggregateResponse.Metric} Metric
                         */
                        Metric.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.AggregateResponse.Metric)
                                return object;
                            var message = new $root.sajari.engine.query.v1.AggregateResponse.Metric();
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Metric message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.Metric} message Metric
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Metric.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this Metric to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.AggregateResponse.Metric
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Metric.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Metric;
                    })();

                    AggregateResponse.Count = (function() {

                        /**
                         * Properties of a Count.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @interface ICount
                         * @property {Object.<string,number>|null} [counts] Count counts
                         */

                        /**
                         * Constructs a new Count.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @classdesc Represents a Count.
                         * @implements ICount
                         * @constructor
                         * @param {sajari.engine.query.v1.AggregateResponse.ICount=} [properties] Properties to set
                         */
                        function Count(properties) {
                            this.counts = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Count counts.
                         * @member {Object.<string,number>} counts
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @instance
                         */
                        Count.prototype.counts = $util.emptyObject;

                        /**
                         * Creates a new Count instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.ICount=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.AggregateResponse.Count} Count instance
                         */
                        Count.create = function create(properties) {
                            return new Count(properties);
                        };

                        /**
                         * Encodes the specified Count message. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Count.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.ICount} message Count message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Count.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.counts != null && message.hasOwnProperty("counts"))
                                for (var keys = Object.keys(message.counts), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.counts[keys[i]]).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Count message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Count.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.ICount} message Count message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Count.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Count message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.AggregateResponse.Count} Count
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Count.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AggregateResponse.Count(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    reader.skip().pos++;
                                    if (message.counts === $util.emptyObject)
                                        message.counts = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.counts[key] = reader.int32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Count message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.AggregateResponse.Count} Count
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Count.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Count message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Count.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.counts != null && message.hasOwnProperty("counts")) {
                                if (!$util.isObject(message.counts))
                                    return "counts: object expected";
                                var key = Object.keys(message.counts);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isInteger(message.counts[key[i]]))
                                        return "counts: integer{k:string} expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a Count message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.AggregateResponse.Count} Count
                         */
                        Count.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.AggregateResponse.Count)
                                return object;
                            var message = new $root.sajari.engine.query.v1.AggregateResponse.Count();
                            if (object.counts) {
                                if (typeof object.counts !== "object")
                                    throw TypeError(".sajari.engine.query.v1.AggregateResponse.Count.counts: object expected");
                                message.counts = {};
                                for (var keys = Object.keys(object.counts), i = 0; i < keys.length; ++i)
                                    message.counts[keys[i]] = object.counts[keys[i]] | 0;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Count message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.Count} message Count
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Count.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.counts = {};
                            var keys2;
                            if (message.counts && (keys2 = Object.keys(message.counts)).length) {
                                object.counts = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.counts[keys2[j]] = message.counts[keys2[j]];
                            }
                            return object;
                        };

                        /**
                         * Converts this Count to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.AggregateResponse.Count
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Count.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Count;
                    })();

                    AggregateResponse.Buckets = (function() {

                        /**
                         * Properties of a Buckets.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @interface IBuckets
                         * @property {Object.<string,sajari.engine.query.v1.AggregateResponse.Buckets.IBucket>|null} [buckets] Buckets buckets
                         */

                        /**
                         * Constructs a new Buckets.
                         * @memberof sajari.engine.query.v1.AggregateResponse
                         * @classdesc Represents a Buckets.
                         * @implements IBuckets
                         * @constructor
                         * @param {sajari.engine.query.v1.AggregateResponse.IBuckets=} [properties] Properties to set
                         */
                        function Buckets(properties) {
                            this.buckets = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Buckets buckets.
                         * @member {Object.<string,sajari.engine.query.v1.AggregateResponse.Buckets.IBucket>} buckets
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @instance
                         */
                        Buckets.prototype.buckets = $util.emptyObject;

                        /**
                         * Creates a new Buckets instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IBuckets=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.AggregateResponse.Buckets} Buckets instance
                         */
                        Buckets.create = function create(properties) {
                            return new Buckets(properties);
                        };

                        /**
                         * Encodes the specified Buckets message. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Buckets.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IBuckets} message Buckets message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buckets.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.buckets != null && message.hasOwnProperty("buckets"))
                                for (var keys = Object.keys(message.buckets), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.encode(message.buckets[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            return writer;
                        };

                        /**
                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Buckets.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.IBuckets} message Buckets message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Buckets message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.AggregateResponse.Buckets} Buckets
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buckets.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AggregateResponse.Buckets(), key;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    reader.skip().pos++;
                                    if (message.buckets === $util.emptyObject)
                                        message.buckets = {};
                                    key = reader.string();
                                    reader.pos++;
                                    message.buckets[key] = $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Buckets message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.AggregateResponse.Buckets} Buckets
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Buckets.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Buckets message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Buckets.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.buckets != null && message.hasOwnProperty("buckets")) {
                                if (!$util.isObject(message.buckets))
                                    return "buckets: object expected";
                                var key = Object.keys(message.buckets);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.verify(message.buckets[key[i]]);
                                    if (error)
                                        return "buckets." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.AggregateResponse.Buckets} Buckets
                         */
                        Buckets.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.AggregateResponse.Buckets)
                                return object;
                            var message = new $root.sajari.engine.query.v1.AggregateResponse.Buckets();
                            if (object.buckets) {
                                if (typeof object.buckets !== "object")
                                    throw TypeError(".sajari.engine.query.v1.AggregateResponse.Buckets.buckets: object expected");
                                message.buckets = {};
                                for (var keys = Object.keys(object.buckets), i = 0; i < keys.length; ++i) {
                                    if (typeof object.buckets[keys[i]] !== "object")
                                        throw TypeError(".sajari.engine.query.v1.AggregateResponse.Buckets.buckets: object expected");
                                    message.buckets[keys[i]] = $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.fromObject(object.buckets[keys[i]]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @static
                         * @param {sajari.engine.query.v1.AggregateResponse.Buckets} message Buckets
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Buckets.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.buckets = {};
                            var keys2;
                            if (message.buckets && (keys2 = Object.keys(message.buckets)).length) {
                                object.buckets = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.buckets[keys2[j]] = $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.toObject(message.buckets[keys2[j]], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Buckets to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Buckets.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        Buckets.Bucket = (function() {

                            /**
                             * Properties of a Bucket.
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                             * @interface IBucket
                             * @property {string|null} [name] Bucket name
                             * @property {number|null} [count] Bucket count
                             */

                            /**
                             * Constructs a new Bucket.
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets
                             * @classdesc Represents a Bucket.
                             * @implements IBucket
                             * @constructor
                             * @param {sajari.engine.query.v1.AggregateResponse.Buckets.IBucket=} [properties] Properties to set
                             */
                            function Bucket(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Bucket name.
                             * @member {string} name
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @instance
                             */
                            Bucket.prototype.name = "";

                            /**
                             * Bucket count.
                             * @member {number} count
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @instance
                             */
                            Bucket.prototype.count = 0;

                            /**
                             * Creates a new Bucket instance using the specified properties.
                             * @function create
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.AggregateResponse.Buckets.IBucket=} [properties] Properties to set
                             * @returns {sajari.engine.query.v1.AggregateResponse.Buckets.Bucket} Bucket instance
                             */
                            Bucket.create = function create(properties) {
                                return new Bucket(properties);
                            };

                            /**
                             * Encodes the specified Bucket message. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.verify|verify} messages.
                             * @function encode
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.AggregateResponse.Buckets.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && message.hasOwnProperty("name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                if (message.count != null && message.hasOwnProperty("count"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.count);
                                return writer;
                            };

                            /**
                             * Encodes the specified Bucket message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AggregateResponse.Buckets.Bucket.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.AggregateResponse.Buckets.IBucket} message Bucket message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Bucket.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };

                            /**
                             * Decodes a Bucket message from the specified reader or buffer.
                             * @function decode
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {sajari.engine.query.v1.AggregateResponse.Buckets.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        message.count = reader.int32();
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * Decodes a Bucket message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {sajari.engine.query.v1.AggregateResponse.Buckets.Bucket} Bucket
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Bucket.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };

                            /**
                             * Verifies a Bucket message.
                             * @function verify
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Bucket.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (!$util.isInteger(message.count))
                                        return "count: integer expected";
                                return null;
                            };

                            /**
                             * Creates a Bucket message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {sajari.engine.query.v1.AggregateResponse.Buckets.Bucket} Bucket
                             */
                            Bucket.fromObject = function fromObject(object) {
                                if (object instanceof $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket)
                                    return object;
                                var message = new $root.sajari.engine.query.v1.AggregateResponse.Buckets.Bucket();
                                if (object.name != null)
                                    message.name = String(object.name);
                                if (object.count != null)
                                    message.count = object.count | 0;
                                return message;
                            };

                            /**
                             * Creates a plain object from a Bucket message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @static
                             * @param {sajari.engine.query.v1.AggregateResponse.Buckets.Bucket} message Bucket
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Bucket.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.name = "";
                                    object.count = 0;
                                }
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                if (message.count != null && message.hasOwnProperty("count"))
                                    object.count = message.count;
                                return object;
                            };

                            /**
                             * Converts this Bucket to JSON.
                             * @function toJSON
                             * @memberof sajari.engine.query.v1.AggregateResponse.Buckets.Bucket
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Bucket.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };

                            return Bucket;
                        })();

                        return Buckets;
                    })();

                    return AggregateResponse;
                })();

                v1.SearchResponse = (function() {

                    /**
                     * Properties of a SearchResponse.
                     * @memberof sajari.engine.query.v1
                     * @interface ISearchResponse
                     * @property {number|Long|null} [reads] SearchResponse reads
                     * @property {number|Long|null} [totalResults] SearchResponse totalResults
                     * @property {string|null} [time] SearchResponse time
                     * @property {Object.<string,sajari.engine.query.v1.IAggregateResponse>|null} [aggregates] SearchResponse aggregates
                     * @property {Array.<sajari.engine.query.v1.IResult>|null} [results] SearchResponse results
                     */

                    /**
                     * Constructs a new SearchResponse.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a SearchResponse.
                     * @implements ISearchResponse
                     * @constructor
                     * @param {sajari.engine.query.v1.ISearchResponse=} [properties] Properties to set
                     */
                    function SearchResponse(properties) {
                        this.aggregates = {};
                        this.results = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SearchResponse reads.
                     * @member {number|Long} reads
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.reads = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * SearchResponse totalResults.
                     * @member {number|Long} totalResults
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.totalResults = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                    /**
                     * SearchResponse time.
                     * @member {string} time
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.time = "";

                    /**
                     * SearchResponse aggregates.
                     * @member {Object.<string,sajari.engine.query.v1.IAggregateResponse>} aggregates
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.aggregates = $util.emptyObject;

                    /**
                     * SearchResponse results.
                     * @member {Array.<sajari.engine.query.v1.IResult>} results
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     */
                    SearchResponse.prototype.results = $util.emptyArray;

                    /**
                     * Creates a new SearchResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {sajari.engine.query.v1.ISearchResponse=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.SearchResponse} SearchResponse instance
                     */
                    SearchResponse.create = function create(properties) {
                        return new SearchResponse(properties);
                    };

                    /**
                     * Encodes the specified SearchResponse message. Does not implicitly {@link sajari.engine.query.v1.SearchResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {sajari.engine.query.v1.ISearchResponse} message SearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.reads != null && message.hasOwnProperty("reads"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.reads);
                        if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.totalResults);
                        if (message.time != null && message.hasOwnProperty("time"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.time);
                        if (message.aggregates != null && message.hasOwnProperty("aggregates"))
                            for (var keys = Object.keys(message.aggregates), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.query.v1.AggregateResponse.encode(message.aggregates[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.results != null && message.results.length)
                            for (var i = 0; i < message.results.length; ++i)
                                $root.sajari.engine.query.v1.Result.encode(message.results[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified SearchResponse message, length delimited. Does not implicitly {@link sajari.engine.query.v1.SearchResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {sajari.engine.query.v1.ISearchResponse} message SearchResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SearchResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SearchResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.SearchResponse} SearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.SearchResponse(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.reads = reader.int64();
                                break;
                            case 2:
                                message.totalResults = reader.int64();
                                break;
                            case 3:
                                message.time = reader.string();
                                break;
                            case 4:
                                reader.skip().pos++;
                                if (message.aggregates === $util.emptyObject)
                                    message.aggregates = {};
                                key = reader.string();
                                reader.pos++;
                                message.aggregates[key] = $root.sajari.engine.query.v1.AggregateResponse.decode(reader, reader.uint32());
                                break;
                            case 5:
                                if (!(message.results && message.results.length))
                                    message.results = [];
                                message.results.push($root.sajari.engine.query.v1.Result.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SearchResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.SearchResponse} SearchResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SearchResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SearchResponse message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SearchResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.reads != null && message.hasOwnProperty("reads"))
                            if (!$util.isInteger(message.reads) && !(message.reads && $util.isInteger(message.reads.low) && $util.isInteger(message.reads.high)))
                                return "reads: integer|Long expected";
                        if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                            if (!$util.isInteger(message.totalResults) && !(message.totalResults && $util.isInteger(message.totalResults.low) && $util.isInteger(message.totalResults.high)))
                                return "totalResults: integer|Long expected";
                        if (message.time != null && message.hasOwnProperty("time"))
                            if (!$util.isString(message.time))
                                return "time: string expected";
                        if (message.aggregates != null && message.hasOwnProperty("aggregates")) {
                            if (!$util.isObject(message.aggregates))
                                return "aggregates: object expected";
                            var key = Object.keys(message.aggregates);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.query.v1.AggregateResponse.verify(message.aggregates[key[i]]);
                                if (error)
                                    return "aggregates." + error;
                            }
                        }
                        if (message.results != null && message.hasOwnProperty("results")) {
                            if (!Array.isArray(message.results))
                                return "results: array expected";
                            for (var i = 0; i < message.results.length; ++i) {
                                var error = $root.sajari.engine.query.v1.Result.verify(message.results[i]);
                                if (error)
                                    return "results." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a SearchResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.SearchResponse} SearchResponse
                     */
                    SearchResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.SearchResponse)
                            return object;
                        var message = new $root.sajari.engine.query.v1.SearchResponse();
                        if (object.reads != null)
                            if ($util.Long)
                                (message.reads = $util.Long.fromValue(object.reads)).unsigned = false;
                            else if (typeof object.reads === "string")
                                message.reads = parseInt(object.reads, 10);
                            else if (typeof object.reads === "number")
                                message.reads = object.reads;
                            else if (typeof object.reads === "object")
                                message.reads = new $util.LongBits(object.reads.low >>> 0, object.reads.high >>> 0).toNumber();
                        if (object.totalResults != null)
                            if ($util.Long)
                                (message.totalResults = $util.Long.fromValue(object.totalResults)).unsigned = false;
                            else if (typeof object.totalResults === "string")
                                message.totalResults = parseInt(object.totalResults, 10);
                            else if (typeof object.totalResults === "number")
                                message.totalResults = object.totalResults;
                            else if (typeof object.totalResults === "object")
                                message.totalResults = new $util.LongBits(object.totalResults.low >>> 0, object.totalResults.high >>> 0).toNumber();
                        if (object.time != null)
                            message.time = String(object.time);
                        if (object.aggregates) {
                            if (typeof object.aggregates !== "object")
                                throw TypeError(".sajari.engine.query.v1.SearchResponse.aggregates: object expected");
                            message.aggregates = {};
                            for (var keys = Object.keys(object.aggregates), i = 0; i < keys.length; ++i) {
                                if (typeof object.aggregates[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SearchResponse.aggregates: object expected");
                                message.aggregates[keys[i]] = $root.sajari.engine.query.v1.AggregateResponse.fromObject(object.aggregates[keys[i]]);
                            }
                        }
                        if (object.results) {
                            if (!Array.isArray(object.results))
                                throw TypeError(".sajari.engine.query.v1.SearchResponse.results: array expected");
                            message.results = [];
                            for (var i = 0; i < object.results.length; ++i) {
                                if (typeof object.results[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.SearchResponse.results: object expected");
                                message.results[i] = $root.sajari.engine.query.v1.Result.fromObject(object.results[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a SearchResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @static
                     * @param {sajari.engine.query.v1.SearchResponse} message SearchResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SearchResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.results = [];
                        if (options.objects || options.defaults)
                            object.aggregates = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.reads = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.reads = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.totalResults = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.totalResults = options.longs === String ? "0" : 0;
                            object.time = "";
                        }
                        if (message.reads != null && message.hasOwnProperty("reads"))
                            if (typeof message.reads === "number")
                                object.reads = options.longs === String ? String(message.reads) : message.reads;
                            else
                                object.reads = options.longs === String ? $util.Long.prototype.toString.call(message.reads) : options.longs === Number ? new $util.LongBits(message.reads.low >>> 0, message.reads.high >>> 0).toNumber() : message.reads;
                        if (message.totalResults != null && message.hasOwnProperty("totalResults"))
                            if (typeof message.totalResults === "number")
                                object.totalResults = options.longs === String ? String(message.totalResults) : message.totalResults;
                            else
                                object.totalResults = options.longs === String ? $util.Long.prototype.toString.call(message.totalResults) : options.longs === Number ? new $util.LongBits(message.totalResults.low >>> 0, message.totalResults.high >>> 0).toNumber() : message.totalResults;
                        if (message.time != null && message.hasOwnProperty("time"))
                            object.time = message.time;
                        var keys2;
                        if (message.aggregates && (keys2 = Object.keys(message.aggregates)).length) {
                            object.aggregates = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.aggregates[keys2[j]] = $root.sajari.engine.query.v1.AggregateResponse.toObject(message.aggregates[keys2[j]], options);
                        }
                        if (message.results && message.results.length) {
                            object.results = [];
                            for (var j = 0; j < message.results.length; ++j)
                                object.results[j] = $root.sajari.engine.query.v1.Result.toObject(message.results[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this SearchResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.SearchResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SearchResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SearchResponse;
                })();

                v1.Result = (function() {

                    /**
                     * Properties of a Result.
                     * @memberof sajari.engine.query.v1
                     * @interface IResult
                     * @property {Object.<string,sajari.engine.IValue>|null} [values] Result values
                     * @property {number|null} [score] Result score
                     * @property {number|null} [indexScore] Result indexScore
                     */

                    /**
                     * Constructs a new Result.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents a Result.
                     * @implements IResult
                     * @constructor
                     * @param {sajari.engine.query.v1.IResult=} [properties] Properties to set
                     */
                    function Result(properties) {
                        this.values = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Result values.
                     * @member {Object.<string,sajari.engine.IValue>} values
                     * @memberof sajari.engine.query.v1.Result
                     * @instance
                     */
                    Result.prototype.values = $util.emptyObject;

                    /**
                     * Result score.
                     * @member {number} score
                     * @memberof sajari.engine.query.v1.Result
                     * @instance
                     */
                    Result.prototype.score = 0;

                    /**
                     * Result indexScore.
                     * @member {number} indexScore
                     * @memberof sajari.engine.query.v1.Result
                     * @instance
                     */
                    Result.prototype.indexScore = 0;

                    /**
                     * Creates a new Result instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {sajari.engine.query.v1.IResult=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.Result} Result instance
                     */
                    Result.create = function create(properties) {
                        return new Result(properties);
                    };

                    /**
                     * Encodes the specified Result message. Does not implicitly {@link sajari.engine.query.v1.Result.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {sajari.engine.query.v1.IResult} message Result message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Result.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.values != null && message.hasOwnProperty("values"))
                            for (var keys = Object.keys(message.values), i = 0; i < keys.length; ++i) {
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                $root.sajari.engine.Value.encode(message.values[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                            }
                        if (message.score != null && message.hasOwnProperty("score"))
                            writer.uint32(/* id 2, wireType 1 =*/17).double(message.score);
                        if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.indexScore);
                        return writer;
                    };

                    /**
                     * Encodes the specified Result message, length delimited. Does not implicitly {@link sajari.engine.query.v1.Result.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {sajari.engine.query.v1.IResult} message Result message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Result.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Result message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.Result} Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Result.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.Result(), key;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                reader.skip().pos++;
                                if (message.values === $util.emptyObject)
                                    message.values = {};
                                key = reader.string();
                                reader.pos++;
                                message.values[key] = $root.sajari.engine.Value.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.score = reader.double();
                                break;
                            case 3:
                                message.indexScore = reader.double();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Result message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.Result} Result
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Result.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Result message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Result.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.values != null && message.hasOwnProperty("values")) {
                            if (!$util.isObject(message.values))
                                return "values: object expected";
                            var key = Object.keys(message.values);
                            for (var i = 0; i < key.length; ++i) {
                                var error = $root.sajari.engine.Value.verify(message.values[key[i]]);
                                if (error)
                                    return "values." + error;
                            }
                        }
                        if (message.score != null && message.hasOwnProperty("score"))
                            if (typeof message.score !== "number")
                                return "score: number expected";
                        if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                            if (typeof message.indexScore !== "number")
                                return "indexScore: number expected";
                        return null;
                    };

                    /**
                     * Creates a Result message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.Result} Result
                     */
                    Result.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.Result)
                            return object;
                        var message = new $root.sajari.engine.query.v1.Result();
                        if (object.values) {
                            if (typeof object.values !== "object")
                                throw TypeError(".sajari.engine.query.v1.Result.values: object expected");
                            message.values = {};
                            for (var keys = Object.keys(object.values), i = 0; i < keys.length; ++i) {
                                if (typeof object.values[keys[i]] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.Result.values: object expected");
                                message.values[keys[i]] = $root.sajari.engine.Value.fromObject(object.values[keys[i]]);
                            }
                        }
                        if (object.score != null)
                            message.score = Number(object.score);
                        if (object.indexScore != null)
                            message.indexScore = Number(object.indexScore);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Result message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.Result
                     * @static
                     * @param {sajari.engine.query.v1.Result} message Result
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Result.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.values = {};
                        if (options.defaults) {
                            object.score = 0;
                            object.indexScore = 0;
                        }
                        var keys2;
                        if (message.values && (keys2 = Object.keys(message.values)).length) {
                            object.values = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.values[keys2[j]] = $root.sajari.engine.Value.toObject(message.values[keys2[j]], options);
                        }
                        if (message.score != null && message.hasOwnProperty("score"))
                            object.score = options.json && !isFinite(message.score) ? String(message.score) : message.score;
                        if (message.indexScore != null && message.hasOwnProperty("indexScore"))
                            object.indexScore = options.json && !isFinite(message.indexScore) ? String(message.indexScore) : message.indexScore;
                        return object;
                    };

                    /**
                     * Converts this Result to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.Result
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Result.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Result;
                })();

                v1.AnalyseRequest = (function() {

                    /**
                     * Properties of an AnalyseRequest.
                     * @memberof sajari.engine.query.v1
                     * @interface IAnalyseRequest
                     * @property {sajari.engine.query.v1.ISearchRequest|null} [searchRequest] AnalyseRequest searchRequest
                     * @property {Array.<sajari.engine.IKey>|null} [keys] AnalyseRequest keys
                     */

                    /**
                     * Constructs a new AnalyseRequest.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an AnalyseRequest.
                     * @implements IAnalyseRequest
                     * @constructor
                     * @param {sajari.engine.query.v1.IAnalyseRequest=} [properties] Properties to set
                     */
                    function AnalyseRequest(properties) {
                        this.keys = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AnalyseRequest searchRequest.
                     * @member {sajari.engine.query.v1.ISearchRequest|null|undefined} searchRequest
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @instance
                     */
                    AnalyseRequest.prototype.searchRequest = null;

                    /**
                     * AnalyseRequest keys.
                     * @member {Array.<sajari.engine.IKey>} keys
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @instance
                     */
                    AnalyseRequest.prototype.keys = $util.emptyArray;

                    /**
                     * Creates a new AnalyseRequest instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseRequest=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.AnalyseRequest} AnalyseRequest instance
                     */
                    AnalyseRequest.create = function create(properties) {
                        return new AnalyseRequest(properties);
                    };

                    /**
                     * Encodes the specified AnalyseRequest message. Does not implicitly {@link sajari.engine.query.v1.AnalyseRequest.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseRequest} message AnalyseRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalyseRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            $root.sajari.engine.query.v1.SearchRequest.encode(message.searchRequest, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.keys != null && message.keys.length)
                            for (var i = 0; i < message.keys.length; ++i)
                                $root.sajari.engine.Key.encode(message.keys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AnalyseRequest message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AnalyseRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseRequest} message AnalyseRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalyseRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AnalyseRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.AnalyseRequest} AnalyseRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalyseRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AnalyseRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.keys && message.keys.length))
                                    message.keys = [];
                                message.keys.push($root.sajari.engine.Key.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AnalyseRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.AnalyseRequest} AnalyseRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalyseRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AnalyseRequest message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AnalyseRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest")) {
                            var error = $root.sajari.engine.query.v1.SearchRequest.verify(message.searchRequest);
                            if (error)
                                return "searchRequest." + error;
                        }
                        if (message.keys != null && message.hasOwnProperty("keys")) {
                            if (!Array.isArray(message.keys))
                                return "keys: array expected";
                            for (var i = 0; i < message.keys.length; ++i) {
                                var error = $root.sajari.engine.Key.verify(message.keys[i]);
                                if (error)
                                    return "keys." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AnalyseRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.AnalyseRequest} AnalyseRequest
                     */
                    AnalyseRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.AnalyseRequest)
                            return object;
                        var message = new $root.sajari.engine.query.v1.AnalyseRequest();
                        if (object.searchRequest != null) {
                            if (typeof object.searchRequest !== "object")
                                throw TypeError(".sajari.engine.query.v1.AnalyseRequest.searchRequest: object expected");
                            message.searchRequest = $root.sajari.engine.query.v1.SearchRequest.fromObject(object.searchRequest);
                        }
                        if (object.keys) {
                            if (!Array.isArray(object.keys))
                                throw TypeError(".sajari.engine.query.v1.AnalyseRequest.keys: array expected");
                            message.keys = [];
                            for (var i = 0; i < object.keys.length; ++i) {
                                if (typeof object.keys[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.AnalyseRequest.keys: object expected");
                                message.keys[i] = $root.sajari.engine.Key.fromObject(object.keys[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AnalyseRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @static
                     * @param {sajari.engine.query.v1.AnalyseRequest} message AnalyseRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AnalyseRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.keys = [];
                        if (options.defaults)
                            object.searchRequest = null;
                        if (message.searchRequest != null && message.hasOwnProperty("searchRequest"))
                            object.searchRequest = $root.sajari.engine.query.v1.SearchRequest.toObject(message.searchRequest, options);
                        if (message.keys && message.keys.length) {
                            object.keys = [];
                            for (var j = 0; j < message.keys.length; ++j)
                                object.keys[j] = $root.sajari.engine.Key.toObject(message.keys[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this AnalyseRequest to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.AnalyseRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AnalyseRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return AnalyseRequest;
                })();

                v1.AnalyseResponse = (function() {

                    /**
                     * Properties of an AnalyseResponse.
                     * @memberof sajari.engine.query.v1
                     * @interface IAnalyseResponse
                     * @property {Array.<sajari.engine.query.v1.AnalyseResponse.ITerms>|null} [terms] AnalyseResponse terms
                     * @property {Array.<sajari.rpc.IStatus>|null} [status] AnalyseResponse status
                     */

                    /**
                     * Constructs a new AnalyseResponse.
                     * @memberof sajari.engine.query.v1
                     * @classdesc Represents an AnalyseResponse.
                     * @implements IAnalyseResponse
                     * @constructor
                     * @param {sajari.engine.query.v1.IAnalyseResponse=} [properties] Properties to set
                     */
                    function AnalyseResponse(properties) {
                        this.terms = [];
                        this.status = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * AnalyseResponse terms.
                     * @member {Array.<sajari.engine.query.v1.AnalyseResponse.ITerms>} terms
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @instance
                     */
                    AnalyseResponse.prototype.terms = $util.emptyArray;

                    /**
                     * AnalyseResponse status.
                     * @member {Array.<sajari.rpc.IStatus>} status
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @instance
                     */
                    AnalyseResponse.prototype.status = $util.emptyArray;

                    /**
                     * Creates a new AnalyseResponse instance using the specified properties.
                     * @function create
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseResponse=} [properties] Properties to set
                     * @returns {sajari.engine.query.v1.AnalyseResponse} AnalyseResponse instance
                     */
                    AnalyseResponse.create = function create(properties) {
                        return new AnalyseResponse(properties);
                    };

                    /**
                     * Encodes the specified AnalyseResponse message. Does not implicitly {@link sajari.engine.query.v1.AnalyseResponse.verify|verify} messages.
                     * @function encode
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseResponse} message AnalyseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalyseResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.terms != null && message.terms.length)
                            for (var i = 0; i < message.terms.length; ++i)
                                $root.sajari.engine.query.v1.AnalyseResponse.Terms.encode(message.terms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.status != null && message.status.length)
                            for (var i = 0; i < message.status.length; ++i)
                                $root.sajari.rpc.Status.encode(message.status[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified AnalyseResponse message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AnalyseResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {sajari.engine.query.v1.IAnalyseResponse} message AnalyseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AnalyseResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an AnalyseResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {sajari.engine.query.v1.AnalyseResponse} AnalyseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalyseResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AnalyseResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.terms && message.terms.length))
                                    message.terms = [];
                                message.terms.push($root.sajari.engine.query.v1.AnalyseResponse.Terms.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.status && message.status.length))
                                    message.status = [];
                                message.status.push($root.sajari.rpc.Status.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an AnalyseResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {sajari.engine.query.v1.AnalyseResponse} AnalyseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AnalyseResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an AnalyseResponse message.
                     * @function verify
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AnalyseResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.terms != null && message.hasOwnProperty("terms")) {
                            if (!Array.isArray(message.terms))
                                return "terms: array expected";
                            for (var i = 0; i < message.terms.length; ++i) {
                                var error = $root.sajari.engine.query.v1.AnalyseResponse.Terms.verify(message.terms[i]);
                                if (error)
                                    return "terms." + error;
                            }
                        }
                        if (message.status != null && message.hasOwnProperty("status")) {
                            if (!Array.isArray(message.status))
                                return "status: array expected";
                            for (var i = 0; i < message.status.length; ++i) {
                                var error = $root.sajari.rpc.Status.verify(message.status[i]);
                                if (error)
                                    return "status." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an AnalyseResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {sajari.engine.query.v1.AnalyseResponse} AnalyseResponse
                     */
                    AnalyseResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.sajari.engine.query.v1.AnalyseResponse)
                            return object;
                        var message = new $root.sajari.engine.query.v1.AnalyseResponse();
                        if (object.terms) {
                            if (!Array.isArray(object.terms))
                                throw TypeError(".sajari.engine.query.v1.AnalyseResponse.terms: array expected");
                            message.terms = [];
                            for (var i = 0; i < object.terms.length; ++i) {
                                if (typeof object.terms[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.AnalyseResponse.terms: object expected");
                                message.terms[i] = $root.sajari.engine.query.v1.AnalyseResponse.Terms.fromObject(object.terms[i]);
                            }
                        }
                        if (object.status) {
                            if (!Array.isArray(object.status))
                                throw TypeError(".sajari.engine.query.v1.AnalyseResponse.status: array expected");
                            message.status = [];
                            for (var i = 0; i < object.status.length; ++i) {
                                if (typeof object.status[i] !== "object")
                                    throw TypeError(".sajari.engine.query.v1.AnalyseResponse.status: object expected");
                                message.status[i] = $root.sajari.rpc.Status.fromObject(object.status[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an AnalyseResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @static
                     * @param {sajari.engine.query.v1.AnalyseResponse} message AnalyseResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AnalyseResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.terms = [];
                            object.status = [];
                        }
                        if (message.terms && message.terms.length) {
                            object.terms = [];
                            for (var j = 0; j < message.terms.length; ++j)
                                object.terms[j] = $root.sajari.engine.query.v1.AnalyseResponse.Terms.toObject(message.terms[j], options);
                        }
                        if (message.status && message.status.length) {
                            object.status = [];
                            for (var j = 0; j < message.status.length; ++j)
                                object.status[j] = $root.sajari.rpc.Status.toObject(message.status[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this AnalyseResponse to JSON.
                     * @function toJSON
                     * @memberof sajari.engine.query.v1.AnalyseResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AnalyseResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    AnalyseResponse.Terms = (function() {

                        /**
                         * Properties of a Terms.
                         * @memberof sajari.engine.query.v1.AnalyseResponse
                         * @interface ITerms
                         * @property {Array.<string>|null} [terms] Terms terms
                         */

                        /**
                         * Constructs a new Terms.
                         * @memberof sajari.engine.query.v1.AnalyseResponse
                         * @classdesc Represents a Terms.
                         * @implements ITerms
                         * @constructor
                         * @param {sajari.engine.query.v1.AnalyseResponse.ITerms=} [properties] Properties to set
                         */
                        function Terms(properties) {
                            this.terms = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Terms terms.
                         * @member {Array.<string>} terms
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @instance
                         */
                        Terms.prototype.terms = $util.emptyArray;

                        /**
                         * Creates a new Terms instance using the specified properties.
                         * @function create
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {sajari.engine.query.v1.AnalyseResponse.ITerms=} [properties] Properties to set
                         * @returns {sajari.engine.query.v1.AnalyseResponse.Terms} Terms instance
                         */
                        Terms.create = function create(properties) {
                            return new Terms(properties);
                        };

                        /**
                         * Encodes the specified Terms message. Does not implicitly {@link sajari.engine.query.v1.AnalyseResponse.Terms.verify|verify} messages.
                         * @function encode
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {sajari.engine.query.v1.AnalyseResponse.ITerms} message Terms message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Terms.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.terms != null && message.terms.length)
                                for (var i = 0; i < message.terms.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.terms[i]);
                            return writer;
                        };

                        /**
                         * Encodes the specified Terms message, length delimited. Does not implicitly {@link sajari.engine.query.v1.AnalyseResponse.Terms.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {sajari.engine.query.v1.AnalyseResponse.ITerms} message Terms message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Terms.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Terms message from the specified reader or buffer.
                         * @function decode
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {sajari.engine.query.v1.AnalyseResponse.Terms} Terms
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Terms.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.engine.query.v1.AnalyseResponse.Terms();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.terms && message.terms.length))
                                        message.terms = [];
                                    message.terms.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Terms message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {sajari.engine.query.v1.AnalyseResponse.Terms} Terms
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Terms.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Terms message.
                         * @function verify
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Terms.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.terms != null && message.hasOwnProperty("terms")) {
                                if (!Array.isArray(message.terms))
                                    return "terms: array expected";
                                for (var i = 0; i < message.terms.length; ++i)
                                    if (!$util.isString(message.terms[i]))
                                        return "terms: string[] expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a Terms message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {sajari.engine.query.v1.AnalyseResponse.Terms} Terms
                         */
                        Terms.fromObject = function fromObject(object) {
                            if (object instanceof $root.sajari.engine.query.v1.AnalyseResponse.Terms)
                                return object;
                            var message = new $root.sajari.engine.query.v1.AnalyseResponse.Terms();
                            if (object.terms) {
                                if (!Array.isArray(object.terms))
                                    throw TypeError(".sajari.engine.query.v1.AnalyseResponse.Terms.terms: array expected");
                                message.terms = [];
                                for (var i = 0; i < object.terms.length; ++i)
                                    message.terms[i] = String(object.terms[i]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Terms message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @static
                         * @param {sajari.engine.query.v1.AnalyseResponse.Terms} message Terms
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Terms.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.terms = [];
                            if (message.terms && message.terms.length) {
                                object.terms = [];
                                for (var j = 0; j < message.terms.length; ++j)
                                    object.terms[j] = message.terms[j];
                            }
                            return object;
                        };

                        /**
                         * Converts this Terms to JSON.
                         * @function toJSON
                         * @memberof sajari.engine.query.v1.AnalyseResponse.Terms
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Terms.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        return Terms;
                    })();

                    return AnalyseResponse;
                })();

                return v1;
            })();

            return query;
        })();

        return engine;
    })();

    sajari.rpc = (function() {

        /**
         * Namespace rpc.
         * @memberof sajari
         * @namespace
         */
        var rpc = {};

        rpc.Status = (function() {

            /**
             * Properties of a Status.
             * @memberof sajari.rpc
             * @interface IStatus
             * @property {number|null} [code] Status code
             * @property {string|null} [message] Status message
             */

            /**
             * Constructs a new Status.
             * @memberof sajari.rpc
             * @classdesc Represents a Status.
             * @implements IStatus
             * @constructor
             * @param {sajari.rpc.IStatus=} [properties] Properties to set
             */
            function Status(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Status code.
             * @member {number} code
             * @memberof sajari.rpc.Status
             * @instance
             */
            Status.prototype.code = 0;

            /**
             * Status message.
             * @member {string} message
             * @memberof sajari.rpc.Status
             * @instance
             */
            Status.prototype.message = "";

            /**
             * Creates a new Status instance using the specified properties.
             * @function create
             * @memberof sajari.rpc.Status
             * @static
             * @param {sajari.rpc.IStatus=} [properties] Properties to set
             * @returns {sajari.rpc.Status} Status instance
             */
            Status.create = function create(properties) {
                return new Status(properties);
            };

            /**
             * Encodes the specified Status message. Does not implicitly {@link sajari.rpc.Status.verify|verify} messages.
             * @function encode
             * @memberof sajari.rpc.Status
             * @static
             * @param {sajari.rpc.IStatus} message Status message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Status.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.code != null && message.hasOwnProperty("code"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                if (message.message != null && message.hasOwnProperty("message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                return writer;
            };

            /**
             * Encodes the specified Status message, length delimited. Does not implicitly {@link sajari.rpc.Status.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sajari.rpc.Status
             * @static
             * @param {sajari.rpc.IStatus} message Status message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Status.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Status message from the specified reader or buffer.
             * @function decode
             * @memberof sajari.rpc.Status
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sajari.rpc.Status} Status
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Status.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.rpc.Status();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.code = reader.int32();
                        break;
                    case 2:
                        message.message = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Status message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sajari.rpc.Status
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sajari.rpc.Status} Status
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Status.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Status message.
             * @function verify
             * @memberof sajari.rpc.Status
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Status.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.code != null && message.hasOwnProperty("code"))
                    if (!$util.isInteger(message.code))
                        return "code: integer expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                return null;
            };

            /**
             * Creates a Status message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sajari.rpc.Status
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sajari.rpc.Status} Status
             */
            Status.fromObject = function fromObject(object) {
                if (object instanceof $root.sajari.rpc.Status)
                    return object;
                var message = new $root.sajari.rpc.Status();
                if (object.code != null)
                    message.code = object.code | 0;
                if (object.message != null)
                    message.message = String(object.message);
                return message;
            };

            /**
             * Creates a plain object from a Status message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sajari.rpc.Status
             * @static
             * @param {sajari.rpc.Status} message Status
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Status.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.code = 0;
                    object.message = "";
                }
                if (message.code != null && message.hasOwnProperty("code"))
                    object.code = message.code;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                return object;
            };

            /**
             * Converts this Status to JSON.
             * @function toJSON
             * @memberof sajari.rpc.Status
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Status.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Status;
        })();

        rpc.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof sajari.rpc
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof sajari.rpc
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {sajari.rpc.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Empty instance using the specified properties.
             * @function create
             * @memberof sajari.rpc.Empty
             * @static
             * @param {sajari.rpc.IEmpty=} [properties] Properties to set
             * @returns {sajari.rpc.Empty} Empty instance
             */
            Empty.create = function create(properties) {
                return new Empty(properties);
            };

            /**
             * Encodes the specified Empty message. Does not implicitly {@link sajari.rpc.Empty.verify|verify} messages.
             * @function encode
             * @memberof sajari.rpc.Empty
             * @static
             * @param {sajari.rpc.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Empty message, length delimited. Does not implicitly {@link sajari.rpc.Empty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof sajari.rpc.Empty
             * @static
             * @param {sajari.rpc.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Empty message from the specified reader or buffer.
             * @function decode
             * @memberof sajari.rpc.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {sajari.rpc.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.sajari.rpc.Empty();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Empty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof sajari.rpc.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {sajari.rpc.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof sajari.rpc.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof sajari.rpc.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {sajari.rpc.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.sajari.rpc.Empty)
                    return object;
                return new $root.sajari.rpc.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof sajari.rpc.Empty
             * @static
             * @param {sajari.rpc.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof sajari.rpc.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Empty;
        })();

        return rpc;
    })();

    return sajari;
})();

module.exports = $root;
